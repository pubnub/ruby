require "spec_helper"

describe Pubnub::Revoke do
  around :each do |example|
    @fired = false

    @callback = -> (_envelope) do
      @fired = true
    end

    @pubnub = Pubnub.new(
      publish_key: "pub-a-mock-key",
      subscribe_key: "sub-a-mock-key",
      secret_key: "sec-a-mock-key",
      user_id: "ruby-test-uuid-client-one",
      auth_key: "ruby-test-auth-client-one",
    )

    example.run_with_retry retry: 10
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2884", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193701"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eIMc7OBPnp2U2SwjeKuxWgT-JosH36lc322y7Rhowhg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2882", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193702"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k6va84gvQC45qMo2tLb_4KDpOW1XB_PNIexOKqNRD3s="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2880", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193702"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k6va84gvQC45qMo2tLb_4KDpOW1XB_PNIexOKqNRD3s="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2881", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193703"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1J3l8tKzGJgL5sQ8uNWuY1NN8MRak7UxG6SaGT7CRVs="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2891", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LN-JEhsMwUVUOKJgsAiuvls9xESNX8x_MSSb9q7w4Yg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2889", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N0iEGsV1KZTy_KzQP9HblECl6h8FZY5cs9O0gVaQxiw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2890", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N0iEGsV1KZTy_KzQP9HblECl6h8FZY5cs9O0gVaQxiw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2888", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N0iEGsV1KZTy_KzQP9HblECl6h8FZY5cs9O0gVaQxiw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2886", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N0iEGsV1KZTy_KzQP9HblECl6h8FZY5cs9O0gVaQxiw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2887", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kfJ21RazTcPuGwK5227b_3BggVS-5IOREb1CxzV-bt4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2897", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193704"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v7ALKrDiZVycbeIMrDznj3sKQp-H5K_ALBkYHjRhuCs="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2895", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193705"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hm6GILjS3v3_Vk_46IG88h-BBh9w7xA4pAO8mYCLZ2w="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2896", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193706"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nTW_uNXlL_hDKCHvaDdEx8J13H5hsy55sF6TBMux35o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2894", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193706"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nTW_uNXlL_hDKCHvaDdEx8J13H5hsy55sF6TBMux35o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2892", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193707"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O0MdMzxUe8azsW35aQlmbVg--FgUgKQY60nCm1RKHIs="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2893", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193708"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Rm6r0tAlVgws7ez-Wfe1GnFSm76k7QX34mv418nqP04="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2903", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SSIlp1QrBBXmm_fb1tniEsr5n6QhPyNUtAo5F15_9t8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2901", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SSIlp1QrBBXmm_fb1tniEsr5n6QhPyNUtAo5F15_9t8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2902", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SSIlp1QrBBXmm_fb1tniEsr5n6QhPyNUtAo5F15_9t8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2900", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314375"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZuwPtT_y4mkGcgCfDsargYIoivAPSYkneOczCxrk0bc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2898", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314375"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZuwPtT_y4mkGcgCfDsargYIoivAPSYkneOczCxrk0bc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2899", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314375"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZuwPtT_y4mkGcgCfDsargYIoivAPSYkneOczCxrk0bc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2909", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193708"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_gcwAA-PkvGaQGuAmpR7b81PQ_vLKeRMEQHhe7yWjUE="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2907", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193709"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iGAkYd4-_zrLIWWRWWo8rn_b9GzUhCnYMWs2Pd67dNU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2908", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193710"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jb407hfS--IzNsGARwxGENsr4wKwQNX-Gj6AbyR3EaM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2906", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193710"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jb407hfS--IzNsGARwxGENsr4wKwQNX-Gj6AbyR3EaM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2904", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193711"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AM7MqJZDsMLnwnY4UWbR0_Q05mUXZMfJg3mymLZZvFw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2905", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193711"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AM7MqJZDsMLnwnY4UWbR0_Q05mUXZMfJg3mymLZZvFw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2915", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "etWtCkNHm8ALi5GZo74Eh-_AXhCu5TbhQEnHLQakUd4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2913", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "etWtCkNHm8ALi5GZo74Eh-_AXhCu5TbhQEnHLQakUd4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2914", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "etWtCkNHm8ALi5GZo74Eh-_AXhCu5TbhQEnHLQakUd4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2912", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "etWtCkNHm8ALi5GZo74Eh-_AXhCu5TbhQEnHLQakUd4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2910", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UFdVH8_6SmOBU4FRjUvy5zUUwn1-NDUS8DPm_cscGdw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2911", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UFdVH8_6SmOBU4FRjUvy5zUUwn1-NDUS8DPm_cscGdw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2813", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193712"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EiGhdd96HUFNpakhZFSLXZkYBwat_q9j5yTZfS8m3V0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2811", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193713"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HAsNdeJmTWaiLM_CEAuB_JFBTxyWNwqXoVIUMpaVR3o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2812", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193713"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HAsNdeJmTWaiLM_CEAuB_JFBTxyWNwqXoVIUMpaVR3o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2810", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193714"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VxqxolvcGoTwbDNt-c_mEiX5-lckweC-NBDqS9GPH4g="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2808", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193715"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H05oMCfjZ45b_gp0ifclmtnK1TJta7hVRf3xD_Vtuko="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2809", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193715"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H05oMCfjZ45b_gp0ifclmtnK1TJta7hVRf3xD_Vtuko="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2819", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VVi8V87YdWrDJPOSBiYBMaGUXjBGaXxHgqh9CxDWrIk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2817", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VVi8V87YdWrDJPOSBiYBMaGUXjBGaXxHgqh9CxDWrIk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2818", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VIV42EKNAs96ihVx77azi07DXEB0eBEr7vZcBSpmCfE="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2816", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VIV42EKNAs96ihVx77azi07DXEB0eBEr7vZcBSpmCfE="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2814", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VIV42EKNAs96ihVx77azi07DXEB0eBEr7vZcBSpmCfE="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2815", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VIV42EKNAs96ihVx77azi07DXEB0eBEr7vZcBSpmCfE="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2825", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193716"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2l8iG5GARSuBwoXOXVyjS4SNPe5rEALpbRoVjhV-MWI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2823", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193717"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fjtkQeX3cE5I1NSatbLlQ_-wekEXgylwbsyi556gBlI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2824", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193717"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fjtkQeX3cE5I1NSatbLlQ_-wekEXgylwbsyi556gBlI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2822", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193718"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8NrfjOyJRUWA2d1GirPDwMi9Ss2zsUFnVnIgQ8PKBVk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2820", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193719"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1nhnZe_8Fu8X1SXlAzhaLPnrFl8RtSjF87zK3xAsDMI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2821", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193719"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1nhnZe_8Fu8X1SXlAzhaLPnrFl8RtSjF87zK3xAsDMI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2831", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iHUJZOv9-n26AoULDPKoipKrIsLwzmtKVA0-f26nfwM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2829", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iHUJZOv9-n26AoULDPKoipKrIsLwzmtKVA0-f26nfwM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2830", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iHUJZOv9-n26AoULDPKoipKrIsLwzmtKVA0-f26nfwM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2828", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314380"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BaDRs42boCWNZFujKrLfE3qf4NxlT8qTZaOhNSjJKPc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2826", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314380"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BaDRs42boCWNZFujKrLfE3qf4NxlT8qTZaOhNSjJKPc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2827", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314380"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BaDRs42boCWNZFujKrLfE3qf4NxlT8qTZaOhNSjJKPc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2837", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193720"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V96BXE8-AxvfisP2g4eB4AlE16uJrcywzfOelKkVuQI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2835", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193720"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V96BXE8-AxvfisP2g4eB4AlE16uJrcywzfOelKkVuQI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2836", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193721"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GVZ8G5PVP9ArviG-Qr_I2kIMmnpJdNfwgh7QGrp8kD0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2834", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193722"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O50cn90_ayejZHM4VShgo6ygvO0S-U1CJaQPJSIPg28="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2832", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193722"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O50cn90_ayejZHM4VShgo6ygvO0S-U1CJaQPJSIPg28="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2833", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193723"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_5kB1MjaWJjWjARqNdFYgrW1XsV1u2SJ-DNIB5XiAF8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2843", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C9tGkbS0xh4jdbEJy3rqqargLAZWV6IZ9tIcZ1Odocw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2841", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C9tGkbS0xh4jdbEJy3rqqargLAZWV6IZ9tIcZ1Odocw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2842", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C9tGkbS0xh4jdbEJy3rqqargLAZWV6IZ9tIcZ1Odocw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2840", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314382"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7mJ20mHHHVuWUTvgOuwmEW_tmWbOXWqPWWUpGYicN1o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2838", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314382"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7mJ20mHHHVuWUTvgOuwmEW_tmWbOXWqPWWUpGYicN1o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2839", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314382"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7mJ20mHHHVuWUTvgOuwmEW_tmWbOXWqPWWUpGYicN1o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2849", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193724"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oXGpdSHsI1JZE0sh7JRKzO1cAbd00gHH3OMQ8hlbszA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2847", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193724"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oXGpdSHsI1JZE0sh7JRKzO1cAbd00gHH3OMQ8hlbszA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2848", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193725"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_bEFoQk_TJNDlnV09TpmlrBmf5NazXz3QIH4bAvszGs="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2846", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193726"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z6qtSfso50j28QhJk665VyVX5VlIG-sL-LZSCgATWCw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2844", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193726"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z6qtSfso50j28QhJk665VyVX5VlIG-sL-LZSCgATWCw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2845", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193727"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1RSA7H_CNoI10Imn2WfuO83qK69t2vFQdPPxkBtrhvQ="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2855", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314382"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qccxtstM0OxBofnPMt0Wgyctvq6CsOja7P-osLNXsLI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2853", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R22Vwc6lQkxwnFCGDfb5KzwVipHwRnEqFRTzzPw5u14="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2854", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R22Vwc6lQkxwnFCGDfb5KzwVipHwRnEqFRTzzPw5u14="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2852", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R22Vwc6lQkxwnFCGDfb5KzwVipHwRnEqFRTzzPw5u14="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2850", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h-otEffyZE8uWedaBu9u9-AS-mFGXgAE4ylCxr53J4c="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2851", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h-otEffyZE8uWedaBu9u9-AS-mFGXgAE4ylCxr53J4c="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2861", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193727"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zfRrTyJSzx2S6d6VXjr7mkkteaQHvGvNfIq5z6c4v4c="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2859", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193728"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cRA51f_3ghOmEiu_Nzv8Vnj1FnJbmTu0444yGpV4Fo0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2860", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193729"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TLbi96CFxVZJHvvWozzHT6IuT6QK_TtuEQg2kG2qv7M="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2858", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193730"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Qn18S8dPQEPX9GB4fQ4tY1AhDtoMTA4dAZOcDB3pUMw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2856", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193730"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Qn18S8dPQEPX9GB4fQ4tY1AhDtoMTA4dAZOcDB3pUMw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2857", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193731"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xgMzDvpkZj9erqYt60QEJY3kz4t23tInfysCAVbTut0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2867", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5ggUJyxClT1iR1m2PyamsECIX798gaO_DjswNjEF-7Q="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2865", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5ggUJyxClT1iR1m2PyamsECIX798gaO_DjswNjEF-7Q="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2866", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5OgvsqZDLZGPQ6wZfmNlK_y3dVIixe8NfPru6ydvZew="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2864", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5OgvsqZDLZGPQ6wZfmNlK_y3dVIixe8NfPru6ydvZew="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2862", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5OgvsqZDLZGPQ6wZfmNlK_y3dVIixe8NfPru6ydvZew="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2863", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5OgvsqZDLZGPQ6wZfmNlK_y3dVIixe8NfPru6ydvZew="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2873", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193732"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y5yEo3bwuiw77uNAq2rkikKnoA35yrelH1p0cJOoh9A="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2871", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193732"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y5yEo3bwuiw77uNAq2rkikKnoA35yrelH1p0cJOoh9A="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2872", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193733"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mLNPKgPrnf2m872qkGXqhAYICvtBRBG34aevV-VvSoA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2870", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193734"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o6ixed7hPQfItG-oiyj7tKuEPYh10g7X1yK_19ECAcg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2868", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193735"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mVhkCjtIK14BWmoQQApcY8c8hNTrsUGahxXJucQ6Rlo="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2869", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193735"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mVhkCjtIK14BWmoQQApcY8c8hNTrsUGahxXJucQ6Rlo="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2879", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VFQno2WjSrRXHBKmA4YqBOCmDieHuRKqT7hrpKT35bA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2877", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VFQno2WjSrRXHBKmA4YqBOCmDieHuRKqT7hrpKT35bA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2878", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VFQno2WjSrRXHBKmA4YqBOCmDieHuRKqT7hrpKT35bA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2876", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VFQno2WjSrRXHBKmA4YqBOCmDieHuRKqT7hrpKT35bA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2874", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a4fMt_fkB4bS1-v6Oi7_oK_gqtC8b7vG1XNxZZZY21I="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2875", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a4fMt_fkB4bS1-v6Oi7_oK_gqtC8b7vG1XNxZZZY21I="
      envelope = @pubnub.revoke(group: "demo", read: true, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2669", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193736"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t8KTx3IAhcIUH_yFQkPLx0fzw_Dkcpfg5D7EEgnjyog="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2667", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193736"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t8KTx3IAhcIUH_yFQkPLx0fzw_Dkcpfg5D7EEgnjyog="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2668", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193737"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0lut-IR7n6nRtj5DqMyK2FR4DQ4JtfPKgyeG7LpPB2Q="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2666", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193738"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PZgPK3OgaF_4BnHSOPkGa36eGgOUo7-ZbE9p3e0RlzU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2664", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193738"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PZgPK3OgaF_4BnHSOPkGa36eGgOUo7-ZbE9p3e0RlzU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2665", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193739"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r8CT5VL8HvXOF0VkHAFL6Fp6ufbJqk7wa9qM8z-EwTA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2675", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BJkAv_TafGkh8lCdFeUeTa1KBuH2xIgrYW45N96rZCo="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2673", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BJkAv_TafGkh8lCdFeUeTa1KBuH2xIgrYW45N96rZCo="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2674", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "koRYbpEkx5N0r2SbAcmtpxJmZv-pngkhtMKH9lx0Gd8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2672", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "koRYbpEkx5N0r2SbAcmtpxJmZv-pngkhtMKH9lx0Gd8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2670", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "koRYbpEkx5N0r2SbAcmtpxJmZv-pngkhtMKH9lx0Gd8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2671", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "koRYbpEkx5N0r2SbAcmtpxJmZv-pngkhtMKH9lx0Gd8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2681", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193740"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V8vSxM9jeo9mBzDzlomNxCRHx6pA6ynSi6F2jDQcj0E="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2679", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193740"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V8vSxM9jeo9mBzDzlomNxCRHx6pA6ynSi6F2jDQcj0E="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2680", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193741"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zMUNYkv8GBHVNmNS3XdL6aZXtM28uQakAgaoT1QW8Fo="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2678", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193742"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0atMLIifZlNDDgTxZHEzHEQ1XsFzOFl7jz64TpKaPFg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2676", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193742"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0atMLIifZlNDDgTxZHEzHEQ1XsFzOFl7jz64TpKaPFg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2677", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193743"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W8h3AEdx6JVRTWxnmtdFOasdm0E5Q-2wzDzWnBwT6Kg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2687", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314389"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c2AZO7GO4ewSRm_aqwfNy0xnSmFEHqe0CiJ-lEjmqQw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2685", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314389"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c2AZO7GO4ewSRm_aqwfNy0xnSmFEHqe0CiJ-lEjmqQw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2686", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oLoZEXDoLfXxuKxRBKe33og6Pa-HvjLwk_ZhYCzC9uU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2684", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oLoZEXDoLfXxuKxRBKe33og6Pa-HvjLwk_ZhYCzC9uU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2682", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oLoZEXDoLfXxuKxRBKe33og6Pa-HvjLwk_ZhYCzC9uU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2683", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oLoZEXDoLfXxuKxRBKe33og6Pa-HvjLwk_ZhYCzC9uU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2693", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193744"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H4swi9tycAHQOrQEHwYSEHfTUJmTKnrKEDWKts4Lcdk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2691", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193745"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "f9lsAMFxYSGtayPZW3ThkWJtB5yjjYGCIHD1ioNBcLc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2692", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193745"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "f9lsAMFxYSGtayPZW3ThkWJtB5yjjYGCIHD1ioNBcLc="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2690", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193746"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Db8QcD60lpRxCuUiODh4D6Q7o94kB49JpkVTsT6Ss_c="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2688", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193746"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Db8QcD60lpRxCuUiODh4D6Q7o94kB49JpkVTsT6Ss_c="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2689", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193747"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vXh3-LcllU991ZyGauNqIn6xAfm1ZEYbxMzLZRJCf1c="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2699", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FpeGUIFpCNt9QI4wl4hQDhV0hH3-OYV-q1l7JeEXQAQ="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2697", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FVbuh81Ugtlfq8Q7zVKC2B8v_SrN50GgkhaPybWVt94="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2698", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FVbuh81Ugtlfq8Q7zVKC2B8v_SrN50GgkhaPybWVt94="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2696", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FVbuh81Ugtlfq8Q7zVKC2B8v_SrN50GgkhaPybWVt94="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2694", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FVbuh81Ugtlfq8Q7zVKC2B8v_SrN50GgkhaPybWVt94="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2695", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cRtHpmX42oucHI52flXNvJaJVdtC5ZB9tuyXKXDO2sI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2597", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193748"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bsENxEmq8rbkawsou6_DmdWpz9WYnmLtbW3PhE_q8CQ="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2595", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193748"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bsENxEmq8rbkawsou6_DmdWpz9WYnmLtbW3PhE_q8CQ="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2596", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193749"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cvqhT0k0_axHaKwUumQmHqWlJN6DrFhcLVDN9N11rek="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2594", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193750"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sdIgzkt3ELJLhonAkE55-cfj6p0p_eyc7b0qUEwHb0A="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2592", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193750"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sdIgzkt3ELJLhonAkE55-cfj6p0p_eyc7b0qUEwHb0A="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2593", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193751"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uRD2UehLGJVJX9_w6goa317n1o9qY_UVSUwp8W8O9mE="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2603", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g0JhLKFav0E7CYUNPDqDB9Qh59QJIr0ZTwmWjs3VQd0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2601", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g0JhLKFav0E7CYUNPDqDB9Qh59QJIr0ZTwmWjs3VQd0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2602", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g0JhLKFav0E7CYUNPDqDB9Qh59QJIr0ZTwmWjs3VQd0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2600", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o6sIIK_lFEjDwYkzIZmFDfeYXTMKx6DiH8L3eiFCZEI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2598", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o6sIIK_lFEjDwYkzIZmFDfeYXTMKx6DiH8L3eiFCZEI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2599", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o6sIIK_lFEjDwYkzIZmFDfeYXTMKx6DiH8L3eiFCZEI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2609", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193752"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0pLVzeFlZ8kNsER8i9SnCIAZ9b5P8Ok0zO0IqLDGn2w="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2607", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193752"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0pLVzeFlZ8kNsER8i9SnCIAZ9b5P8Ok0zO0IqLDGn2w="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2608", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193753"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Jk5C_IbdzvhvMfQxnvcFISVXxeBCEXzWi-Q9cR7SfJg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2606", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193753"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Jk5C_IbdzvhvMfQxnvcFISVXxeBCEXzWi-Q9cR7SfJg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2604", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193754"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iAwFzan-cdbdhW97duDLRkNQ9_jQcpkntS82xahleMM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2605", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193755"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Pn3QiniXQ8HQYbdLO9OQqomug_QXJHcy2KkuKuwSXtI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2615", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QwZuvhKTSeCzUVkETR6ZhejF82ar0294LISZxXXps7Y="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2613", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QwZuvhKTSeCzUVkETR6ZhejF82ar0294LISZxXXps7Y="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2614", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QwZuvhKTSeCzUVkETR6ZhejF82ar0294LISZxXXps7Y="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2612", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QwZuvhKTSeCzUVkETR6ZhejF82ar0294LISZxXXps7Y="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2610", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314395"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rN-GT4HRYFPbMgF7ZxOYOw0zX35knrgN_y5h2R1ts1g="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2611", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314395"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rN-GT4HRYFPbMgF7ZxOYOw0zX35knrgN_y5h2R1ts1g="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2621", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193755"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1t6NxzpwVyMQ0RSysPslfwkh5pnqX5eCLn8yU7qDxQs="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2619", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193756"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xKT6y31Upx1UZdEsAQJhOnoTmaSBA2qxcbkrT8wneAY="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2620", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193757"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_E13Grnb19NjlzWXlhbdMEsRA8GwI2mz8AmdI8XOr7M="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2618", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193757"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_E13Grnb19NjlzWXlhbdMEsRA8GwI2mz8AmdI8XOr7M="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2616", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193758"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4ph8cTPw-AMoilltGfO-Z9Jyx0gh2RbNcbKRa5ImKQY="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2617", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193759"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qGAQRw0PBKcuYxuJytxr6SIyz59pjLcsCLLQc3rrwsw="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2627", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314395"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "17-A91S6rsZy5HS8Orc0Dij5OxGY_4oSLGeXS7mhF9o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2625", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314395"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "17-A91S6rsZy5HS8Orc0Dij5OxGY_4oSLGeXS7mhF9o="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2626", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rVjjkCMdWmBEt-ux-UknLd292SBO1VmeSjmeIxfz-H4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2624", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rVjjkCMdWmBEt-ux-UknLd292SBO1VmeSjmeIxfz-H4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2622", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rVjjkCMdWmBEt-ux-UknLd292SBO1VmeSjmeIxfz-H4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2623", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rVjjkCMdWmBEt-ux-UknLd292SBO1VmeSjmeIxfz-H4="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2633", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193759"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9gA6oy7e3Ca4IknwD0ktcNg5aflW_JnA7My49v1XEYI="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2631", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193760"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "13THuDPw39U-CGpGz12IhoeGUy6rBXermknH2inkzKM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2632", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193760"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "13THuDPw39U-CGpGz12IhoeGUy6rBXermknH2inkzKM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2630", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193761"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CT5XA6JGUgAI6Xh73t-vZNwhMk58yuGXLge-G-mAWic="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2628", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193762"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t7CIxN7bz6F-6CYUPFjHAsMpiXwU4kVltv5-nS-cNEM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2629", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193762"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t7CIxN7bz6F-6CYUPFjHAsMpiXwU4kVltv5-nS-cNEM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2639", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314397"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G478zCXwkkmb7t-HeAqK43bDERU4RPgMfl8V7rSZskk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2637", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314397"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G478zCXwkkmb7t-HeAqK43bDERU4RPgMfl8V7rSZskk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2638", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314397"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G478zCXwkkmb7t-HeAqK43bDERU4RPgMfl8V7rSZskk="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2636", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314398"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rz72CNhBHQyDEx7qWrK1NEilVRHCvxSJ_Nwxw3z4L9I="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2634", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314398"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rz72CNhBHQyDEx7qWrK1NEilVRHCvxSJ_Nwxw3z4L9I="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2635", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314399"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UyP_MbiOkaYKrAdo0QoVgkOwFDfpNewyrX3Kl7o4xKM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2645", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193765"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Gl7F8c4wRsOjDxF_WeNTvP5pMWWX23dXXzj1rkkotkM="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2643", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193766"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Mt724Lx1Zb0AoQW54Ukcl8gdnOoxG0l7Wjl-JJ9Z0kg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2644", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193766"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Mt724Lx1Zb0AoQW54Ukcl8gdnOoxG0l7Wjl-JJ9Z0kg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2642", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193767"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZR1g4hCCpu7E5yzqV35KzeW2TlweWXJ4FSRgtI2H54E="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2640", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193767"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZR1g4hCCpu7E5yzqV35KzeW2TlweWXJ4FSRgtI2H54E="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2641", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193768"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "y8dA7I0rAhWBzONxK4IVoy4c_UffnO4hnIjiJp0TvFU="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2651", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314399"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YvOrqGX9nni2Fznyp4znVtd2AnV7Oao88mF6ivNnpoY="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2649", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314399"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YvOrqGX9nni2Fznyp4znVtd2AnV7Oao88mF6ivNnpoY="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2650", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314400"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IVliIfhIHZ6H2hQyPcodFjDP30LK5pdiQV-Q95rcks8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2648", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314400"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IVliIfhIHZ6H2hQyPcodFjDP30LK5pdiQV-Q95rcks8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2646", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314400"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IVliIfhIHZ6H2hQyPcodFjDP30LK5pdiQV-Q95rcks8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2647", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7yuvv9V25Vv-cp6GpKoF-Hu9FD-CILVsP-9QR0-Augg="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2657", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193769"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AJfg5fBwdGAFUbhvH7kJhQlBCPoL9xTtmkWxyk25gII="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2655", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193769"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AJfg5fBwdGAFUbhvH7kJhQlBCPoL9xTtmkWxyk25gII="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2656", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193770"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M6MXOMZ72B670s6MXwEhKh3puVS8zi-PeDWnxCi0jb8="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2654", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193771"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iUdJLpHCo7yL9cYnEDvxZlPvjHevq8vYC07KbvJjTCo="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2652", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193772"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VAMGpXsbfw9IvBpi2f_hHmppsrdgg3bXwElL2ds9Z5w="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2653", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193772"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VAMGpXsbfw9IvBpi2f_hHmppsrdgg3bXwElL2ds9Z5w="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2663", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vvPDE5jC-VxsZlAkd4U2173z25VuedI8ljpHi-8N3aA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2661", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vvPDE5jC-VxsZlAkd4U2173z25VuedI8ljpHi-8N3aA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2662", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vvPDE5jC-VxsZlAkd4U2173z25VuedI8ljpHi-8N3aA="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2660", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JeuaLtS1X0ZMGbPFVcu0xVBXcks50c9EP3IpcbroVX0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2658", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JeuaLtS1X0ZMGbPFVcu0xVBXcks50c9EP3IpcbroVX0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2659", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JeuaLtS1X0ZMGbPFVcu0xVBXcks50c9EP3IpcbroVX0="
      envelope = @pubnub.revoke(group: "demo", read: true, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2777", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193773"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pTTiVtvIw2zeIMZZEwBYJYaDBWl-ybOtJJZL1QWnzGc="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2775", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193774"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-HXWBd67qIS_EOCZSb198agAXUgnp7Qz5_vPNBK4Jzg="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2776", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193774"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-HXWBd67qIS_EOCZSb198agAXUgnp7Qz5_vPNBK4Jzg="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2774", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193775"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lXG4opu8q9KlWf7c-OnwW_6h5NycrbWoeLIZj5kcDeI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2772", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193776"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l0IYf8YgpLVsi4ndCdfTld-h_smk-zLZUibCK1PgWeU="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2773", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193777"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bDUzrPzCRNe6XbgVZYcR7ZVrVflKdIvlGPSlnR4AW7g="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2783", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GxKiZ1HUhT3ZnwqS-WQNvZfkNz-FnXEj1fU9hEyH9MM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2781", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GxKiZ1HUhT3ZnwqS-WQNvZfkNz-FnXEj1fU9hEyH9MM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2782", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tXPYQzYSnoyc4UMfNJ1lhhg38QvYC-eLgodonQ3vogA="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2780", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tXPYQzYSnoyc4UMfNJ1lhhg38QvYC-eLgodonQ3vogA="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2778", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tXPYQzYSnoyc4UMfNJ1lhhg38QvYC-eLgodonQ3vogA="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2779", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tXPYQzYSnoyc4UMfNJ1lhhg38QvYC-eLgodonQ3vogA="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2789", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193778"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "95VRi1yO5V4FO6OBTWp4ggb56zJHW5NKlhBxj4IUYFo="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2787", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193779"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0HEg_2h9saqRoTSQpQGm1vwIGvnPaw7wh9x1UyoGnE4="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2788", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193779"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0HEg_2h9saqRoTSQpQGm1vwIGvnPaw7wh9x1UyoGnE4="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2786", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193780"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QnJ7D04weWraIGhtWk0A89nSzLFTv4BxQh-vL4AmLqs="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2784", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193781"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NBLGmnMvjTbEsN8oKpSfT1iMIAVF4f2HUYlD2iLMLOQ="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2785", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193781"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NBLGmnMvjTbEsN8oKpSfT1iMIAVF4f2HUYlD2iLMLOQ="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2795", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314404"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "skI_NwWm0vgNIJR2vjZYuxQmuAllQEw8_EHVCxYLChI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2793", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314404"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "skI_NwWm0vgNIJR2vjZYuxQmuAllQEw8_EHVCxYLChI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2794", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314404"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "skI_NwWm0vgNIJR2vjZYuxQmuAllQEw8_EHVCxYLChI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2792", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314404"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "skI_NwWm0vgNIJR2vjZYuxQmuAllQEw8_EHVCxYLChI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2790", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "E-gic3DOuhjBUvCgOkWa3CTEkMLWHGzg2m32gFtq1IQ="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2791", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "E-gic3DOuhjBUvCgOkWa3CTEkMLWHGzg2m32gFtq1IQ="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2801", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193782"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5eFRCGiQMEAiCs_vHFRhhxSX6Fok_6rA12hY8d-Y9xw="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2799", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193783"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cat7rh9Pl8U4lpVPK7mwjpkCht5FV6I9GHIUlh8-Zto="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2800", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193784"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HIo3Vm2s0ii7wLFu4-_Rn90iqtER3oUSoUrWA8rRKnM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2798", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193784"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HIo3Vm2s0ii7wLFu4-_Rn90iqtER3oUSoUrWA8rRKnM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2796", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193786"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Us39enMmwdYz-iJdzlCvmFdy-ghuH0oJ2jW3JzSnyV0="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2797", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193786"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Us39enMmwdYz-iJdzlCvmFdy-ghuH0oJ2jW3JzSnyV0="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2807", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z9PnU3T0gK3Tr9cRW2dxO2_6Q1ipu2nIb-LHJv3Ovkg="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2805", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z9PnU3T0gK3Tr9cRW2dxO2_6Q1ipu2nIb-LHJv3Ovkg="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2806", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314406"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O7QPZpUriBKKKA7E5lEx2IhQJ_UNRZnN2IuTsnNUR24="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2804", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314406"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O7QPZpUriBKKKA7E5lEx2IhQJ_UNRZnN2IuTsnNUR24="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2802", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RzaqDqJ4kbziit62TZtnlLFQko3UfyLHQFHjaN5q50Q="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2803", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RzaqDqJ4kbziit62TZtnlLFQko3UfyLHQFHjaN5q50Q="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2705", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193787"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CRw9bdclaEvN6mRnYrswGT3yJoRoJNYBt6YdRFYbKno="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2703", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193788"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SjBskJkJ1h_vbtK53cqmrjMV66soO0q18eYrlOopbkk="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2704", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193788"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SjBskJkJ1h_vbtK53cqmrjMV66soO0q18eYrlOopbkk="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2702", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193789"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vZGKq3kVQzNRaHq4XP64SBMyTN_vzUuwEEvf1ji-VtU="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2700", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193790"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OaUYycFlyKTBRn1wpaR3aD6rtQvoGVV-wSo-Q-mfync="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2701", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193791"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aKgEpNCOX8Sv0lhTc9E7DLuhzFq51YmZU0AQw5OUgzk="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2711", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "emWd66R7iWXy6gdlzoIjH78V5RFfjfdUtovdyI_HUmI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2709", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "emWd66R7iWXy6gdlzoIjH78V5RFfjfdUtovdyI_HUmI="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2710", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T3SIbroG5kXYdp_7cnRLDs59Kn7MPSQFTPZTfB8d0Kc="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2708", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T3SIbroG5kXYdp_7cnRLDs59Kn7MPSQFTPZTfB8d0Kc="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2706", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T3SIbroG5kXYdp_7cnRLDs59Kn7MPSQFTPZTfB8d0Kc="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2707", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T3SIbroG5kXYdp_7cnRLDs59Kn7MPSQFTPZTfB8d0Kc="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2717", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193792"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hGX5qKgcOjARUZudYc2LIY24jxvIgdEm-rB5vKdQ16I="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2715", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193792"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hGX5qKgcOjARUZudYc2LIY24jxvIgdEm-rB5vKdQ16I="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2716", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193793"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MbYvsLHw__3Pu_FV-WNAEjm94u9l97Y2TMORDvnTOpM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2714", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193793"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MbYvsLHw__3Pu_FV-WNAEjm94u9l97Y2TMORDvnTOpM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2712", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193794"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z34tX3ffb7BZbRjqcbOxJQMUv7U3ZzotE90Hi8HwAhQ="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2713", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193795"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "523ldQd4P9xfxz3eEmFXQy1EBSErdOhk1gJF1VXR6qA="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2723", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314409"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vdL5e_x0xAE1sGsi7J7fBb8c0EQnBybtF9NUcHZQF4k="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2721", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314409"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vdL5e_x0xAE1sGsi7J7fBb8c0EQnBybtF9NUcHZQF4k="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2722", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314409"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vdL5e_x0xAE1sGsi7J7fBb8c0EQnBybtF9NUcHZQF4k="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2720", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314409"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vdL5e_x0xAE1sGsi7J7fBb8c0EQnBybtF9NUcHZQF4k="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2718", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F4UazdRsp5ftetZcRVwIm2i0exA1-ErBVnGIfSu1b4I="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2719", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F4UazdRsp5ftetZcRVwIm2i0exA1-ErBVnGIfSu1b4I="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2729", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193795"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ocVx-Y17FZJg3asK1pUXYwmp50Q3X5B0JHtHG3nHWug="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2727", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193796"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5U2F6jhd5bpspaEPFs86USfODBlcWxOzpmgETTaDIa0="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2728", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193797"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jSAR2yQSH_bTEmkcc0NoW3KzJhbJu3mxCe-6cZGMCpM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2726", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193797"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jSAR2yQSH_bTEmkcc0NoW3KzJhbJu3mxCe-6cZGMCpM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2724", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193798"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SoRgbgydZb9rgUewfsRRdB_goUvkqcOjQphC5v-vf6I="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2725", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193799"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5eu1gRjc-_F-PBtbVh4Ig6wi8kHMOyNV52YSWWzvjcM="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2735", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6aiIf5-iNDu184E4BZ8VtgJVRMCTR-IfnLVrNRtSiHU="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2733", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6aiIf5-iNDu184E4BZ8VtgJVRMCTR-IfnLVrNRtSiHU="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2734", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VV-jZzm3VUJCgVqGNvDDsXNtzLfVJrmLPCjzaUY0K7w="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2732", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VV-jZzm3VUJCgVqGNvDDsXNtzLfVJrmLPCjzaUY0K7w="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2730", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VV-jZzm3VUJCgVqGNvDDsXNtzLfVJrmLPCjzaUY0K7w="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2731", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VV-jZzm3VUJCgVqGNvDDsXNtzLfVJrmLPCjzaUY0K7w="
      envelope = @pubnub.revoke(group: "demo", read: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2741", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193799"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kSM73DLizhUHe5LQRAyyF0i_TatKdvERY7ldOyiCQqM="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2739", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193800"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HA0R5sxJ4xf0Uzu4cXBDdPHgD8XXqhg6D9QqGntRLzE="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2740", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193801"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aDyI8bOmghbKTZcFeFQygaz7nphhPgPUSH3MqVWFh5k="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2738", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193801"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aDyI8bOmghbKTZcFeFQygaz7nphhPgPUSH3MqVWFh5k="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2736", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193802"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "38sAD70-vN6rGYjZGlU4qPQ-hfP4VNaHgx1eOVjRCRk="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2737", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193802"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "38sAD70-vN6rGYjZGlU4qPQ-hfP4VNaHgx1eOVjRCRk="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2747", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kGOwAgY6xhMTYnvIVY-tZZNnMy62dVnqJjVj1wNMmMU="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2745", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kGOwAgY6xhMTYnvIVY-tZZNnMy62dVnqJjVj1wNMmMU="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2746", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kGOwAgY6xhMTYnvIVY-tZZNnMy62dVnqJjVj1wNMmMU="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2744", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kGOwAgY6xhMTYnvIVY-tZZNnMy62dVnqJjVj1wNMmMU="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2742", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yS79TKlHJNiNr7xC3mYsMIl2KPtC74d0Vx1ss8RWMKI="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2743", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yS79TKlHJNiNr7xC3mYsMIl2KPtC74d0Vx1ss8RWMKI="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2753", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193803"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BIAI9Yuvxf4BU06KTfvSf7uSZ_lg7lGCpx6D8qV7CHs="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2751", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193804"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vtbWKKT97MJZg02evkLZY2dyvNsD6WiQmsTaW5LCKKk="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2752", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193804"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vtbWKKT97MJZg02evkLZY2dyvNsD6WiQmsTaW5LCKKk="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2750", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193805"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_pnEVk9oZpP2poYdeghbeXp-LnDym1_HfxfgUC6gNeg="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2748", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193806"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zrTNlk3-ZqQMeL4jlO_zZRQc86TNMD8ZJcdGylk0g0E="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2749", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193806"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zrTNlk3-ZqQMeL4jlO_zZRQc86TNMD8ZJcdGylk0g0E="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2759", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rfHiGV0qv9q8PmrjbJ4Fp4RzeM0zXkDsY4aPocILPLA="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2757", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rfHiGV0qv9q8PmrjbJ4Fp4RzeM0zXkDsY4aPocILPLA="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2758", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314414"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sShcLOExE7O6h3lrjmhXFCbca8WdGxgKKh68arG-VNQ="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2756", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314414"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sShcLOExE7O6h3lrjmhXFCbca8WdGxgKKh68arG-VNQ="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2754", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314414"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sShcLOExE7O6h3lrjmhXFCbca8WdGxgKKh68arG-VNQ="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2755", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314414"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sShcLOExE7O6h3lrjmhXFCbca8WdGxgKKh68arG-VNQ="
      envelope = @pubnub.revoke(group: "demo", read: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2765", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193807"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vhRaevV0VeUN9LZLj4D5aJc5tcpJR_RHb50Kc0DvVgw="
      envelope = @pubnub.revoke(group: "demo", read: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2763", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193808"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oZIGBsZnz6k_UPpnAbpyxqfSr6fE7td9v0SMQ2EKLnQ="
      envelope = @pubnub.revoke(group: "demo", read: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2764", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193808"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oZIGBsZnz6k_UPpnAbpyxqfSr6fE7td9v0SMQ2EKLnQ="
      envelope = @pubnub.revoke(group: "demo", read: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2762", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193809"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VwHG8BehmWymlerlZxp8MxVMY9B5-HpH1DAypM9IgY0="
      envelope = @pubnub.revoke(group: "demo", read: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2760", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193809"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VwHG8BehmWymlerlZxp8MxVMY9B5-HpH1DAypM9IgY0="
      envelope = @pubnub.revoke(group: "demo", read: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2761", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193810"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pzQ3b-EvMdYGexWvWaYwl3FGFI186U0K5LF6lfMFsao="
      envelope = @pubnub.revoke(group: "demo", read: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2771", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "s-GyTUgjTECBtHplWBvC7qAOhCzN3LEOOI-9SItnchw="
      envelope = @pubnub.revoke(group: "demo", read: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2769", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "s-GyTUgjTECBtHplWBvC7qAOhCzN3LEOOI-9SItnchw="
      envelope = @pubnub.revoke(group: "demo", read: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2770", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "s-GyTUgjTECBtHplWBvC7qAOhCzN3LEOOI-9SItnchw="
      envelope = @pubnub.revoke(group: "demo", read: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2768", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314416"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nEt_KrvGyfVNFlRuYRO-LOkL4d7gG7ked4y0pL3vc4Q="
      envelope = @pubnub.revoke(group: "demo", read: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2766", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314416"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nEt_KrvGyfVNFlRuYRO-LOkL4d7gG7ked4y0pL3vc4Q="
      envelope = @pubnub.revoke(group: "demo", read: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2767", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314417"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FZBmjrhBXrKdsned4vS3aTN0n4w2h9VGc-FFrLTqdvI="
      envelope = @pubnub.revoke(group: "demo", read: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2237", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193811"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wO92xIyg2XyO5uaRszaZ6VOviUgJYmtOj54XocyGkcc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2235", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193811"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wO92xIyg2XyO5uaRszaZ6VOviUgJYmtOj54XocyGkcc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2236", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193812"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knPSm0yPcC1nb64TpB5JkiW2RpMJJaLbZr8NLsvbvtg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2234", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193813"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AZSWCa91c9OZ77i6JK0DpRGxwLupP1dnKev5fBQ8kp0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2232", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193813"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AZSWCa91c9OZ77i6JK0DpRGxwLupP1dnKev5fBQ8kp0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2233", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193814"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jPv-pnchWD8nVcg9SGomQLrDbOnHXNQnr4GJezJISDI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2243", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314417"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XafluWc65T4jvHnn5IfclNGbt4tQ1vo0Jrgp4J0ncl4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2241", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314417"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XafluWc65T4jvHnn5IfclNGbt4tQ1vo0Jrgp4J0ncl4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2242", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314418"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kj54TP_63cpJuVnzP7eCNnlY6OelXb6_3G3XlxH7ld8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2240", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314418"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kj54TP_63cpJuVnzP7eCNnlY6OelXb6_3G3XlxH7ld8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2238", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314419"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lDuzkaGwC9Tc6UECMqlVYhlZe1VFmBmo_kKgOwEHUPE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2239", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314419"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lDuzkaGwC9Tc6UECMqlVYhlZe1VFmBmo_kKgOwEHUPE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2249", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193815"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ILn-JY1uhnQn5A9jgWC-pr-v1v2IwIS0xy3RHTesC7g="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2247", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193816"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RJTJTZ6bHpLKsZiZVnBFImgW4oRsdU9ERX7Efc2bTq8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2248", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193817"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RvHGvi0pGvb7HJWy4G_SJNkGXzA4kfrQELV1uc3-2RY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2246", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193817"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RvHGvi0pGvb7HJWy4G_SJNkGXzA4kfrQELV1uc3-2RY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2244", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193818"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4v_J3aHReVHydUtgcj__v7cbKgpqEiSMALHYNF8qOG0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2245", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193819"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Nn5oqtl1y3V0IfywJ4ca88FtbhcZiK8IcDFYWLfkY94="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2255", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314419"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PMJpF8qctUnhcTpB4IVIjj1ni-p_eZDxfNfeTNu29HA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2253", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314419"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PMJpF8qctUnhcTpB4IVIjj1ni-p_eZDxfNfeTNu29HA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2254", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xv7gM_W8K6TbmF2aI3ynHx68-rOkoZBUY_sbEhvtqQk="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2252", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xv7gM_W8K6TbmF2aI3ynHx68-rOkoZBUY_sbEhvtqQk="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2250", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xv7gM_W8K6TbmF2aI3ynHx68-rOkoZBUY_sbEhvtqQk="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2251", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xv7gM_W8K6TbmF2aI3ynHx68-rOkoZBUY_sbEhvtqQk="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2261", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193820"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0IGi-8Gl9z_eo5DtXoVTRkyle6c37ElN8LLKPdYGNoQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2259", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193820"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0IGi-8Gl9z_eo5DtXoVTRkyle6c37ElN8LLKPdYGNoQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2260", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193821"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F1UlzsCPwpEYTS9NOnxizycq0rqGamAAplaolqtcblA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2258", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193822"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K9J5lidZaaui3TrPmngFx7ljry6pYUAjfQZvTJhioOg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2256", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193823"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EeOO8PiGwfrPXaMlvFqQZxwBIIKkGxGoF1Q_hTf4xh4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2257", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193823"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EeOO8PiGwfrPXaMlvFqQZxwBIIKkGxGoF1Q_hTf4xh4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2267", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z7mVq2GQiMPj9gsE-z1x1PrBfTiiYL3yZL15-XDfoyg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2265", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z7mVq2GQiMPj9gsE-z1x1PrBfTiiYL3yZL15-XDfoyg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2266", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z7mVq2GQiMPj9gsE-z1x1PrBfTiiYL3yZL15-XDfoyg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2264", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z7mVq2GQiMPj9gsE-z1x1PrBfTiiYL3yZL15-XDfoyg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2262", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bwNfiwOTFNf_zwWdlyt7A0z2vfSRMtXwEIB3E5qVwbg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2263", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bwNfiwOTFNf_zwWdlyt7A0z2vfSRMtXwEIB3E5qVwbg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2165", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193824"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_xe5mwR9BHeZdped5_bhRCytUe3_BKWZMIJ-hoag-nw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2163", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193825"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lAS2HMNEY11yx54PIuUO-I6hRslvh_5kVsjhhNP9gQI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2164", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193825"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lAS2HMNEY11yx54PIuUO-I6hRslvh_5kVsjhhNP9gQI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2162", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193826"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jZmDwvvLJBB7L_XwE06D122V44k4wxR8R0JxNAQlv1k="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2160", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193827"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gZoZLyzk0UdEo4c3zwGX2nWSfu4yfHBHRbv0Hpgi7GQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2161", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193828"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ai9pDfuvvEW2ruIe566XynaPfgzr4En0E0E4YScv2C4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2171", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h0LQYcVjVLBhuKT8BOfc8izM8aWQA2B0VAwS9GBwh-Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2169", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h0LQYcVjVLBhuKT8BOfc8izM8aWQA2B0VAwS9GBwh-Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2170", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314423"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AzAZmkag3-FadFJYWBZGDNcDeOKnPKIKCH2vievxURg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2168", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314423"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AzAZmkag3-FadFJYWBZGDNcDeOKnPKIKCH2vievxURg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2166", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314423"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AzAZmkag3-FadFJYWBZGDNcDeOKnPKIKCH2vievxURg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2167", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314423"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AzAZmkag3-FadFJYWBZGDNcDeOKnPKIKCH2vievxURg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2177", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193828"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tc9xYJuMrTgQWQSuaNfrS70fILUh4iqmxc70qtivnGA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2175", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193829"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X7z21X49Ug6_c8KHYA7eYGIX-yIxgGAyBGgVebCFP38="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2176", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193830"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M0i6AEYMRvCDJXUTLxnPsbOFmdGVPmUFILVWxnfca1k="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2174", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193830"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M0i6AEYMRvCDJXUTLxnPsbOFmdGVPmUFILVWxnfca1k="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2172", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193831"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NHxpy49ShoLtk-PqYUUFjXg1LyQY2vdh_VDbdoV6cU8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2173", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193832"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ei_d2YP0MUg3v80C4AhNoskq9fBbDqQISWwdbI99l4A="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2183", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hl8RIC_htvG29wITRgYI8CgDzrNABIhrXVq7a02MwBU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2181", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hl8RIC_htvG29wITRgYI8CgDzrNABIhrXVq7a02MwBU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2182", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hl8RIC_htvG29wITRgYI8CgDzrNABIhrXVq7a02MwBU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2180", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hl8RIC_htvG29wITRgYI8CgDzrNABIhrXVq7a02MwBU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2178", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iD0bOzImQ8UBd4QD2o5uIUXz4135q0AnFDFcamY5eE8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2179", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iD0bOzImQ8UBd4QD2o5uIUXz4135q0AnFDFcamY5eE8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2189", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193833"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kfpAoSVRaXAqarqdI4pbgzr54Q_iqqmqhK52qeFpHRo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2187", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193833"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kfpAoSVRaXAqarqdI4pbgzr54Q_iqqmqhK52qeFpHRo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2188", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193834"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wlga-71gwpTbJoDYpctLI_mypZdf9TTcgfC5TtLddOw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2186", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193834"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wlga-71gwpTbJoDYpctLI_mypZdf9TTcgfC5TtLddOw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2184", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193835"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0Lty4GKeqMv_rHyWO_pK5QAbvYmFbDrdZh1JDPvGBbI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2185", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193836"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vW05qiAFzY2kb6DRHvQWunJfGQ3oPmIiOPt6tb9ft64="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2195", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YVrH7Pdt4522lvI9VwdevlYor8Bh760tgNt1TNbb1nE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2193", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YVrH7Pdt4522lvI9VwdevlYor8Bh760tgNt1TNbb1nE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2194", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "whZ85_8cQ0PciPBcOH-F8SawPJHqmgSF8ngy6qYdLaw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2192", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "whZ85_8cQ0PciPBcOH-F8SawPJHqmgSF8ngy6qYdLaw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2190", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "whZ85_8cQ0PciPBcOH-F8SawPJHqmgSF8ngy6qYdLaw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2191", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "whZ85_8cQ0PciPBcOH-F8SawPJHqmgSF8ngy6qYdLaw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2201", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193837"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dA-HJItv5KBKReHBep5dAuUiob5Nq_ATVnEx-AEnCyQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2199", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193837"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dA-HJItv5KBKReHBep5dAuUiob5Nq_ATVnEx-AEnCyQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2200", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193838"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dQ6Rm9vtuI3fljDndGZYNOoIxe6VBK5VpfBz7dsaTdU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2198", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193839"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YcNxE8sIel7T8KJiYJALh_zJxv70bxJJHN6z0xz_apU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2196", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193839"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YcNxE8sIel7T8KJiYJALh_zJxv70bxJJHN6z0xz_apU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2197", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193840"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5pBwgby3rrbQH3LsGfA867XCmF6c5Lp_AvXh-39raOs="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2207", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314427"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cA-qEbsf7GYQ4gy0JwMqH1UUljUd5mubDDpCOIqy5T0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2205", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314427"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cA-qEbsf7GYQ4gy0JwMqH1UUljUd5mubDDpCOIqy5T0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2206", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H_CNNHZT5Q-K949qMRhM8h_uBHCHV4o886HJ9k6WC1M="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2204", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H_CNNHZT5Q-K949qMRhM8h_uBHCHV4o886HJ9k6WC1M="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2202", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H_CNNHZT5Q-K949qMRhM8h_uBHCHV4o886HJ9k6WC1M="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2203", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H_CNNHZT5Q-K949qMRhM8h_uBHCHV4o886HJ9k6WC1M="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2213", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193841"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NhroTYAKb9IZ3V-lLGCUfzuK3bGSDs5IwJinnEN0-Eo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2211", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193841"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NhroTYAKb9IZ3V-lLGCUfzuK3bGSDs5IwJinnEN0-Eo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2212", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193842"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wPu3UEZol9lpzn8ckTAATh5JJNc6wMJjVTh6WBU7TkM="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2210", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193843"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xp_C0sBSHzP8TOL5BiYmQPdz0sqeA-xr0huB6jM82z0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2208", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193844"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IRq70k4A7tAXIjFwTbLSktbZZ6eSXqH6IZnQf4SZ7fg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2209", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193844"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IRq70k4A7tAXIjFwTbLSktbZZ6eSXqH6IZnQf4SZ7fg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2219", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L2E4TKPw-WBtZjTJbEEjjjNwCTmaycIKfX9MUkhOXaY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2217", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L2E4TKPw-WBtZjTJbEEjjjNwCTmaycIKfX9MUkhOXaY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2218", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L2E4TKPw-WBtZjTJbEEjjjNwCTmaycIKfX9MUkhOXaY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2216", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L2E4TKPw-WBtZjTJbEEjjjNwCTmaycIKfX9MUkhOXaY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2214", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314430"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oEPNJx9EFNUHYoZ7svrrj1oTIB46HVnSlNoRbwMA1yw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2215", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314430"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oEPNJx9EFNUHYoZ7svrrj1oTIB46HVnSlNoRbwMA1yw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2225", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193845"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "s2h5qdmxSLGubGp39Q9fQjDaPfoAbwBjAvAA8giWJE0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2223", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193846"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uGav3E1l6coNKODsIgne7WNAFh2ST--IIa3SkYj5-Ak="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2224", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193846"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uGav3E1l6coNKODsIgne7WNAFh2ST--IIa3SkYj5-Ak="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2222", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193847"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kk5irbpym-sBrjC4FxihewPRaQCiAHL9bU2E11GLlyU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2220", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193848"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iG1OsYDmV2hekDqayr7Lg2NCgQnOc7NTbnGYM4QvDew="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2221", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193849"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uff-S4PdZeR8xokmD9fIqC52TOv_DKZobk408-7zY8Y="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2231", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314430"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lwZj7qnKapvfnkWNHFRYE3tVBgGtfRRInfZTHNmgKe4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2229", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HEC4wuzbeQT8pXm26M1Fo4YhgQBH7eSrTLi7Csa0OBc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2230", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HEC4wuzbeQT8pXm26M1Fo4YhgQBH7eSrTLi7Csa0OBc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2228", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HEC4wuzbeQT8pXm26M1Fo4YhgQBH7eSrTLi7Csa0OBc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2226", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HEC4wuzbeQT8pXm26M1Fo4YhgQBH7eSrTLi7Csa0OBc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2227", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PyQo_EwghZmJh3C_4kVzXNdvOgaN4CdUJ1j_7Ot6tEY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2021", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193849"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7HDpvKItU1bUUjNdePGIbzqjrxfJ8CthzinXew1s0lA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2019", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193850"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tJcuI2NXJCXS4NzKzkT7NwuKcOjHvctbbeFgLqX3tT8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2020", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193851"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BEcGsqm9BkPh6QOlskVirzEOzIuRde4cG1ibwpLz_Ag="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2018", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193851"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BEcGsqm9BkPh6QOlskVirzEOzIuRde4cG1ibwpLz_Ag="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2016", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193852"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "spE33RXFMyzUOePVc-Rgv2ncx7AzmgNTMkiJYMX4394="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2017", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193852"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "spE33RXFMyzUOePVc-Rgv2ncx7AzmgNTMkiJYMX4394="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2027", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9drNlNTXmYYZjlrTbzYJ6RpGLk8HLvt03rwU77YLN5o="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2025", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9drNlNTXmYYZjlrTbzYJ6RpGLk8HLvt03rwU77YLN5o="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2026", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9drNlNTXmYYZjlrTbzYJ6RpGLk8HLvt03rwU77YLN5o="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2024", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314433"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xk378CgHPw1Ew26IFdvWQHYADZC-e38X764Bq5h6dZ4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2022", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314433"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xk378CgHPw1Ew26IFdvWQHYADZC-e38X764Bq5h6dZ4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2023", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "72HU-vv7vn2j1fqn4GvmrkykPLlgGAtzgsXLegi90v4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2033", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193853"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5ERtKMRaAGIpNhQPJGYEI_F87yX8cajRC9ZGzaDe5WI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2031", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193854"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xyk4gSgsywcySoGeK5654UMbs3rVW6oZUYDeaYsRGVg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2032", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193854"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xyk4gSgsywcySoGeK5654UMbs3rVW6oZUYDeaYsRGVg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2030", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193855"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "epUQ_OAeOpjjxShqwWxE0DbaNWrvyTotUo_N6tJSncc="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2028", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193856"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZJUZPkB_HwubrcKr46VSVqzHBqkCy7bk4UgNORsfSw0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2029", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193856"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZJUZPkB_HwubrcKr46VSVqzHBqkCy7bk4UgNORsfSw0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2039", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rMk4Hk2tVgPXVqcvt6uI3yB8xhoHE3OHoEBeyASzGEM="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2037", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rMk4Hk2tVgPXVqcvt6uI3yB8xhoHE3OHoEBeyASzGEM="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2038", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rMk4Hk2tVgPXVqcvt6uI3yB8xhoHE3OHoEBeyASzGEM="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2036", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314435"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OupIInxjX5UOpOSQRt-uADhtmJrRi4_Op2lkbgfJS3Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2034", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dUkH5StnhbY5QMjhoqtz979GWD3wEtmvagMee2YRriI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2035", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dUkH5StnhbY5QMjhoqtz979GWD3wEtmvagMee2YRriI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2045", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193857"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7MQfVKWaMYR-cvmLXyHOEr02CGMadYF6dR0cojWDYiY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2043", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193858"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_zwfqy4fcg9EjMfV_GOXiU5Luyp68KURn49VKXjTRpo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2044", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193859"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z8bwxvt5V9H2N0gzis14PCSyPpMj1mXQjMrhWKp6ZBE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2042", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193859"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z8bwxvt5V9H2N0gzis14PCSyPpMj1mXQjMrhWKp6ZBE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2040", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193860"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4VcN2zbQK9VGd3terRQJSdR4aBR5CdK66Wp3wYM_lgg="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2041", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193861"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3SM5x9UpVikNpXwFfxI7WnpqDBT1KC3gBJYHxRJrbKQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2051", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wq9kKhc2eGX9xiId9n18MNjujT1Wz9d4jotnRidEopM="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2049", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wq9kKhc2eGX9xiId9n18MNjujT1Wz9d4jotnRidEopM="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2050", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e3PqdDMwZFCY6UQpYA1DKyAg90Rbk7RylTcI27Vd0-A="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2048", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e3PqdDMwZFCY6UQpYA1DKyAg90Rbk7RylTcI27Vd0-A="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2046", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e3PqdDMwZFCY6UQpYA1DKyAg90Rbk7RylTcI27Vd0-A="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2047", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e3PqdDMwZFCY6UQpYA1DKyAg90Rbk7RylTcI27Vd0-A="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1949", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193862"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oVh8KRv10SQHaeEoixCxWxzhNZe7nne_H53XhaiF7s8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1947", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193863"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YVspCsI4jdp69IyxfwP09qBm8MVgItBdda-l-9xPRp0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1948", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193864"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3gm64dIJ3p-DKCn-OQ_a_foDYWY5R_CnUwZgQXtJF5s="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1946", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193864"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3gm64dIJ3p-DKCn-OQ_a_foDYWY5R_CnUwZgQXtJF5s="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1944", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193866"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SlW7gx2bwbA7k1lek7hKFhudBrJjZNak3RnU-P7CEYY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1945", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193866"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SlW7gx2bwbA7k1lek7hKFhudBrJjZNak3RnU-P7CEYY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1955", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MQ9KMpjG93Obrt7I3JOLtyJCG63cIW-y0UEbgrnaEYE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1953", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MQ9KMpjG93Obrt7I3JOLtyJCG63cIW-y0UEbgrnaEYE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1954", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MQ9KMpjG93Obrt7I3JOLtyJCG63cIW-y0UEbgrnaEYE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1952", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MQ9KMpjG93Obrt7I3JOLtyJCG63cIW-y0UEbgrnaEYE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1950", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6SoiRMblFn1u_OjgKwOCZM5yb5Pn0Z1C2MDn-sfP7SU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1951", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6SoiRMblFn1u_OjgKwOCZM5yb5Pn0Z1C2MDn-sfP7SU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1961", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193867"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KvhnlokUzqSd5RP2NDMO9Df_znFjFJ2qFRR9W94HIa4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1959", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193867"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KvhnlokUzqSd5RP2NDMO9Df_znFjFJ2qFRR9W94HIa4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1960", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193868"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4bBcAmF51mTha9Qr0NTIDbPIV6Q2kMXUDVfXruxXPFA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1958", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193869"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "flMGyLblnOLsrZnvK-3RfW0PmFBQsHT9TKSmPaMpxUo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1956", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193869"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "flMGyLblnOLsrZnvK-3RfW0PmFBQsHT9TKSmPaMpxUo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1957", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193870"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EQ9gUN0ShiHYXWCAc95vzCkcKZV1zmPYQXYKGl3awww="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1967", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Awqd4SMEn8M3vNlqFBGEuKwC89NhCZB1DipSH9gck78="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1965", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Awqd4SMEn8M3vNlqFBGEuKwC89NhCZB1DipSH9gck78="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1966", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9MvqBZwjh4f7yLzDPG01-z2XZKq1IrKMGHXPI9ieXqE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1964", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9MvqBZwjh4f7yLzDPG01-z2XZKq1IrKMGHXPI9ieXqE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1962", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9MvqBZwjh4f7yLzDPG01-z2XZKq1IrKMGHXPI9ieXqE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1963", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9MvqBZwjh4f7yLzDPG01-z2XZKq1IrKMGHXPI9ieXqE="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1973", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193871"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "d7KtQ-ssnFq7jHh5Rcme_X1b8VT6fAC32GEtvQVTX8E="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1971", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193872"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oY4egpwQ0zzt5wJ5jd2OyV460n9i3Y2aFOPbV4FFqyY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1972", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193872"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oY4egpwQ0zzt5wJ5jd2OyV460n9i3Y2aFOPbV4FFqyY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1970", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193873"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wCBBKTjV7QJ3AY48wXAz4-mMrunrUEpFUwKu53NmDyY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1968", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193874"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CGntEJ2hq0bUsN-kSyS_kfaU8tGs4Bg14-aMTdHrWhI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1969", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193874"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CGntEJ2hq0bUsN-kSyS_kfaU8tGs4Bg14-aMTdHrWhI="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1979", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L7d_35C6YGP9uHckFhvQ1O1XcBYRc9OnvKcLygi5ey0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1977", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L7d_35C6YGP9uHckFhvQ1O1XcBYRc9OnvKcLygi5ey0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1978", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L7d_35C6YGP9uHckFhvQ1O1XcBYRc9OnvKcLygi5ey0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1976", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L7d_35C6YGP9uHckFhvQ1O1XcBYRc9OnvKcLygi5ey0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1974", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7uMe4fkM9pzyvhCDEvo2liA6oz4ZUksybqg-4BUjpW8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1975", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7uMe4fkM9pzyvhCDEvo2liA6oz4ZUksybqg-4BUjpW8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1985", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193875"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AKscS_Wvb-aj1zoY7C4rIzV2OVkNmU6A2G66cJ3z5HA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1983", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193876"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PFMc3qMDUvcW37P8B8hHeb9jc1BmftNfCVgd63ue0ms="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1984", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193876"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PFMc3qMDUvcW37P8B8hHeb9jc1BmftNfCVgd63ue0ms="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1982", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193877"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3qWXHL5hSZOojX4PONl0mWL6K6LUsoF-3twLKJrYJQ0="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1980", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193878"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OHYBNNJPFdKXWWI4FPxpAl7RAZYNroctXWIogBNZuIA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1981", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193878"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OHYBNNJPFdKXWWI4FPxpAl7RAZYNroctXWIogBNZuIA="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1991", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qM8lSlIF20TKS7QrAKxq5Zh1PHrPr3oAWFSfMMz0Xjw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1989", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qM8lSlIF20TKS7QrAKxq5Zh1PHrPr3oAWFSfMMz0Xjw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1990", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x5uQj1yS-60GX-l-c_ACVQYyqQldkoisrz4tYoXhZ2s="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1988", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x5uQj1yS-60GX-l-c_ACVQYyqQldkoisrz4tYoXhZ2s="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1986", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x5uQj1yS-60GX-l-c_ACVQYyqQldkoisrz4tYoXhZ2s="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1987", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x5uQj1yS-60GX-l-c_ACVQYyqQldkoisrz4tYoXhZ2s="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1997", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193879"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Znde8F6jtGVNPoYjIwKiFUaitG0T-F3w_6bLIsIvPqU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1995", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193880"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0PUm6MPR4tPmR3th55kaFV4q0BZCbflyKr-_9YFmE3Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1996", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193880"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0PUm6MPR4tPmR3th55kaFV4q0BZCbflyKr-_9YFmE3Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1994", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193881"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VhtHGWt_LwnqgMOPSKqlU53hqsyW9g7fJ8-I9Q55OZw="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1992", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193882"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UPsdMTM7curOTCveAF7ocSup3YOmQjjmu-WfCJfbOdU="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1993", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193883"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Zryn2bpl9rK_w2BfhafVTD23F4xs-hmqAKBs445iAOo="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2003", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dVkRtQgPpmPlB_SOR-cB6vvr8-x_YZUyx6Kt733xD_E="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2001", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dVkRtQgPpmPlB_SOR-cB6vvr8-x_YZUyx6Kt733xD_E="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2002", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dVkRtQgPpmPlB_SOR-cB6vvr8-x_YZUyx6Kt733xD_E="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2000", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314445"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "27JEqxWDYUmcvT_xo0aQh0QjPomZt-FL5cUdRh20_zQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1998", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314445"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "27JEqxWDYUmcvT_xo0aQh0QjPomZt-FL5cUdRh20_zQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1999", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314445"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "27JEqxWDYUmcvT_xo0aQh0QjPomZt-FL5cUdRh20_zQ="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2009", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193883"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XfyFe3_CqjRoe05_7Qq2EExrzSlFeYFoS4eLJvXDJi8="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2007", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193884"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NhyJqJ4WJ_ylIiY6JRYOQ6b4AT6oq-Nj57TMSDEkVdY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2008", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193885"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pq3NcC3bRsnRvQsXnXvpORkNGMla5qyDCZVsiBrQD3Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2006", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193885"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pq3NcC3bRsnRvQsXnXvpORkNGMla5qyDCZVsiBrQD3Q="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2004", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193886"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YDAn2EjBAGnVWW6twWlNkAmqebqx3oiVkeUg98SDN7I="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2005", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193887"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EKn8YX3zJm0b-rxHJY44jdOH6Dt7y1l18XnAHf1nFV4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2015", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DEMNw3QGeqfyajwH4-EQr-MWGNd4vyo12AiHBh7A8bY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2013", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DEMNw3QGeqfyajwH4-EQr-MWGNd4vyo12AiHBh7A8bY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2014", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DEMNw3QGeqfyajwH4-EQr-MWGNd4vyo12AiHBh7A8bY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2012", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DEMNw3QGeqfyajwH4-EQr-MWGNd4vyo12AiHBh7A8bY="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2010", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdFUcmvAzGSDfv9aL_Qwg0JV1Q7DQCeGL7lgenPwUe4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2011", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdFUcmvAzGSDfv9aL_Qwg0JV1Q7DQCeGL7lgenPwUe4="
      envelope = @pubnub.revoke(group: "demo", read: false, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2129", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193887"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mQ-rhFFl3m1Zn2e8h96h6AAt7GO5IZhuJ3km-QonVZ8="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2127", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193888"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KFBfFHxdqIMWRaLzJhO7zoUwXAdeIw6mCvUKQymF3R0="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2128", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193889"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XGBpYJqflbgvQ7Hwj3mfkmcJSkhIrCY8JLjKpyLMAVI="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2126", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193890"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UxnTWXtf4wzlGinHaWmQwZFNHH2PbZZlPO2osnKIMYo="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2124", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193890"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UxnTWXtf4wzlGinHaWmQwZFNHH2PbZZlPO2osnKIMYo="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2125", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193891"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hDBKXcY055XDge_tC6jM8c0-_BlX4yqHrFFnRvz2LmU="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2135", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mRBl2tCztGdgIylbYqRVNVuGzF47a4D7dX0R7YWWSQw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2133", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mRBl2tCztGdgIylbYqRVNVuGzF47a4D7dX0R7YWWSQw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2134", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mRBl2tCztGdgIylbYqRVNVuGzF47a4D7dX0R7YWWSQw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2132", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MroCE8tE93jQUMUvhZTvVEH9G-QkhXrDrHa4zEubl7U="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2130", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MroCE8tE93jQUMUvhZTvVEH9G-QkhXrDrHa4zEubl7U="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2131", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MroCE8tE93jQUMUvhZTvVEH9G-QkhXrDrHa4zEubl7U="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2141", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193892"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XIpgGzDCe1YXxy08RUyvxVt3FtxFn3BgWebUL5fh6Mw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2139", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193892"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XIpgGzDCe1YXxy08RUyvxVt3FtxFn3BgWebUL5fh6Mw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2140", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193893"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8tGmioWDbxP3MqujNbnEB9GFD5x5VedBUMtm-4yCMSo="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2138", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193894"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m4ocojSqTC27jz0DaGiwBRCLKZO9czmSCgxHQ-0icLk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2136", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193894"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m4ocojSqTC27jz0DaGiwBRCLKZO9czmSCgxHQ-0icLk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2137", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193895"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NGmxXzGvAPy6MkUA74w02zcUmPazARMhJ6aF1C2_WEU="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2147", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bnc3RkQJ0Sf3ufqEd8xiS7iBI7iIYPvQ9wJLLQbKLCs="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2145", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bnc3RkQJ0Sf3ufqEd8xiS7iBI7iIYPvQ9wJLLQbKLCs="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2146", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bnc3RkQJ0Sf3ufqEd8xiS7iBI7iIYPvQ9wJLLQbKLCs="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2144", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bnc3RkQJ0Sf3ufqEd8xiS7iBI7iIYPvQ9wJLLQbKLCs="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2142", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u-NUsghnkPVhQMZDx00Lx7BJay0qRgUDajJflSMPVEQ="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2143", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u-NUsghnkPVhQMZDx00Lx7BJay0qRgUDajJflSMPVEQ="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2153", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193896"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NrQZXdVlgyA6higg21G1Qr_aWc9oRjVCkO-4tHvYGZU="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2151", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193896"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NrQZXdVlgyA6higg21G1Qr_aWc9oRjVCkO-4tHvYGZU="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2152", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193897"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3Vmt_hVqVhXn7yiUKYppc9_Xh_i6u-qVEoozZgYz6Lk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2150", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193898"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SeH-iOPdg7cZmgBUb8KAqGki_XOWXmFw0y-F9vyWGh4="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2148", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193899"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Zhnm86lEHkOYiy4go_Tw-EobJYPoCgwc_Q6j2wn_cPQ="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2149", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193899"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Zhnm86lEHkOYiy4go_Tw-EobJYPoCgwc_Q6j2wn_cPQ="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2159", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gcVsh5cEtK4SEaxkTKMIpYheDpR4vXL_09WyiLOuKMI="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2157", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gcVsh5cEtK4SEaxkTKMIpYheDpR4vXL_09WyiLOuKMI="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2158", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gcVsh5cEtK4SEaxkTKMIpYheDpR4vXL_09WyiLOuKMI="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2156", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314451"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GmjCZJMOfCtBtaCsgqf-97uho044A22U4dz8QmahqEg="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2154", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314451"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GmjCZJMOfCtBtaCsgqf-97uho044A22U4dz8QmahqEg="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2155", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314451"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GmjCZJMOfCtBtaCsgqf-97uho044A22U4dz8QmahqEg="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2057", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193900"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DfQi97Auqz1avQ9AE38t8EmC_GybCCluLWyfRzVbrHI="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2055", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193901"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eFp8Uft0xDvDxZI7qfnsRn56xn_dGTXD9xxPI9Fwqm4="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2056", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193901"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eFp8Uft0xDvDxZI7qfnsRn56xn_dGTXD9xxPI9Fwqm4="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2054", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193902"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mBgtpsGL_ipu61nfHZzXWego7BP0sn2u-W1B1aO-irY="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2052", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193903"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hBZf7RHfDKwIXxTPISRH-VH0hMq_NVb3JYMdMq1sGN8="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2053", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193903"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hBZf7RHfDKwIXxTPISRH-VH0hMq_NVb3JYMdMq1sGN8="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2063", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314451"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Aqn3Wh1Tq3Dq5H9RbPa6026A4yV-3MOynzz3anqCxhk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2061", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1dDs2TFwiLDWm8WGO-IrsMqsqlj8RDivQnro28uy8bw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2062", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1dDs2TFwiLDWm8WGO-IrsMqsqlj8RDivQnro28uy8bw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2060", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1dDs2TFwiLDWm8WGO-IrsMqsqlj8RDivQnro28uy8bw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2058", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1dDs2TFwiLDWm8WGO-IrsMqsqlj8RDivQnro28uy8bw="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2059", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314453"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZANHo8GMiro_xoVZhWzdWEOxMN9os26k0b6rKkdKE20="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2069", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193904"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P-n-Vq-ivgBmpfmupwr8J8wjfyHQEMgwXM-M1DJRkTU="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2067", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193905"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FeAb840aNWFB1i13qfJTuNt_csZOEsnxUEO0E1IMIjs="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2068", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193905"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FeAb840aNWFB1i13qfJTuNt_csZOEsnxUEO0E1IMIjs="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2066", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193906"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F0PUBo_k49Yx65D9ccPRFmWgLYBtZQMrdM380N6ilqU="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2064", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193907"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_sgLG1LFyFU6x_UF8nDRHkPP_A-lmw0kq42m8jBJlmk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2065", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193907"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_sgLG1LFyFU6x_UF8nDRHkPP_A-lmw0kq42m8jBJlmk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2075", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lEpNLqEmskBI4J8mdMf6D14uTawG9fpQuT68ZnBzyaE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2073", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lEpNLqEmskBI4J8mdMf6D14uTawG9fpQuT68ZnBzyaE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2074", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lEpNLqEmskBI4J8mdMf6D14uTawG9fpQuT68ZnBzyaE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2072", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lEpNLqEmskBI4J8mdMf6D14uTawG9fpQuT68ZnBzyaE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2070", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rI-QnQYovWg8YklHdyP4yn6Q_ftLD2z8p2L3rq5bXLE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2071", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rI-QnQYovWg8YklHdyP4yn6Q_ftLD2z8p2L3rq5bXLE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2081", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193908"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NNLVX9ruFfNlNQZGqXktFoLsDJJ737LrK1-i9WWi3nA="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2079", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193909"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YGIUAtwkawwup7cUm8EAVkiZMd0WWF3ti-DNT5Ms4J8="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2080", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193909"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YGIUAtwkawwup7cUm8EAVkiZMd0WWF3ti-DNT5Ms4J8="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2078", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193910"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IhyPWrS4hbhA0R85WB0JyQ2iDcsc1NFHkVzzFQ-_Zyk="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2076", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193911"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "15iqLgi5Ya2-XevVxjNIl_39ZFz0fJZPEL9PrA3zidE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2077", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193911"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "15iqLgi5Ya2-XevVxjNIl_39ZFz0fJZPEL9PrA3zidE="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2087", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RoBS8IH_49sRmX_YQgqdq8m6qJq6lYEfG85_ikkBZmA="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2085", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RoBS8IH_49sRmX_YQgqdq8m6qJq6lYEfG85_ikkBZmA="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2086", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "au-lVGqPrUH6RoDLpTpGeocWVTwnLMoYtmmgjaZNPdc="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2084", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "au-lVGqPrUH6RoDLpTpGeocWVTwnLMoYtmmgjaZNPdc="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2082", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "au-lVGqPrUH6RoDLpTpGeocWVTwnLMoYtmmgjaZNPdc="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2083", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "au-lVGqPrUH6RoDLpTpGeocWVTwnLMoYtmmgjaZNPdc="
      envelope = @pubnub.revoke(group: "demo", read: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2093", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193912"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8py3mJaLVbfX3kSYc7ATXmes5ML3EyHfQaC1zQc-LnE="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2091", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193913"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r_CGE5lQCOZIiFockZ7-N6r2Y9fSFjz3o8l31r_fO8U="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2092", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193913"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r_CGE5lQCOZIiFockZ7-N6r2Y9fSFjz3o8l31r_fO8U="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2090", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193914"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QbdOwNwQ7WUnoIwi8Xn4v15ZTNx5cggvhZsMBNiFaa8="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2088", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193915"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kkfe64hT2tiW5vsWJSIDY7O6hhOFEIxqINFsogngI9A="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2089", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193915"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kkfe64hT2tiW5vsWJSIDY7O6hhOFEIxqINFsogngI9A="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2099", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qr5cWmR9EKNcEGu5uVP2fxKOtl8XITtfodOJENka6lI="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2097", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qr5cWmR9EKNcEGu5uVP2fxKOtl8XITtfodOJENka6lI="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2098", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qr5cWmR9EKNcEGu5uVP2fxKOtl8XITtfodOJENka6lI="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2096", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qr5cWmR9EKNcEGu5uVP2fxKOtl8XITtfodOJENka6lI="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2094", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2x4FGgE_rCN38PNP6KVxQPveZ9XCngVD4jIF5ICLu_s="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2095", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2x4FGgE_rCN38PNP6KVxQPveZ9XCngVD4jIF5ICLu_s="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2105", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193916"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kZtiSpL3KfrH8xLldMaQ9MlV3fIAC3vJbTUT3GvJnY4="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2103", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193917"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0TJ7vKdsGI7Z6z8KFpryyFvIXGAMVR9nvaunmEVNdyw="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2104", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193917"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0TJ7vKdsGI7Z6z8KFpryyFvIXGAMVR9nvaunmEVNdyw="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2102", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193918"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lDkbgToCvyrzFa3zX7KP3F9FmIu1CoDWGTpwwcY-05E="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2100", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193919"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6656STaXbJC-nMKslvZ9Uj3psnjdEYwMvtsqXim5iwY="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2101", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193919"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6656STaXbJC-nMKslvZ9Uj3psnjdEYwMvtsqXim5iwY="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2111", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7FVIaiEqc8lXHz-izOqXOrr3uHmhi0ofSR6i8C-Ui2g="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2109", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7FVIaiEqc8lXHz-izOqXOrr3uHmhi0ofSR6i8C-Ui2g="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2110", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CdAmVxyj3FEZCHk976plODQaIILR2JyugU-0qH7Nllw="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2108", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CdAmVxyj3FEZCHk976plODQaIILR2JyugU-0qH7Nllw="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2106", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CdAmVxyj3FEZCHk976plODQaIILR2JyugU-0qH7Nllw="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2107", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CdAmVxyj3FEZCHk976plODQaIILR2JyugU-0qH7Nllw="
      envelope = @pubnub.revoke(group: "demo", read: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2117", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193920"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ooKQ1cQJ_Kv5EVxZhaShVtKRKep1KUaeWfg9-TisFA0="
      envelope = @pubnub.revoke(group: "demo", read: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2115", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193921"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w8E3MkbMFPgK-l222myFBsrnIDSSdiyJYcp-_uRvrGY="
      envelope = @pubnub.revoke(group: "demo", read: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2116", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193922"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VTDjJ6x_A1Cf6faMHyHiMuK0dTff_oxIrjlLnOyyZyk="
      envelope = @pubnub.revoke(group: "demo", read: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2114", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193922"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VTDjJ6x_A1Cf6faMHyHiMuK0dTff_oxIrjlLnOyyZyk="
      envelope = @pubnub.revoke(group: "demo", read: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2112", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193923"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BfAbLrIFwnDsu7JXffNIC6mBiUMpNJKVioVtwQWwXSE="
      envelope = @pubnub.revoke(group: "demo", read: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2113", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193924"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L6Fs_js_LrO7HROEUDsOWvw7lKY-Zpn5yIF1OMik1_A="
      envelope = @pubnub.revoke(group: "demo", read: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2123", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314460"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8GLBWVeUPmcuk1pBLP0It30SxF0-R2ynWw7ZO_XC_eI="
      envelope = @pubnub.revoke(group: "demo", read: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2121", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314460"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8GLBWVeUPmcuk1pBLP0It30SxF0-R2ynWw7ZO_XC_eI="
      envelope = @pubnub.revoke(group: "demo", read: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2122", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SZnlQvj8WjD36PcVX8zfqVM0zyBQ-DwYgZ_Hk-HXerE="
      envelope = @pubnub.revoke(group: "demo", read: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2120", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SZnlQvj8WjD36PcVX8zfqVM0zyBQ-DwYgZ_Hk-HXerE="
      envelope = @pubnub.revoke(group: "demo", read: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2118", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SZnlQvj8WjD36PcVX8zfqVM0zyBQ-DwYgZ_Hk-HXerE="
      envelope = @pubnub.revoke(group: "demo", read: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2119", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SZnlQvj8WjD36PcVX8zfqVM0zyBQ-DwYgZ_Hk-HXerE="
      envelope = @pubnub.revoke(group: "demo", read: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2561", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193926"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qq4s75A8OzPNPQaesykIk0gF3qbyQ3ThmvV-Eyq3cds="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2559", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193927"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A_hgBBOfoewHOu2D6qoiri8ZVz9nkZWK5EgHH5dvAkg="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2560", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193928"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cGosrIpCFwsTmuaXVXgezPR8C2OCBwLcZR9NRBerPOs="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2558", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193928"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cGosrIpCFwsTmuaXVXgezPR8C2OCBwLcZR9NRBerPOs="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2556", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193929"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZBZZtzg6Zbkq6b_VRLDmLRiGI1yCWJO1KbUbFpb3kIE="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2557", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193930"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C4n1EH7ibuI3R0Q1hTOn7OnahcLfqO3Aivln6RWknZw="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2567", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314462"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Chr5TLCIQGZmsEcm_ble-c3ffBvem7GEelUDfew4ZZ0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2565", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314462"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Chr5TLCIQGZmsEcm_ble-c3ffBvem7GEelUDfew4ZZ0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2566", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6-h28AAfw5axa9gJeC3av8PgouyYmlepdbfyTAASP6c="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2564", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6-h28AAfw5axa9gJeC3av8PgouyYmlepdbfyTAASP6c="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2562", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6-h28AAfw5axa9gJeC3av8PgouyYmlepdbfyTAASP6c="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2563", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6-h28AAfw5axa9gJeC3av8PgouyYmlepdbfyTAASP6c="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2573", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193931"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A2igLBkxqC5NJ18cAmyvJfMmdljuFkKW1GMIs5B-vQA="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2571", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193932"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2ehTM1QSAqlNSljQJuJ1WqyOCfw70pzMC5v01k40wI0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2572", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193932"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2ehTM1QSAqlNSljQJuJ1WqyOCfw70pzMC5v01k40wI0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2570", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193933"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aLSLBYWEFreGfgkw0BeaptnhqJZnQcN95-ikNyrp1Fg="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2568", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193934"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rjyxKihrmeHpFb7oowinhJ26-V2iiWytS4F3EPYT5Hs="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2569", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193934"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rjyxKihrmeHpFb7oowinhJ26-V2iiWytS4F3EPYT5Hs="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2579", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KUEcN61EUObuMtw9lFcDlapGYH0K97-FVlG9mqujaoY="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2577", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314464"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WUgfbOEmybid247U3Gm0NF3EOpbw8TVGEFxlFAu2rlQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2578", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314464"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WUgfbOEmybid247U3Gm0NF3EOpbw8TVGEFxlFAu2rlQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2576", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314464"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WUgfbOEmybid247U3Gm0NF3EOpbw8TVGEFxlFAu2rlQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2574", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314464"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WUgfbOEmybid247U3Gm0NF3EOpbw8TVGEFxlFAu2rlQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2575", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314465"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GcdMB35YDCy8I1b_Ymuze3s5c9GgCwV_9Fe0JsXeCZU="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2585", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193935"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j8NOF0uzQvQ5PnP3eOP0dSf6PUBWAQo8a_PdBkV6rhc="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2583", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193936"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yTtGVMDXxo6KazU-KmyCOLASyyZEOjXWIJJtJ8SWdeY="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2584", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193936"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yTtGVMDXxo6KazU-KmyCOLASyyZEOjXWIJJtJ8SWdeY="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2582", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193937"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Fovtvv3Yy0F0aydD23Bo3Ui0KhGzMSkslHF9jW0i_U="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2580", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193938"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S_RXgu-TiKj0iRnpgKKVucYqQVvFjBBasc74DMX-MXI="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2581", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193938"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S_RXgu-TiKj0iRnpgKKVucYqQVvFjBBasc74DMX-MXI="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2591", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314465"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CiwPAr0opZ4BWmYHr_hVKW-ozFehbg45GZrfvIhRXpQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2589", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gz51vOtAWNJ3Ryj7-9D1RbXdNi_kK49k6lJGLcaV0s0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2590", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gz51vOtAWNJ3Ryj7-9D1RbXdNi_kK49k6lJGLcaV0s0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2588", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gz51vOtAWNJ3Ryj7-9D1RbXdNi_kK49k6lJGLcaV0s0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2586", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gz51vOtAWNJ3Ryj7-9D1RbXdNi_kK49k6lJGLcaV0s0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2587", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Pal4R_0dAF1Gp-w0tP3ZiulCxulPnxUds-zP-60R8NM="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2489", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193939"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PTecAtdfmaN_QOgx9LaCDLx1O5IHQAVEJe4X2T0zOPM="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2487", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193940"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JRVkdos2paWlaMxm97t8fnotwq5c-9AxOpb5LZDi88w="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2488", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193940"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JRVkdos2paWlaMxm97t8fnotwq5c-9AxOpb5LZDi88w="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2486", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193941"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ulPi14ZqSflJZOPeCJkR37ubhbYIbklVXzRkhi1MTbg="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2484", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193942"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "80akqMyuN_EQol2yh1GjuQ_ynyQfdg53YQWHDNFeVkw="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2485", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193942"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "80akqMyuN_EQol2yh1GjuQ_ynyQfdg53YQWHDNFeVkw="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2495", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nlOGv4QZRTjtU355f_d-C4MyG8XGdqnC4EFdwSb0Jhk="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2493", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nlOGv4QZRTjtU355f_d-C4MyG8XGdqnC4EFdwSb0Jhk="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2494", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nlOGv4QZRTjtU355f_d-C4MyG8XGdqnC4EFdwSb0Jhk="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2492", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c8rT5ZPTcyDihRWanSBWFykXXAOOgTcVdXFTzvKbeXQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2490", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c8rT5ZPTcyDihRWanSBWFykXXAOOgTcVdXFTzvKbeXQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2491", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c8rT5ZPTcyDihRWanSBWFykXXAOOgTcVdXFTzvKbeXQ="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2501", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193943"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gp9PvJHZ5DryCww1T8kxzKu8rNLdv8ExXsx7dITYlKk="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2499", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193944"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cDe32Nr5gRE0ZBoNdaxd0E8qBwfIdgDCR4tBB5CqwNs="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2500", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193944"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cDe32Nr5gRE0ZBoNdaxd0E8qBwfIdgDCR4tBB5CqwNs="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2498", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193945"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_OTbGVecNw422SYjqngB8SDoMtyylciyPF2mhUC1aYI="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2496", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193946"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P_Cugb0qz66YcfVOywCzY3e7liCkT9euPiNAUAM36dE="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2497", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193946"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P_Cugb0qz66YcfVOywCzY3e7liCkT9euPiNAUAM36dE="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2507", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A0bEgLdeCzAQn1ep3nHqI2E352NHMXh1exXON2ZjdTk="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2505", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AG7_rSolbLeHHk_2WuzCNCgC6hc0JqAx3bAhtAb9n-E="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2506", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AG7_rSolbLeHHk_2WuzCNCgC6hc0JqAx3bAhtAb9n-E="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2504", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AG7_rSolbLeHHk_2WuzCNCgC6hc0JqAx3bAhtAb9n-E="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2502", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vyAd3Jhb0c-RQpQB5EDRluRV7le7jYIEu27uFuq4f4w="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2503", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vyAd3Jhb0c-RQpQB5EDRluRV7le7jYIEu27uFuq4f4w="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2513", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193947"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pp89bh8AohkvIw9_ALHw-Kmm3n9s77CfMFvGSClIdY8="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2511", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193948"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GUrVZYuWYLzuRkUZlNMdqMzSoE38odiQWXB7mUWfyKU="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2512", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193948"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GUrVZYuWYLzuRkUZlNMdqMzSoE38odiQWXB7mUWfyKU="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2510", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193949"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X-etMr8d6YO-gdMZEUxsti71kFmPcMg2Yig5-Shf-Lc="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2508", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193950"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qG7mOl_3xDstWZ6zr6FUqja7wYc6IbdIjusB8s2vB5A="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2509", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193951"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KlD7thYjAP5t9TG-eBd0HrNSUQuxALEkCp1fgN9Tk3U="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2519", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-YF_XvqrRXcFNq6AXT5cjX1diM3PQeJRhg4KIdncsx0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2517", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-YF_XvqrRXcFNq6AXT5cjX1diM3PQeJRhg4KIdncsx0="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2518", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ODKz6-g5-ENyH04HbGM0Pe4NtuoHouWyVS2PpInFRso="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2516", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ODKz6-g5-ENyH04HbGM0Pe4NtuoHouWyVS2PpInFRso="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2514", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ODKz6-g5-ENyH04HbGM0Pe4NtuoHouWyVS2PpInFRso="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2515", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ODKz6-g5-ENyH04HbGM0Pe4NtuoHouWyVS2PpInFRso="
      envelope = @pubnub.revoke(group: "demo", write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2525", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193952"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h7kBAX38q9pH_7G7GJiMnS1ybUncDcuFteQjRhIisls="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2523", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193952"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h7kBAX38q9pH_7G7GJiMnS1ybUncDcuFteQjRhIisls="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2524", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193953"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z433J6lSzs66royA2kZjjSRm2CLBiOck2v07t8eVVMo="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2522", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193954"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nRZow9ylmVYuHA6oRnWuYb0KGTpz44Zx6aXYlIxXyfM="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2520", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193954"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nRZow9ylmVYuHA6oRnWuYb0KGTpz44Zx6aXYlIxXyfM="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2521", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193955"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IV5vtblDBSK75YXhcfxRzp17IlHHM_G6X8sa_QTlbwc="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2531", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314472"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S1f8B0xR5F01XXXorX4BW4x6A7u51mL2kpv2xG3RjTc="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2529", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314472"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S1f8B0xR5F01XXXorX4BW4x6A7u51mL2kpv2xG3RjTc="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2530", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314473"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fFkagooZMu5_TmzXfpcmj_VEmw7tNHTs_CU2Xf7FFpQ="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2528", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314473"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fFkagooZMu5_TmzXfpcmj_VEmw7tNHTs_CU2Xf7FFpQ="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2526", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314473"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fFkagooZMu5_TmzXfpcmj_VEmw7tNHTs_CU2Xf7FFpQ="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2527", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314473"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fFkagooZMu5_TmzXfpcmj_VEmw7tNHTs_CU2Xf7FFpQ="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2537", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193956"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rew2OB3_kenPD9HVcOkKuhjjsNK_7k8TIW8lBuMvsec="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2535", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193957"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n_uyGA3cGERxww7tilv0GiJO_rk-NB2IN25dfk8fjpg="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2536", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193957"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n_uyGA3cGERxww7tilv0GiJO_rk-NB2IN25dfk8fjpg="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2534", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193958"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3LfBvP6ChZJLAsFN6igrKtQ5QUI2_s5hGyZFYNapp3o="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2532", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193959"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NQxQ_Z4Ls_obThAtfzxEMq0y5CNAODiNK_4bsFFMbqw="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2533", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193959"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NQxQ_Z4Ls_obThAtfzxEMq0y5CNAODiNK_4bsFFMbqw="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2543", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nH7SqebOpwj3KXdRNN8Q1o1uuQcH-TM7cPTaihRcnWY="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2541", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nH7SqebOpwj3KXdRNN8Q1o1uuQcH-TM7cPTaihRcnWY="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2542", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nH7SqebOpwj3KXdRNN8Q1o1uuQcH-TM7cPTaihRcnWY="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2540", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nH7SqebOpwj3KXdRNN8Q1o1uuQcH-TM7cPTaihRcnWY="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2538", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RGKc4dbOOy0TigSuTSrYdc02lqO3wuAJKTru9s7DUn0="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2539", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RGKc4dbOOy0TigSuTSrYdc02lqO3wuAJKTru9s7DUn0="
      envelope = @pubnub.revoke(group: "demo", write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2549", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193960"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y8hOI4KT8JDHWK4wqxDo3bBYXt2Ec-YWm3c56ebC8zI="
      envelope = @pubnub.revoke(group: "demo", write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2547", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193961"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u_Ev-GLBV5b41Sr7zFN8ClFThOhkDzILmsD6ym4CGFM="
      envelope = @pubnub.revoke(group: "demo", write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2548", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193961"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u_Ev-GLBV5b41Sr7zFN8ClFThOhkDzILmsD6ym4CGFM="
      envelope = @pubnub.revoke(group: "demo", write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2546", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193962"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0jYaorXfAE6LKJ6s8YvjjCPjZiBxs7ZEFEiMDy_b2nY="
      envelope = @pubnub.revoke(group: "demo", write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2544", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193963"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l3tG5qmYzYwBg3bot__prXfVQJ5J8-QsqN3FvV0IQ1U="
      envelope = @pubnub.revoke(group: "demo", write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2545", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193963"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l3tG5qmYzYwBg3bot__prXfVQJ5J8-QsqN3FvV0IQ1U="
      envelope = @pubnub.revoke(group: "demo", write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2555", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Mk0fK3xjhO_GMZ73TFpwfAWxoucJnJL0tEdgLsh_kgI="
      envelope = @pubnub.revoke(group: "demo", write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2553", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Mk0fK3xjhO_GMZ73TFpwfAWxoucJnJL0tEdgLsh_kgI="
      envelope = @pubnub.revoke(group: "demo", write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2554", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdMRv3podMH0pD0JeuSX8cLBBL6LIhqD3ehtkWQWhcU="
      envelope = @pubnub.revoke(group: "demo", write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2552", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdMRv3podMH0pD0JeuSX8cLBBL6LIhqD3ehtkWQWhcU="
      envelope = @pubnub.revoke(group: "demo", write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2550", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdMRv3podMH0pD0JeuSX8cLBBL6LIhqD3ehtkWQWhcU="
      envelope = @pubnub.revoke(group: "demo", write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2551", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WdMRv3podMH0pD0JeuSX8cLBBL6LIhqD3ehtkWQWhcU="
      envelope = @pubnub.revoke(group: "demo", write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2345", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193964"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Gl9CLNzxFUMn-fMuquyKv7Nhtb05OF4XMuFZcDJUQL8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2343", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193965"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FVkWGpJXTIB3wlq2miMj-26N2ogg1B0exw2zgbTT9oc="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2344", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193965"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FVkWGpJXTIB3wlq2miMj-26N2ogg1B0exw2zgbTT9oc="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2342", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193966"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Cn6fMpyZ5ht3N-0BqmNZI6K6-QpazWlfmEjj8MnqWR4="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2340", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193967"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eH26R4lTqwD_a4bXmXN7NYCL2P-m676_WS1LP2AY8ew="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2341", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193967"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eH26R4lTqwD_a4bXmXN7NYCL2P-m676_WS1LP2AY8ew="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2351", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-FKM0fRvgH8si8brGwm5Rj_-L_aytu-FYGOC6SL_3p8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2349", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-FKM0fRvgH8si8brGwm5Rj_-L_aytu-FYGOC6SL_3p8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2350", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-FKM0fRvgH8si8brGwm5Rj_-L_aytu-FYGOC6SL_3p8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2348", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-FKM0fRvgH8si8brGwm5Rj_-L_aytu-FYGOC6SL_3p8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2346", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uHts5PN6KliwhniDRkcBZVZti603V2p-Vw5e4a6nPrA="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2347", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uHts5PN6KliwhniDRkcBZVZti603V2p-Vw5e4a6nPrA="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2357", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193968"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gTw4GcFwemGixsjRGQ3_NFNhHdUPbf9yFoH-Y1gWYxw="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2355", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193969"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oXS52oJzKcs3IGvVtC8ZeHIZ9NHo6fkXoU_UQFOKPe0="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2356", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193969"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oXS52oJzKcs3IGvVtC8ZeHIZ9NHo6fkXoU_UQFOKPe0="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2354", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193970"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sVJGH1IrrHhyJeOYZPYyLpxQfBposh7W0s9Y9qpfaMk="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2352", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193971"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "czV4mhUYJJgfUhobWYgQaPakfQTX41xDqfYQ2o8kMwo="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2353", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193971"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "czV4mhUYJJgfUhobWYgQaPakfQTX41xDqfYQ2o8kMwo="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2363", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nqCvquGkQP7bjdsNz47OG9AcMKg42O4U0ikJLu9YsNc="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2361", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nqCvquGkQP7bjdsNz47OG9AcMKg42O4U0ikJLu9YsNc="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2362", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eLhHOcPGcJC1pbWofagOSRo5qM1Lyya9UhbYb8oxBfk="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2360", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eLhHOcPGcJC1pbWofagOSRo5qM1Lyya9UhbYb8oxBfk="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2358", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eLhHOcPGcJC1pbWofagOSRo5qM1Lyya9UhbYb8oxBfk="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2359", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eLhHOcPGcJC1pbWofagOSRo5qM1Lyya9UhbYb8oxBfk="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2369", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193972"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PyqiUE_lOti3MptxW8yhxIVw3UgLxpnChI1gTGoekms="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2367", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193973"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tdrFJ9BBxMPaGPCEon7uAMz3TxGiWR3J3X7OMb9vneg="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2368", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193973"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tdrFJ9BBxMPaGPCEon7uAMz3TxGiWR3J3X7OMb9vneg="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2366", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193974"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0pbIjBInTQMThJAxqWrpzuZstO84O0Usuvsi4smU1zE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2364", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193975"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J_UQAyNdHQ6jpCti4CRGdxA3n_52VZUqx-1cNzCKVdA="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2365", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193975"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J_UQAyNdHQ6jpCti4CRGdxA3n_52VZUqx-1cNzCKVdA="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2375", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nUD89WQ7WJUVQkYietyzMwMWmEz9AMKJvx2xGkzPnVE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2373", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nUD89WQ7WJUVQkYietyzMwMWmEz9AMKJvx2xGkzPnVE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2374", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nUD89WQ7WJUVQkYietyzMwMWmEz9AMKJvx2xGkzPnVE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2372", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nUD89WQ7WJUVQkYietyzMwMWmEz9AMKJvx2xGkzPnVE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2370", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314481"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SdpnZhdE1wnw05izUhfbXSNfHayuL7AXHtakBx7GpuM="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2371", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314481"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SdpnZhdE1wnw05izUhfbXSNfHayuL7AXHtakBx7GpuM="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2273", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193976"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7ETceLsibfm_FD6NNnZ_f-kmxu_m_r4lfPH3Mz6NPpU="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2271", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193977"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c4wUVDP7DY0uDzCNCVXH4V8sA7x96JKvt-4Px4JGegU="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2272", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193977"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c4wUVDP7DY0uDzCNCVXH4V8sA7x96JKvt-4Px4JGegU="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2270", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193978"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7hUK0_MkcRpkt8wOt-UOn82818w9lOXH7fPMsrFbVsU="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2268", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193979"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NOJUSi_MwQ8780su7wcLy7FBjkbewEGfoR7Vsqr1SYA="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2269", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193980"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BoaNXEkPBPCBzn6urmhBtpRXv0EkGsy_Ps07sP4FYcY="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2279", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314481"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0eRAg3DEDoHzNu8P5LDPL1DzelQk0ESKBjBYfeRDd2g="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2277", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314481"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0eRAg3DEDoHzNu8P5LDPL1DzelQk0ESKBjBYfeRDd2g="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2278", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314483"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1-2jhYcQwuBtZIlmmJbFP1-QYd4YMUJnFEoUgHhU6wE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2276", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314483"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1-2jhYcQwuBtZIlmmJbFP1-QYd4YMUJnFEoUgHhU6wE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2274", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314483"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1-2jhYcQwuBtZIlmmJbFP1-QYd4YMUJnFEoUgHhU6wE="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2275", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314484"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x9VJncSECK2sqlGcVON5JzSD7bcIwnWdlDQ7vlLeqjw="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2285", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193980"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "daxyNkR4KIiXDp_YLjC_yjElWCHQMkrVbmIDIM-_TiQ="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2283", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193981"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZF0tDORL5elPlMMcNBBLyXSSUrgpDlXTPYivzg1XSXY="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2284", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193982"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QVlHN3eA77vs0MvNyx4ncgR7HVZBk2UMPfIbT412B4Y="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2282", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193982"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QVlHN3eA77vs0MvNyx4ncgR7HVZBk2UMPfIbT412B4Y="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2280", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193983"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Dezuqvw1w49Lsk1s02B69bApFrP1cqJ-y_FEiVFu5uM="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2281", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193984"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e3SHqaz6ShuaAwm-TxXLz_s2-U9-S_Naj6hjlIrf_J8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2291", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314484"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-zQOytybQW0_jBELMiEqqCjaOh1amQiozn-Ocwv2rVI="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2289", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Im4_llS720ShKFKzHhNQHOCHmHth5nnZ7_fwIKasCw="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2290", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Im4_llS720ShKFKzHhNQHOCHmHth5nnZ7_fwIKasCw="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2288", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Im4_llS720ShKFKzHhNQHOCHmHth5nnZ7_fwIKasCw="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2286", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O6WMuvIRRHBMUAT7a1BpF71TFlF2Dde_04wIqdHC8cg="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2287", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O6WMuvIRRHBMUAT7a1BpF71TFlF2Dde_04wIqdHC8cg="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2297", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193985"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lxzb1lmAIqmpDjj6oKwSSLBaROhLiepP-428JT54uHs="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2295", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193985"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lxzb1lmAIqmpDjj6oKwSSLBaROhLiepP-428JT54uHs="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2296", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193986"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AE6KLGQuKAolvgDo-mJ1QXaGgyMZcghZz0Sk2j4HCFc="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2294", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193987"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aSv2PtXzPeDuCAoRDYqvEcV3g7SDWBSa51rLvTKY4uI="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2292", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193987"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aSv2PtXzPeDuCAoRDYqvEcV3g7SDWBSa51rLvTKY4uI="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2293", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193988"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7ijYeKDPwI9a9XpBrP6SuHWlrPbHtSuFp0vkxJFnoDc="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2303", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hOcP4WDS9AU0kg_ysWI998bgQBsEoEezNBbsRM0Vt_Q="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2301", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hOcP4WDS9AU0kg_ysWI998bgQBsEoEezNBbsRM0Vt_Q="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2302", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fHk3TX3MlaTBzw45AUsKkYejRmXxU5gJMBgI4mCSMQ8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2300", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fHk3TX3MlaTBzw45AUsKkYejRmXxU5gJMBgI4mCSMQ8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2298", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fHk3TX3MlaTBzw45AUsKkYejRmXxU5gJMBgI4mCSMQ8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2299", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fHk3TX3MlaTBzw45AUsKkYejRmXxU5gJMBgI4mCSMQ8="
      envelope = @pubnub.revoke(group: "demo", write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2309", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193989"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_EkPfUFBIH3ARCKLwkl1Uvz-HObejEOO_P_QOP0bpsc="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2307", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193990"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qJOmPqcf1zNHEsXSgACzZcysjG2u9hZZB6k9daHvyC8="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2308", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193990"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qJOmPqcf1zNHEsXSgACzZcysjG2u9hZZB6k9daHvyC8="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2306", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193991"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FKvxhn4MqzKwk5vHE_dFUcGwflk6jk0Ml5XXqjaeCMY="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2304", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193992"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w6zrs4umIlJpxSW7lCdAUbfXHx9Sxe8Fvu3TG1frOT8="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2305", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193992"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w6zrs4umIlJpxSW7lCdAUbfXHx9Sxe8Fvu3TG1frOT8="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2315", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DE_V4fErmzl_DL5DKjVjVm1lzYD7HaICXbWGbCvKXfg="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2313", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DE_V4fErmzl_DL5DKjVjVm1lzYD7HaICXbWGbCvKXfg="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2314", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DE_V4fErmzl_DL5DKjVjVm1lzYD7HaICXbWGbCvKXfg="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2312", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DE_V4fErmzl_DL5DKjVjVm1lzYD7HaICXbWGbCvKXfg="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2310", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314491"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YRLoOdYNCXRvwFhd03d4LTSjV-nY5lnKt7miSQX1h30="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2311", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314491"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YRLoOdYNCXRvwFhd03d4LTSjV-nY5lnKt7miSQX1h30="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2321", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193993"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NcbHRXXcIVgjlhQufLxY5h0dZT3ocE_5SdN6UZGmJBo="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2319", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193994"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UBpABzbrK7mRuLL7F9DUWzuRF1PocNvNgj9NxqiGZO0="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2320", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193995"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1uk595CFV9GzUBRFaiQ-LAjYiGkecWqWhnypUIg1pzc="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2318", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193995"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1uk595CFV9GzUBRFaiQ-LAjYiGkecWqWhnypUIg1pzc="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2316", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193996"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J_5uHVPDrBx-HpmdvV1qmxJcCq_yLcVrHrCt2o_odEU="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2317", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193997"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K694MYUjy0S3n2Ci4QyiuNGge89SiT0rDQPwKMtDeUc="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2327", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314491"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M5s-pze1j7r2cG2Uu4NmuZE1OyweU_GXvhIltfY5AjA="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2325", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FQ9eDLk430-X51t5_ksRkMxMePTVGxuBROG0p0YTcCA="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2326", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FQ9eDLk430-X51t5_ksRkMxMePTVGxuBROG0p0YTcCA="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2324", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FQ9eDLk430-X51t5_ksRkMxMePTVGxuBROG0p0YTcCA="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2322", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FQ9eDLk430-X51t5_ksRkMxMePTVGxuBROG0p0YTcCA="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2323", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4w8_Q9NsYXOF7tPpci5soYI-bSM4o8JJIf4vUr6SqFg="
      envelope = @pubnub.revoke(group: "demo", write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2333", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193997"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A_J_UkC38kOyBnUdWS7P3irISKJhkvaiRmKrEUytKcs="
      envelope = @pubnub.revoke(group: "demo", write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2331", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193998"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rnN70H3C6UJbmDsWswIf2zgqjGQ-UZhNOoJXyNRWt1c="
      envelope = @pubnub.revoke(group: "demo", write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2332", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193999"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JIjhclMAQFOpKrb8GQgoIN7p4aNJk05DVlNZ_NujsFg="
      envelope = @pubnub.revoke(group: "demo", write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2330", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193999"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JIjhclMAQFOpKrb8GQgoIN7p4aNJk05DVlNZ_NujsFg="
      envelope = @pubnub.revoke(group: "demo", write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2328", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194000"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "83MQO-2D-12-xgcxRQUM0xiocgY7XwqaBDGGjXgYp3c="
      envelope = @pubnub.revoke(group: "demo", write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2329", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194001"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bxBsEWW7s-FYyJzEibo4WndSv0HwK3nnCzJOj51aT3U="
      envelope = @pubnub.revoke(group: "demo", write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2339", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7GvHHTBsDbyNUK5_v1Pdzg3LpgQCamXwrOyajSK1Qh0="
      envelope = @pubnub.revoke(group: "demo", write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2337", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7GvHHTBsDbyNUK5_v1Pdzg3LpgQCamXwrOyajSK1Qh0="
      envelope = @pubnub.revoke(group: "demo", write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2338", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7GvHHTBsDbyNUK5_v1Pdzg3LpgQCamXwrOyajSK1Qh0="
      envelope = @pubnub.revoke(group: "demo", write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2336", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314494"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yo5Zva0KLry3dwALV0N0lmU0pOh7eYjmR0r78vzxUe0="
      envelope = @pubnub.revoke(group: "demo", write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2334", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314498"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rK1tcWrCdeAXrRe3PDg86vf0CoAk6G1qkb6GLyAmHcs="
      envelope = @pubnub.revoke(group: "demo", write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2335", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314498"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rK1tcWrCdeAXrRe3PDg86vf0CoAk6G1qkb6GLyAmHcs="
      envelope = @pubnub.revoke(group: "demo", write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2453", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194001"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1H6gMNu2hH_wIfPqeSJ6UUIBfuoR5IcF3sFJfeayzSE="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2451", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194002"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M5zAe6_rKDu4_BLAsFHazjcwPw8_Eg-R-KHlwP3-k5Q="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2452", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194002"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M5zAe6_rKDu4_BLAsFHazjcwPw8_Eg-R-KHlwP3-k5Q="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2450", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194003"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xWpopxFUwYGuZboJ8PARVwtnDhLn-pF_6Tyzud_bpTw="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2448", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194004"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ll4sWUbjpYXl_qlPiZ7ztlMQecJzTpMeMTlzieLOwts="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2449", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194004"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ll4sWUbjpYXl_qlPiZ7ztlMQecJzTpMeMTlzieLOwts="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2459", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UQcWhhHfQEvRYs6An0_iH0EW46oO4K3PU0gpNKJvb0I="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2457", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UQcWhhHfQEvRYs6An0_iH0EW46oO4K3PU0gpNKJvb0I="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2458", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UQcWhhHfQEvRYs6An0_iH0EW46oO4K3PU0gpNKJvb0I="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2456", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UQcWhhHfQEvRYs6An0_iH0EW46oO4K3PU0gpNKJvb0I="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2454", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314500"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NhXHIjAb9nDRdERRwrXh1keMALUb-P3hIYNSovlta3I="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2455", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314500"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NhXHIjAb9nDRdERRwrXh1keMALUb-P3hIYNSovlta3I="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2465", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194005"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BQ4AnQ_QvDbLFqgmK7yk1n9aD3Bw2_Yq9bDRmVzBa-Y="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2463", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194006"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Uor3qQzDk0w7DF41bkx8YDqb5CcraurFK3bNsT4IEE="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2464", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194007"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sRwhp_tXq47RiHbE567oIek4IZRSQMD2LgsVukBqQF8="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2462", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194007"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sRwhp_tXq47RiHbE567oIek4IZRSQMD2LgsVukBqQF8="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2460", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194008"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eRWUqU3QzDBWCdPChPERp--ZmLflhEvlxoupzk99ovA="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2461", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194009"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IVuLVUh3sDgptTbTdfGSb-8nrIkQEfrc58Sbt4N4dms="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2471", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S0G6a7eNQHEn_uQn9VtSTpn5wJTGP2ojea_flMK78TY="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2469", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S0G6a7eNQHEn_uQn9VtSTpn5wJTGP2ojea_flMK78TY="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2470", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S0G6a7eNQHEn_uQn9VtSTpn5wJTGP2ojea_flMK78TY="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2468", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S0G6a7eNQHEn_uQn9VtSTpn5wJTGP2ojea_flMK78TY="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2466", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314502"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CWVsBV-w2sfmu_3933MgIzKRoyj30ZIbKtWe59HxqYY="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2467", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314502"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CWVsBV-w2sfmu_3933MgIzKRoyj30ZIbKtWe59HxqYY="
      envelope = @pubnub.revoke(group: "demo", manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2477", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194009"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PpHan0OY9jj9uOenn0crFAm6CwXYraHGEySzQkixOx8="
      envelope = @pubnub.revoke(group: "demo", manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2475", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194010"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RjJZ7wEzUCfLtAKNAXfl9ATZjT05op3KWH2_qh2YR8w="
      envelope = @pubnub.revoke(group: "demo", manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2476", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194010"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RjJZ7wEzUCfLtAKNAXfl9ATZjT05op3KWH2_qh2YR8w="
      envelope = @pubnub.revoke(group: "demo", manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2474", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194011"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tU_cDyPfr-mAuLjq75c_g57OZ_LWo3N5gTD67vKzJhQ="
      envelope = @pubnub.revoke(group: "demo", manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2472", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194012"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "usbsPWZOlhz5OLvlSCVh9n4u3nzEnGrH2AFHj4uKi4I="
      envelope = @pubnub.revoke(group: "demo", manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2473", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194012"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "usbsPWZOlhz5OLvlSCVh9n4u3nzEnGrH2AFHj4uKi4I="
      envelope = @pubnub.revoke(group: "demo", manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2483", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314502"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kUbwA_ScyLO1zzq1M7C2nPmpK2e10ZeDSWJk_I_Gqtk="
      envelope = @pubnub.revoke(group: "demo", manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2481", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iDoehhrSoTSb0i46p0HthhdPglm3kLPiQNhiuNHDxpM="
      envelope = @pubnub.revoke(group: "demo", manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2482", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iDoehhrSoTSb0i46p0HthhdPglm3kLPiQNhiuNHDxpM="
      envelope = @pubnub.revoke(group: "demo", manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2480", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iDoehhrSoTSb0i46p0HthhdPglm3kLPiQNhiuNHDxpM="
      envelope = @pubnub.revoke(group: "demo", manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2478", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iDoehhrSoTSb0i46p0HthhdPglm3kLPiQNhiuNHDxpM="
      envelope = @pubnub.revoke(group: "demo", manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2479", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314504"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MjpBeqy-m6sTk7iG-OHOTEqKcl1wRRshYW2kzE2X7j4="
      envelope = @pubnub.revoke(group: "demo", manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2381", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194013"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BqAJK_FB3LfBfKfd2ys9agBUfzSynBcyEHIT8_yj9oQ="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2379", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194014"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AB6nW3BNXd0teMQ9lOJ9NkhGhVXuqr-5YwK_MWO-z2U="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2380", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194014"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AB6nW3BNXd0teMQ9lOJ9NkhGhVXuqr-5YwK_MWO-z2U="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2378", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194015"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R1qUfWivHVAvxBVfX9aNWJq_9IdQcoHlcPBrnpaRX_4="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2376", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194016"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AeIh9ZWFZah3PdnqWMnZYF1cnoyhquMQyH7YVP3agow="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2377", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194017"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bA8iETC64D19eQhi_oCkYVr4GVjHKwJYALyDf3Y45z8="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2387", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314504"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Qf6UuPAyKk3NtDL4M5xhiiqvWF9FFf5saOJbPdN04Jw="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2385", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8B-K2JgDCFXv4Yg7tmURw2mfbxEkwZZxEdcCY0LQkaw="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2386", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8B-K2JgDCFXv4Yg7tmURw2mfbxEkwZZxEdcCY0LQkaw="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2384", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8B-K2JgDCFXv4Yg7tmURw2mfbxEkwZZxEdcCY0LQkaw="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2382", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8B-K2JgDCFXv4Yg7tmURw2mfbxEkwZZxEdcCY0LQkaw="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2383", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "b_HWA1TuyVEUM9_mTdQZa3HvwDi608nEoib8fOM2LBI="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2393", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194018"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CeB4B5XKLkvQaND8NdTI1MoyMQyYxvQrzqOGNcTQVOc="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2391", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194018"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CeB4B5XKLkvQaND8NdTI1MoyMQyYxvQrzqOGNcTQVOc="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2392", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194019"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jJDtGCk9dLUQ71cREKo3Hr9sKl6R7BcpflwMjYzrO04="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2390", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194020"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SGL38PEnhdkZFh46jtQZ7ev0UrPanl2LBNkxmhJ2nRo="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2388", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194020"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SGL38PEnhdkZFh46jtQZ7ev0UrPanl2LBNkxmhJ2nRo="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2389", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194022"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G3uvvvsRU4nIbnOwjq7svQkYS2ZzVjcTUXvYs42VRto="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2399", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PlnwCmj1PIUU6Oy8y9X6E8i-WHqBfajYQ6ieWC9fozo="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2397", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PlnwCmj1PIUU6Oy8y9X6E8i-WHqBfajYQ6ieWC9fozo="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2398", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PlnwCmj1PIUU6Oy8y9X6E8i-WHqBfajYQ6ieWC9fozo="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2396", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CqvbuXZzbAxn2L2dm_04IPygd621F4aYknlwlzDkS4Q="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2394", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CqvbuXZzbAxn2L2dm_04IPygd621F4aYknlwlzDkS4Q="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2395", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CqvbuXZzbAxn2L2dm_04IPygd621F4aYknlwlzDkS4Q="
      envelope = @pubnub.revoke(group: "demo", manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2405", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194022"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SSh9wViPpHXhLyvU1Ch38yJzPBWzT79tC2loqCX5KEA="
      envelope = @pubnub.revoke(group: "demo", manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2403", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194023"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l21hMIq8RAmQECmoMQ1WlP7xdoqLVnepGznjpXiXhl8="
      envelope = @pubnub.revoke(group: "demo", manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2404", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194024"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3CiTSSU9I_jqUuDSc_GPMav002oyh6TOmlgBrRCWOsk="
      envelope = @pubnub.revoke(group: "demo", manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2402", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194024"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3CiTSSU9I_jqUuDSc_GPMav002oyh6TOmlgBrRCWOsk="
      envelope = @pubnub.revoke(group: "demo", manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2400", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194025"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OXBNVLQlMZgyAsvmZd1szEOjHZPiPbkhOzl-6IinRaA="
      envelope = @pubnub.revoke(group: "demo", manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2401", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194026"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Llo80gtlStNtjQS8IOyDqZD3t5Pmc494Ov7e6apnaQQ="
      envelope = @pubnub.revoke(group: "demo", manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2411", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jJDhX6bOjwDMzU1RDrXdY5JWkH0fc5jsFO00o5kt168="
      envelope = @pubnub.revoke(group: "demo", manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2409", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QsQsrgjeXiXgRE6rPRqsMexZxBVZd9VlJz9Dl7-EZAU="
      envelope = @pubnub.revoke(group: "demo", manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2410", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QsQsrgjeXiXgRE6rPRqsMexZxBVZd9VlJz9Dl7-EZAU="
      envelope = @pubnub.revoke(group: "demo", manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2408", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QsQsrgjeXiXgRE6rPRqsMexZxBVZd9VlJz9Dl7-EZAU="
      envelope = @pubnub.revoke(group: "demo", manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2406", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QsQsrgjeXiXgRE6rPRqsMexZxBVZd9VlJz9Dl7-EZAU="
      envelope = @pubnub.revoke(group: "demo", manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2407", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sAmSeCdYpHdQOt6XvJ1RlckscbBLI-J3PgtIp9FJwHk="
      envelope = @pubnub.revoke(group: "demo", manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 1}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2417", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194026"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "feIyjlJms0GTgRlQ-OjW3S7bLVSiv7SHCMFfdKeDV3g="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2415", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194027"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qkxgu66T5B6vYJDvkTyAdwmJJYmjtuVBJa2pgy8Yal4="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2416", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194027"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qkxgu66T5B6vYJDvkTyAdwmJJYmjtuVBJa2pgy8Yal4="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2414", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194028"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7otBCq5I5xJUdH5jiT1YDB52nClvnTEWIznZZuVL7cU="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2412", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194029"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qIYlLjJ1ZqYyW8uGPpFJE7Wshzx-4Cz0Tkpnbrg8fJM="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2413", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194029"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qIYlLjJ1ZqYyW8uGPpFJE7Wshzx-4Cz0Tkpnbrg8fJM="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2423", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7qMCWTCmJF1mheDTRA7SKi8_ehzWwEIcD5LDtVIyLhg="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2421", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7qMCWTCmJF1mheDTRA7SKi8_ehzWwEIcD5LDtVIyLhg="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2422", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7qMCWTCmJF1mheDTRA7SKi8_ehzWwEIcD5LDtVIyLhg="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2420", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MWWWadpQftCyHd9-thgnoo3-AJ8ySWx10PDVIeeWjt4="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2418", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MWWWadpQftCyHd9-thgnoo3-AJ8ySWx10PDVIeeWjt4="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2419", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MWWWadpQftCyHd9-thgnoo3-AJ8ySWx10PDVIeeWjt4="
      envelope = @pubnub.revoke(group: "demo", ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2429", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194030"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fs5ZI2kURPL3TJJ-sWjf8UWwhGcRnet1W5zG_42L9dI="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2427", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194031"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3v9Yu0NLte3vfJfH6XirRRamJLr8iJsZ3Fc8yRKpe6I="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2428", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194031"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3v9Yu0NLte3vfJfH6XirRRamJLr8iJsZ3Fc8yRKpe6I="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2426", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194032"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N5m67I00Pkvd7ioR8pembST1hhD0cBZ51J0uR-Xpl3s="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2424", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194033"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ATk23aqpKLt1XFFcb4hrbPsGiOm7Bn1Sad89ZijUHks="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2425", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194033"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ATk23aqpKLt1XFFcb4hrbPsGiOm7Bn1Sad89ZijUHks="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2435", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lZp6iYrO72iyCrUFe5RE2ZaLF4pzN67C3xPofAlbfMM="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2433", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2U2KZLx6vME8FOfF61f9eC8wpyeozwdcNvLkZwQT5ZQ="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2434", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2U2KZLx6vME8FOfF61f9eC8wpyeozwdcNvLkZwQT5ZQ="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2432", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2U2KZLx6vME8FOfF61f9eC8wpyeozwdcNvLkZwQT5ZQ="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2430", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2U2KZLx6vME8FOfF61f9eC8wpyeozwdcNvLkZwQT5ZQ="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2431", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DZHAC7CYZ7Sjlr8pjRu1H79Czkrd4eHmbaKX0-dRj-U="
      envelope = @pubnub.revoke(group: "demo", ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2441", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194034"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q9_mxjHXxMZnbUp1CrG7Sh75AWExWYRhibLORZ4tLIc="
      envelope = @pubnub.revoke(group: "demo", auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2439", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194034"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q9_mxjHXxMZnbUp1CrG7Sh75AWExWYRhibLORZ4tLIc="
      envelope = @pubnub.revoke(group: "demo", auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2440", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194035"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fXShEIHSvzhQawlGs-LElEnn31l9D4rdI-UdVP74eUI="
      envelope = @pubnub.revoke(group: "demo", auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2438", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194036"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IJsIbpST5RFrJi_oyhVf34ck45IragteUTGHWrdCrq4="
      envelope = @pubnub.revoke(group: "demo", auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2436", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194036"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IJsIbpST5RFrJi_oyhVf34ck45IragteUTGHWrdCrq4="
      envelope = @pubnub.revoke(group: "demo", auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2437", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464194037"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LVqPQZImMl1jvSWdQIxnfgt2tvIox-a-eTiz2GAeuJ4="
      envelope = @pubnub.revoke(group: "demo", auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group+auth", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/2447", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h0gA6MDGd34Uw9fg_Hmc75Fr21kQNS_rpVSTWw8hX08="
      envelope = @pubnub.revoke(group: "demo", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/2445", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h0gA6MDGd34Uw9fg_Hmc75Fr21kQNS_rpVSTWw8hX08="
      envelope = @pubnub.revoke(group: "demo", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2446", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h0gA6MDGd34Uw9fg_Hmc75Fr21kQNS_rpVSTWw8hX08="
      envelope = @pubnub.revoke(group: "demo", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2444", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G-H09NvJ_ro5xhxjlRONr6_JZzqENk6hfApRl9L3L6M="
      envelope = @pubnub.revoke(group: "demo", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/2442", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G-H09NvJ_ro5xhxjlRONr6_JZzqENk6hfApRl9L3L6M="
      envelope = @pubnub.revoke(group: "demo", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel__nil___group___demo____read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/2443", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1465314513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G-H09NvJ_ro5xhxjlRONr6_JZzqENk6hfApRl9L3L6M="
      envelope = @pubnub.revoke(group: "demo", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel-group", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel-groups" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end
end
