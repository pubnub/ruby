require 'helpers/spec_helper'

describe Pubnub::Subscribe do

  let(:pubnub_params) do
    {
      publish_key: "pub-a-mock-key",
      subscribe_key: "sub-a-mock-key",
      user_id: "ruby-test-uuid-client-one",
      auth_key: "ruby-test-auth-client-one",
      max_retries: 2,
      reconnect_interval: 0
    }
  end

  let(:pubnub_cipher_params) do
    pubnub_params.merge({cipher_key: "super-secret-cipher-key", random_iv: false})
  end

  let(:pubnub) { Pubnub.new(**pubnub_params) }
  around :each do |example|
    @fired = false

    @callback = -> (_envelope) do
      @fired = true
    end

    example.run_with_retry retry: 10
  end

  context 'encrypted communication' do
    let(:pubnub) { Pubnub.new(**pubnub_cipher_params) }

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/195", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 119, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009718046610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009718367493", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009718367493", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009727583577", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009727583577", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400972, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009726845445", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009726845445", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400972, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009727588984", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009727588984", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400972, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009729862887", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400972, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009729862887", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400972, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400973, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009733798146", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400973, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009733798146", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400973, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400973, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009735798772", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009736703444)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009705262657)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400973, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009735798772", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400973, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/263", record: :none) do
        pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 121, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009750891130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009751220926", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009751915202)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009718452085)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009751220926", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 121, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009750891130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009751220926", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009751915202)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009718452085)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009751220926", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 123, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009751509990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009751833676", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009751915202)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009718452085)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009751833676", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 123, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009751509990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009751833676", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009751915202)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009718452085)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009751833676", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/259", record: :none) do
        pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 125, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009783323478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009783652455", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009784340303)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009751915202)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009783652455", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 125, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009783323478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009783652455", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009784340303)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009751915202)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009783652455", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 127, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009783927550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009784255550", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009784340303)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009751915202)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009784255550", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 127, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009783927550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009784255550", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009784340303)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009751915202)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009784255550", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/261", record: :none) do
        pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 129, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009815725840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009816047299", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009816744404)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009784340303)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009816047299", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 129, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009815725840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009816047299", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009816744404)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009784340303)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009816047299", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 131, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009816331670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009816654883", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009816744404)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009784340303)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009816654883", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 131, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009816331670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009816654883", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009816744404)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009784340303)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009816654883", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/257", record: :none) do
        pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 133, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009852225048", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009852546222", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009853237108)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009816744404)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009852546222", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 133, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009852225048", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009852546222", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009853237108)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009816744404)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009852546222", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 135, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009852828930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009853151449", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009853237108)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009816744404)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009853151449", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 135, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009852828930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009853151449", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009853237108)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009816744404)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009853151449", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/253", record: :none) do
        pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 137, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009884599240", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009884919460", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009885609457)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009853237108)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009884919460", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 137, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009884599240", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009884919460", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009885609457)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009853237108)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009884919460", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 139, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009885200992", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009885524992", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009885609457)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009853237108)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009885524992", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 139, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009885200992", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009885524992", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009885609457)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009853237108)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009885524992", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/255", record: :none) do
        pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 141, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009916974330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009917296415", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009918000126)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009885609457)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009917296415", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 141, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009916974330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009917296415", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009918000126)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009885609457)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009917296415", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 143, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009917583402", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009917914581", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009918000126)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009885609457)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009917914581", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 143, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009917583402", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009917914581", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009918000126)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009885609457)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009917914581", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/269", record: :none) do
        pubnub.subscribe(channel: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 145, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009949371772", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009949699093", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009949783635)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009918000125)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009949699093", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/265", record: :none) do
        pubnub.subscribe(channel: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 147, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009981664488", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009981986809", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009982068847)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009949783635)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009981986809", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/267", record: :none) do
        pubnub.subscribe(channel: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 149, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010013935070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010014260362", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010014344733)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009982068847)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010014260362", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/137", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 151, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010046216660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010046541666", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010059523524)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010014344733)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010046541666", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 153, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010046833860", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010047167902", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010059523524)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010014344733)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010047167902", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401005, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010059138555", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010059523524)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010014344733)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401005, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010059138555", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401005, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/133", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 155, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010079988448", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010080318101", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010095124048)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010059523524)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010080318101", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 157, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010080601290", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010080930421", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010095124048)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010059523524)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010080930421", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401008, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010085870496", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010095124048)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010059523524)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401008, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010085870496", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401008, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401009, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010093190316", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010095124048)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010059523524)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401009, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010093190316", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401009, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/135", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 159, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010112411142", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010112733347", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010119563412)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010095124048)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010112733347", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 161, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010113017590", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010113338425", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010119563412)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010095124048)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010113338425", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401011, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010119171868", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010119563412)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010095124048)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401011, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010119171868", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401011, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/131", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 163, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010144755750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010145086346", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010159003748)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010119563412)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010145086346", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 165, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010145376862", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010145696223", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010159003748)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010119563412)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010145696223", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401015, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010158045725", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010159003748)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010119563412)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401015, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010158045725", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401015, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/127", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 167, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010177164140", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010177490284", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010189642405)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010159003748)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010177490284", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 169, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010177771320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010178097510", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010189642405)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010159003748)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010178097510", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401018, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010184069755", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010189642405)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010159003748)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401018, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010184069755", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401018, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401018, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010189251056", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010189642405)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010159003748)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401018, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010189251056", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401018, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/129", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 171, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010209605692", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010209937713", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010222845827)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010189642405)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010209937713", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 173, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010210214688", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010210533409", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010222845827)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010189642405)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010210533409", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401021, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010215574498", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010222845827)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010189642405)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401021, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010215574498", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401021, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401022, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010222073551", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010222845827)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010189642405)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401022, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010222073551", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401022, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/143", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 175, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010246654920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010246979254", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010261374130)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010222845827)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010246979254", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401025, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010254688990", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010261374130)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010222845827)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401025, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010254688990", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401025, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401025, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010259235901", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010261374130)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010222845827)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401025, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010259235901", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401025, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/139", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 177, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010279034860", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010279355318", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010285505482)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010261374130)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010279355318", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401028, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010285118411", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010285505482)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010261374130)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401028, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010285118411", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401028, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/141", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 179, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010311827662", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010312155200", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010325684160)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010285505482)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010312155200", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401032, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010324372987", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010325684160)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010285505482)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401032, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010324372987", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401032, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401032, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010324916129", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010325684160)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010285505482)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401032, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010324916129", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401032, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/119", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 181, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010343998048", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010344318664", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010358645909)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010342673177)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010344318664", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401035, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010357178699", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010358645909)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010342673177)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401035, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010357178699", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401035, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401035, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010357178699", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010358645909)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010342673177)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401035, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010357178699", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401035, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 183, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010344603630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010344925798", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010358645909)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010342673177)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010344925798", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/115", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 185, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010376178630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010376496866", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010389002071)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010358645909)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010376496866", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 187, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010376784050", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010377109344", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010389002071)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010358645909)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010377109344", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010385988848", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010389002071)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010358645909)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010385988848", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401038, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010385988848", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010389002071)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010358645909)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010385988848", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401038, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010388537720", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010389002071)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010358645909)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010388537720", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401038, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010388537720", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010389002071)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010358645909)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401038, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010388537720", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401038, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/117", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 189, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010408372008", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010408694343", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010421069227)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010389002071)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010408694343", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 191, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010408978870", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010409371375", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010421069227)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010389002071)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010409371375", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401041, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010417024859", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010421069227)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010389002071)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401041, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010417024859", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401041, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401041, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010417024859", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010421069227)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010389002071)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401041, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010417024859", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401041, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401042, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010420596836", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010421069227)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010389002071)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401042, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010420596836", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401042, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401042, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010420596836", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010421069227)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010389002071)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401042, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010420596836", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401042, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/113", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 193, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010445101490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010445434670", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010457601764)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010421069227)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010445434670", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 195, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010445717340", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010446043770", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010457601764)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010421069227)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010446043770", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010451827184", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010457601764)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010421069227)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010451827184", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401045, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010451827184", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010457601764)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010421069227)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010451827184", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401045, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010457220977", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010457601764)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010421069227)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010457220977", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401045, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010457220977", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010457601764)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010421069227)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401045, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010457220977", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401045, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/109", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 197, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010477324560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010477647899", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010490656408)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010457601764)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010477647899", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 199, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010477934310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010478263081", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010490656408)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010457601764)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010478263081", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010483006234", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010490656408)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010457601764)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010483006234", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401048, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010483006234", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010490656408)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010457601764)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010483006234", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401048, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010489803561", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010490656408)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010457601764)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010489803561", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401048, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010489803561", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010490656408)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010457601764)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401048, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010489803561", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401048, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/111", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 201, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010509464478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010509794232", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010521977039)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010490656408)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010509794232", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 203, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010510077948", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010510420161", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010521977039)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010490656408)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010510420161", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401051, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010517359881", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010521977039)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010490656408)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401051, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010517359881", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401051, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401051, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010517359881", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010521977039)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010490656408)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401051, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010517359881", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401051, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401052, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010521567955", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010521977039)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010490656408)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401052, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010521567955", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401052, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401052, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010521567955", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010521977039)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010490656408)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401052, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010521567955", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401052, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/125", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 205, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010543009970", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010543508040", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010556736720)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010541699608)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010543508040", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401054, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010546894701", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010556736720)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010541699608)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401054, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010546894701", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401054, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401055, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010555688597", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010556736720)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010541699608)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401055, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010555688597", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401055, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401054, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010546894701", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010556736720)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010541699608)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401054, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010546894701", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401054, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401055, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010555688597", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010556736720)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010541699608)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401055, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010555688597", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401055, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/121", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 207, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010575169642", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010575507140", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010583865714)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010556736720)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010575507140", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401058, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010582610482", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010583865714)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010556736720)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401058, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010582610482", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401058, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401058, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010582610482", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010583865714)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010556736720)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401058, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010582610482", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401058, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/123", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 209, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010607279830", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010607603603", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010620722067)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010583865714)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010607603603", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401061, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010619885725", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010620722067)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010583865714)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401061, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010619885725", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401061, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401061, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010619885725", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010620722067)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010583865714)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401061, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010619885725", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401061, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/155", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 211, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010639464860", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010639789186", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010653480048)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010620722066)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010639789186", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 213, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010640075532", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010640401925", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010653480048)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010620722066)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010640401925", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401065, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010652633755", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010653480048)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010620722066)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401065, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010652633755", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401065, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/151", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 215, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010671706880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010672031032", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010677571716)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010653480048)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010672031032", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 217, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010672328100", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010672649760", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010677571716)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010653480048)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010672649760", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401067, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010677104286", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010677571716)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010653480048)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401067, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010677104286", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401067, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/153", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 219, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010703892920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010704216766", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010718831789)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010677571716)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010704216766", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 221, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010704502558", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010704824138", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010718831789)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010677571716)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010704824138", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401071, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010717139481", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010718831789)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010677571716)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401071, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010717139481", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401071, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/149", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 223, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010736091190", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010736423220", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010748838079)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010718831789)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010736423220", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 225, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010736696250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010737023639", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010748838079)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010718831789)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010737023639", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401074, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010744280250", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010748838079)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010718831789)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401074, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010744280250", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401074, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401074, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010748167260", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010748838079)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010718831789)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401074, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010748167260", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401074, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/145", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 227, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010768262852", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010768597981", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010780805783)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010748838079)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010768597981", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 229, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010768875830", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010769197822", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010780805783)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010748838079)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010769197822", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401077, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010774743504", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010780805783)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010748838079)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401077, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010774743504", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401077, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401078, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010780353958", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010780805783)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010748838079)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401078, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010780353958", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401078, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/147", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 231, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010800418120", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010800740910", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010801369924)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010780805783)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010800740910", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 233, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010801023988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010801349055", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010801369924)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010780805783)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010801349055", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/161", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 235, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010832539840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010832862088", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010855294415)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010800761798)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010832862088", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401083, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010839817323", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010855294415)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010800761798)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401083, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010839817323", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401083, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401085, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010854529710", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010855294415)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010800761798)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401085, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010854529710", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401085, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/157", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 237, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010869333660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010869657907", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010874354462)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010855294415)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010869657907", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401087, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010873871490", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010874354462)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010855294415)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401087, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010873871490", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401087, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/159", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 239, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010901448650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010901771707", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010913448179)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010874354462)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010901771707", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401091, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010912976163", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010913448179)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010874354462)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401091, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654010912976163", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401091, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/101", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 241, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010933586528", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010933915528", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010933915528", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 243, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010934202108", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010934551064", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010934551064", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010942708666", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010942708666", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401094, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010942708666", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010942708666", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401094, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010941950823", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654010941950823", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401094, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010945755844", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654010945755844", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401094, :state => nil, :occupancy => 0}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010948761449", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401094, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654010948761449", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401094, :state => nil, :occupancy => 0}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401095, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010953594701", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401095, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010953594701", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401095, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401095, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010953594701", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654010954514627)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654010901770973)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401095, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010953594701", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401095, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/97", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 245, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010965834120", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010966155456", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010966155456", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 247, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010966439960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010966762977", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010966762977", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010975104213", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654010975104213", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401097, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010975795865", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654010975795865", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401097, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010975821516", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010975821516", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401097, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010975821516", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401097, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010975821516", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401097, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010980322347", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010980322347", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401098, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010980322347", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010980322347", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401098, :state => nil, :occupancy => 2}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010980448280", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010980448280", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401098, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654010980448280", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654010982349844)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654010954514627)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401098, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654010980448280", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401098, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/99", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 249, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010998329280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010998651518", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654010998651518", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 251, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654010998937130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654010999263489", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654010999263489", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401101, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011011601364", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401101, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654011011601364", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401101, :state => nil, :occupancy => 0}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401101, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011014472278", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401101, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011014472278", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401101, :state => nil, :occupancy => 0}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401101, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011014570767", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401101, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011014570767", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401101, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401102, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011021756731", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401102, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011021756731", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401102, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401102, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011021756731", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654011022603078)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654010982349844)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401102, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011021756731", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401102, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/95", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 253, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011030470988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011030795186", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011045444589)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011029533844)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011030795186", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 255, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011031077362", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011031402961", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011045444589)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011029533844)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011031402961", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401103, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011039846486", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011045444589)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011029533844)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401103, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011039846486", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401103, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401103, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011039846486", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011045444589)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011029533844)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401103, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011039846486", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401103, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401104, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011044427877", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011045444589)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011029533844)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401104, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011044427877", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401104, :state => nil, :occupancy => 0}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/91", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 257, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011062660520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011062987945", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011062987945", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 259, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011063275180", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011063595574", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011063595574", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401106, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011067080320", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401106, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011067080320", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401106, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401107, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011074807840", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401107, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654011074807840", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401107, :state => nil, :occupancy => 0}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401107, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011077749304", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401107, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011077749304", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401107, :state => nil, :occupancy => 0}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401107, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011078353138", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401107, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011078353138", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401107, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401108, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011081994369", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401108, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011081994369", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401108, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401108, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011081994369", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654011082446706)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654011045444589)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401108, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011081994369", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401108, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/93", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 261, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011094859100", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011095183418", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011103707332)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011082446706)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011095183418", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 263, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011095467470", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011095793085", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011103707332)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011082446706)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011095793085", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401110, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011102684738", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011103707332)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011082446706)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401110, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654011102684738", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401110, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401110, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011102698519", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011103707332)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011082446706)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401110, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011102698519", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401110, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401110, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011102698519", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011103707332)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011082446706)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401110, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011102698519", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401110, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/107", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 265, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011127020538", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011127343533", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011127343533", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011147213489", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011147213489", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401114, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011146032346", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011146032346", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401114, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011147213489", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011147213489", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401114, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011146032346", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011146032346", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401114, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401113, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011138659672", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401113, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654011138659672", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401113, :state => nil, :occupancy => 0}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401115, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011153920775", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401115, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654011153920775", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401115, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011142999181", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654011154531549)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654011125694229)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401114, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011142999181", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401114, :state => nil, :occupancy => 0}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/103", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 267, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011159259362", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011159582523", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011171932578)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011154531549)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011159582523", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401116, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011164952981", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011171932578)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011154531549)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401116, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011164952981", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401116, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401117, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011171480003", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011171932578)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011154531549)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401117, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011171480003", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401117, :state => nil, :occupancy => 0}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/105", record: :none) do
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 269, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011191410182", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011191733527", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011209518802)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011171932578)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011191733527", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401119, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011197538641", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011209518802)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011171932578)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401119, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011197538641", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401119, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011202970938", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011209518802)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011171932578)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654011202970938", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401120, :state => nil, :occupancy => 0}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011207114759", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011209518802)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011171932578)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654011207114759", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401120, :state => nil, :occupancy => 0}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011209082537", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011209518802)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011171932578)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011209082537", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401120, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011209082537", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011209518802)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011171932578)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011209082537", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401120, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/173", record: :none) do
        pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 271, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011223532450", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011223854269", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011224515592)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011222202154)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011223854269", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 273, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011224156990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011224515622", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011224515592)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011222202154)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011224515622", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/169", record: :none) do
        pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 275, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011261310070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011261632992", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011262169181)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011224515592)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011261632992", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 277, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011261928080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011262249822", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011262169181)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011224515592)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011262249822", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/171", record: :none) do
        pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 279, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011298012920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011298338385", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011299025820)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011262169181)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011298338385", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 281, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011298625980", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011298950432", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011299025820)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011262169181)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011298950432", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/167", record: :none) do
        pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 283, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011330146098", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011330477199", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011331119141)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011299025820)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011330477199", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 285, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011330774012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011331097246", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011331119141)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011299025820)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011331097246", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/163", record: :none) do
        pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 287, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011362269230", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011362600741", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011363132843)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011331119141)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011362600741", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 289, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011362890710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011363213467", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011363132843)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011331119141)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011363213467", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/165", record: :none) do
        pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 291, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011394328570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011394654521", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011395265861)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011363132843)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011394654521", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 293, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011394940870", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011395261892", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011395265861)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011363132843)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011395261892", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/179", record: :none) do
        pubnub.subscribe(channel: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 295, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011426400640", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011426728691", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011426732896)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011394658800)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011426728691", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/175", record: :none) do
        pubnub.subscribe(channel: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo.*", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 297, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011458517440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011458840663", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011458840068)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011426732896)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011458840663", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/177", record: :none) do
        pubnub.subscribe(channel: "demo.*", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo.*", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 299, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011490601048", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011490924412", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011490928771)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011458840068)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654011490924412", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo.*", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/317", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 301, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011522672760", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011522996232", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011536477637)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011395265862)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011522996232", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 301, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011522672760", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011522996232", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011536477637)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011395265862)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011522996232", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 303, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011523280130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011523610875", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011536477637)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011395265862)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011523610875", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 303, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011523280130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011523610875", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011536477637)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011395265862)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011523610875", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401153, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011535714946", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011536477637)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011395265862)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401153, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011535714946", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401153, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/313", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 305, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011554835852", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011555449058", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011567703231)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011536477637)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011555449058", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 305, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011554835852", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011555449058", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011567703231)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011536477637)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011555449058", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 307, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011555730582", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011556052213", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011567703231)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011536477637)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011556052213", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 307, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011555730582", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011556052213", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011567703231)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011536477637)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011556052213", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401156, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011562018337", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011567703231)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011536477637)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401156, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011562018337", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401156, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401156, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011567296444", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011567703231)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011536477637)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401156, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011567296444", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401156, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/315", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 309, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011593585322", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011593909075", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011607631916)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011567703231)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011593909075", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 309, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011593585322", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011593909075", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011607631916)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011567703231)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011593909075", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 311, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011594201310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011594524046", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011607631916)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011567703231)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011594524046", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 311, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011594201310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011594524046", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011607631916)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011567703231)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011594524046", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401159, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011597453238", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011607631916)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011567703231)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401159, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011597453238", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401159, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401160, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011606810902", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011607631916)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011567703231)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401160, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011606810902", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401160, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/311", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 313, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011625715420", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011626037349", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011634518034)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011607631916)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011626037349", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 313, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011625715420", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011626037349", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011634518034)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011607631916)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011626037349", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 315, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011626329128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011626649063", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011634518034)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011607631916)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011626649063", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 315, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011626329128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011626649063", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011634518034)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011607631916)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011626649063", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401163, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011633695065", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011634518034)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011607631916)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401163, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011633695065", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401163, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/307", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 317, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011657865800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011658185999", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011671993806)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011634518034)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011658185999", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 317, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011657865800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011658185999", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011671993806)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011634518034)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011658185999", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 319, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011658476410", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011658798089", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011671993806)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011634518034)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011658798089", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 319, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011658476410", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011658798089", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011671993806)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011634518034)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011658798089", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401167, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011671128257", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011671993806)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011634518034)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401167, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011671128257", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401167, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/309", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 321, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011690021360", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011690343672", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011697167528)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011671993806)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011690343672", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 321, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011690021360", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011690343672", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011697167528)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011671993806)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011690343672", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 323, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011690633118", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011690953326", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011697167528)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011671993806)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011690953326", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 323, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011690633118", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011690953326", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011697167528)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011671993806)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011690953326", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401169, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011696630433", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011697167528)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011671993806)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401169, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011696630433", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401169, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/323", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 325, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011726686280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011727009598", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011740911313)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011697167528)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011727009598", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401173, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011739245340", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011740911313)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011697167528)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401173, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011739245340", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401173, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/319", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 327, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011758814220", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011759135820", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011767930538)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011740911313)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011759135820", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401176, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011766042540", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011767930538)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011740911313)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401176, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654011766042540", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401176, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/321", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 329, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011790917382", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011791242056", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011791226691)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011767930538)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011791242056", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/299", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 331, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011834635480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011834957368", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011848781332)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011791226692)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011834957368", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 331, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011834635480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011834957368", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011848781332)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011791226692)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011834957368", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 333, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011835244610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011835574277", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011848781332)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011791226692)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011835574277", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 333, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011835244610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011835574277", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011848781332)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011791226692)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011835574277", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401184, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011844097036", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011848781332)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011791226692)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401184, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011844097036", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401184, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401184, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011847860434", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011848781332)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011791226692)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401184, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011847860434", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401184, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/295", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 335, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011855195652", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011855523725", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011856135170)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011848781332)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011855523725", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 335, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011855195652", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011855523725", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011856135170)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011848781332)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011855523725", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 337, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011855808670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011856130406", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011856135170)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011848781332)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011856130406", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 337, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011855808670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011856130406", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011856135170)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011848781332)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011856130406", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/297", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 339, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011888888572", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011889210785", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011909433579)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011856135170)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011889210785", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 339, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011888888572", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011889210785", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011909433579)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011856135170)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011889210785", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 341, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011889489080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011889811912", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011909433579)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011856135170)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011889811912", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 341, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011889489080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011889811912", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011909433579)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011856135170)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011889811912", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401190, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011908297387", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011909433579)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011856135170)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401190, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011908297387", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401190, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/293", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401192, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011933205022", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011935193649)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011909433579)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401192, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011933205022", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401192, :state => nil, :occupancy => 1}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 343, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011934258712", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011934582858", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011935193649)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011909433579)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011934582858", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 343, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011934258712", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011934582858", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011935193649)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011909433579)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011934582858", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 345, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011934867232", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011935189435", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011935193649)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011909433579)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011935189435", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 345, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011934867232", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011935189435", :region_code => 12}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011935193649)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011909433579)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:subscribe)
        expect(envelopes[4].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011935189435", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/289", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 347, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011953272478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011953591844", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011967351781)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011935193649)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011953591844", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 347, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011953272478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011953591844", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011967351781)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011935193649)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011953591844", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 349, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011953884800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011954206746", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011967351781)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011935193649)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011954206746", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 349, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011953884800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011954206746", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011967351781)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011935193649)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011954206746", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401196, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011960414114", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011967351781)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011935193649)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401196, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011960414114", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401196, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401196, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011966504869", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654011967351781)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654011935193649)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401196, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011966504869", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401196, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/291", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 351, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011985465378", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011985787750", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654011993708540)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011967351781)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011985787750", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 351, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011985465378", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011985787750", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654011993708540)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011967351781)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011985787750", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 353, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011986077340", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011986402160", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654011993708540)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654011967351781)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011986402160", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 353, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654011986077340", :region_code => nil}, :publish_timetoken => {:timetoken => "14654011986402160", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654011993708540)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654011967351781)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654011986402160", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401199, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654011992854261", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654011993708540)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654011967351781)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401199, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654011992854261", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401199, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/305", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 355, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012017644238", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012017965977", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012030071070)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654011993708540)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012017965977", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401202, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012029142377", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012030071070)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654011993708540)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401202, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012029142377", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401202, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/301", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 357, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012049782130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012050100588", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012062493513)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012030071070)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012050100588", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401205, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012054570252", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012062493513)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012030071070)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401205, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012054570252", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401205, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401206, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012061656913", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012062493513)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012030071070)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401206, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012061656913", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401206, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/303", record: :none) do
        pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 359, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012081918170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012082249310", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012093884439)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012062493513)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012082249310", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012089055439", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012093884439)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012062493513)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012089055439", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401208, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401209, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012093438217", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012093884439)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012062493513)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401209, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012093438217", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401209, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/335", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 361, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012114066990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012114386303", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012129647736)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012082169919)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012114386303", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 361, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012114066990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012114386303", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012129647736)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012082169919)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012114386303", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 363, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012114673322", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012114991757", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012129647736)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012082169919)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012114991757", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 363, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012114673322", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012114991757", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012129647736)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012082169919)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012114991757", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401212, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012127343668", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012129647736)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012082169919)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401212, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012127343668", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401212, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/331", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 365, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012146237400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012146560880", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012158879446)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012129647736)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012146560880", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 365, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012146237400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012146560880", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012158879446)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012129647736)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012146560880", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 367, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012146852018", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012147173111", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012158879446)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012129647736)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012147173111", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 367, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012146852018", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012147173111", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012158879446)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012129647736)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012147173111", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012152100576", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012158879446)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012129647736)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012152100576", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401215, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012158340767", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012158879446)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012129647736)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012158340767", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401215, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/333", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 369, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012178418660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012178739312", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012192508578)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012158879446)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012178739312", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 369, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012178418660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012178739312", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012192508578)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012158879446)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012178739312", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 371, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012179033120", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012179353921", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012192508578)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012158879446)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012179353921", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 371, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012179033120", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012179353921", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012192508578)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012158879446)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012179353921", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401218, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012184366171", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012192508578)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012158879446)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401218, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012184366171", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401218, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401219, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012191559660", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012192508578)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012158879446)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401219, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012191559660", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401219, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/329", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 373, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012211064860", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012211385049", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012219143810)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012192508578)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012211385049", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 373, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012211064860", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012211385049", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012219143810)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012192508578)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012211385049", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 375, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012211676690", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012211999094", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012219143810)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012192508578)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012211999094", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 375, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012211676690", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012211999094", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012219143810)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012192508578)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012211999094", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012218323083", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012219143810)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012192508578)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012218323083", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401221, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/325", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 377, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012243174998", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012243496274", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012255812172)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012219143810)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012243496274", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 377, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012243174998", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012243496274", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012255812172)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012219143810)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012243496274", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 379, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012243801768", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012244122316", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012255812172)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012219143810)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012244122316", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 379, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012243801768", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012244122316", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012255812172)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012219143810)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012244122316", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401225, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012255365215", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012255812172)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012219143810)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401225, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012255365215", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401225, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/327", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 381, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012276903460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012277231025", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012289920472)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012255812172)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012277231025", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 381, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012276903460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012277231025", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012289920472)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012255812172)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012277231025", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 383, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012277521852", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012277847583", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012289920472)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012255812172)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012277847583", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 383, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012277521852", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012277847583", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012289920472)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012255812172)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012277847583", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012284538318", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012289920472)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012255812172)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012284538318", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401228, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012289013073", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012289920472)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012255812172)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012289013073", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401228, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/341", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 385, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012309065390", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012309393260", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012315359662)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012289920472)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012309393260", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401231, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012314711756", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012315359662)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012289920472)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401231, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012314711756", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401231, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/337", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 387, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012341192030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012341511409", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012355095373)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012315359662)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012341511409", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401235, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012353809735", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012355095373)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012315359662)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401235, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012353809735", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401235, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/339", record: :none) do
        pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 389, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012373367290", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012373688192", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012383764519)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012355095373)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012373688192", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401238, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012382328531", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012383764519)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012355095373)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401238, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654012382328531", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401238, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/281", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 391, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012405475522", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012405809204", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012405809204", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 391, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012405475522", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012405809204", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012405809204", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 393, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012406105358", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012406430495", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012406430495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 393, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012406105358", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012406430495", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012406430495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012412379261", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012412379261", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401241, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012412434494", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012412434494", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401241, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012413162305", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012413162305", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401241, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012418700715", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401241, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012418700715", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401241, :state => nil, :occupancy => 0}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401242, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012421826599", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401242, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012421826599", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401242, :state => nil, :occupancy => 0}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401242, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012426355402", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654012427210770)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654012373693233)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401242, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012426355402", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401242, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/277", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 395, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012437801988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012438122610", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012438122610", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 395, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012437801988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012438122610", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012438122610", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 397, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012438397372", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012438720271", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012438720271", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 397, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012438397372", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012438720271", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012438720271", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401244, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012444322501", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401244, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012444322501", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401244, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401244, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012447278573", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401244, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012447278573", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401244, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401245, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012450611228", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401245, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012450611228", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401245, :state => nil, :occupancy => 0}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401244, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012452006412", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401244, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012452006412", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401244, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401245, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012455243330", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654012455696064)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654012427210770)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401245, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012455243330", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401245, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/279", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 399, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012470050822", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012470373335", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012470373335", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 399, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012470050822", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012470373335", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012470373335", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 401, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012470659650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012470978248", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012470978248", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 401, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012470659650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012470978248", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012470978248", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401247, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012477206008", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401247, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012477206008", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401247, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401248, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012482133641", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401248, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012482133641", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401248, :state => nil, :occupancy => 0}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401248, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012484130540", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401248, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012484130540", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401248, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401248, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012485199190", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401248, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012485199190", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401248, :state => nil, :occupancy => 0}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401249, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012492136722", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401249, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012492136722", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401249, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401249, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012497357409", :region_code => 2}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654012497829373)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654012455696064)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401249, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012497357409", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401249, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/275", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 403, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012502252880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012502581788", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012502581788", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 403, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012502252880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012502581788", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012502581788", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 405, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012502883350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012503210477", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012503210477", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 405, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012502883350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012503210477", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012503210477", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401250, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012507586149", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401250, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012507586149", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401250, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401250, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012508308719", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401250, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012508308719", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401250, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401251, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012515417574", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401251, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012515417574", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401251, :state => nil, :occupancy => 0}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401251, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012519830899", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401251, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012519830899", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401251, :state => nil, :occupancy => 0}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401252, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012525935939", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401252, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012525935939", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401252, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401252, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012526715238", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654012527536485)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654012497829373)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401252, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012526715238", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401252, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/271", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 407, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012534535250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012534858626", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012534858626", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 407, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012534535250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012534858626", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012534858626", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401253, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012532752428", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401253, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012532752428", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401253, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 409, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012535141010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012535470627", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012535470627", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 409, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012535141010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012535470627", :region_code => 12}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:subscribe)
        expect(envelopes[4].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012535470627", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401254, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012546629966", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401254, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012546629966", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401254, :state => nil, :occupancy => 0}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401255, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012552409922", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654012554511768)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654012527536485)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401255, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012552409922", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401255, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/273", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 411, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012566772430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012567101073", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012567101073", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 411, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012566772430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012567101073", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012567101073", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 413, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012567377620", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012567698593", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012567698593", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 413, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012567377620", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012567698593", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012567698593", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401257, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012579547478", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401257, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012579547478", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401257, :state => nil, :occupancy => 0}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401257, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012580356628", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401257, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012580356628", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401257, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401259, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012594007315", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654012595106543)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654012554511768)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401259, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012594007315", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401259, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/287", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 415, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012598877240", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012599204336", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012625002995)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012595106543)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012599204336", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401260, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012600049268", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012625002995)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012595106543)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401260, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012600049268", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401260, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401261, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012618252910", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012625002995)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012595106543)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401261, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012618252910", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401261, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401261, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012624082242", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012625002995)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012595106543)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401261, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012624082242", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401261, :state => nil, :occupancy => 0}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/283", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401263, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012631160116", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012655767620)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012629984153)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401263, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012631160116", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401263, :state => nil, :occupancy => 1}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 417, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012632583702", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012632906630", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012655767620)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012629984153)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012632906630", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401264, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012649000129", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012655767620)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012629984153)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401264, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012649000129", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401264, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401264, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012649929288", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012655767620)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012629984153)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401264, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012649929288", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401264, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401265, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012655285744", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654012655767620)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012629984153)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401265, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012655285744", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401265, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/285", record: :none) do
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 419, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012664779388", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012665113060", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012683545110)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012655767620)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012665113060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401267, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012676324070", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012683545110)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012655767620)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401267, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654012676324070", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401267, :state => nil, :occupancy => 0}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401267, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012679362865", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012683545110)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012655767620)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401267, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654012679362865", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401267, :state => nil, :occupancy => 0}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401268, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654012683108049", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012683545110)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012655767620)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401268, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654012683108049", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401268, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/353", record: :none) do
        pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 421, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012696945002", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012697268986", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012697778998)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012665098652)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012697268986", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 421, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012696945002", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012697268986", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012697778998)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012665098652)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012697268986", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 423, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012697537780", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012697857798", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012697778998)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012665098652)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012697857798", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 423, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012697537780", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012697857798", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012697778998)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012665098652)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012697857798", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/349", record: :none) do
        pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 425, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012729202550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012729534409", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012730134614)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012697778998)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012729534409", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 425, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012729202550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012729534409", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012730134614)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012697778998)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012729534409", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 427, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012729821670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012730145446", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012730134614)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012697778998)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012730145446", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 427, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012729821670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012730145446", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012730134614)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012697778998)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012730145446", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/351", record: :none) do
        pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 429, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012761314890", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012761644925", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012762246738)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012730134614)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012761644925", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 429, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012761314890", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012761644925", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012762246738)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012730134614)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012761644925", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 431, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012761925492", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012762257087", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012762246738)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012730134614)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012762257087", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 431, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012761925492", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012762257087", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012762246738)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012730134614)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012762257087", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/347", record: :none) do
        pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 433, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012793374440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012793701242", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012794224029)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012762246738)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012793701242", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 433, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012793374440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012793701242", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012794224029)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012762246738)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012793701242", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 435, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012793976698", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012794302213", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012794224029)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012762246738)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012794302213", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 435, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012793976698", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012794302213", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012794224029)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012762246738)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012794302213", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/343", record: :none) do
        pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 437, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012830907030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012831234473", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012831923255)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012794388360)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012831234473", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 437, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012830907030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012831234473", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012831923255)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012794388360)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012831234473", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 439, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012831508898", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012831835901", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012831923255)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012794388360)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012831835901", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 439, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012831508898", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012831835901", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012831923255)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012794388360)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012831835901", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/345", record: :none) do
        pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 441, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012863259640", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012863579724", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012864285506)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012831923255)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012863579724", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 441, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012863259640", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012863579724", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654012864285506)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012831923255)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012863579724", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 443, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012863875990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012864200928", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654012864285506)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012831923255)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012864200928", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 443, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012863875990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012864200928", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654012864285506)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012831923255)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012864200928", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/359", record: :none) do
        pubnub.subscribe(channel: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 445, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012895542570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012895869813", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012895925500)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012864285505)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012895869813", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/355", record: :none) do
        pubnub.subscribe(channel: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 447, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012927846122", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012928169247", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012928253126)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012895925500)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012928169247", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/357", record: :none) do
        pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 449, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012960095370", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012960415389", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654012960500889)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012928253126)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012960415389", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/47", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 451, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012992368410", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012992688984", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013008492993)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654012960500889)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654012992688984", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 453, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012992963610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012993285436", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013008492993)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654012960500889)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654012993285436", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 455, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012993560400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012993885634", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013008492993)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654012960500889)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654012993885634", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 457, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654012994163088", :region_code => nil}, :publish_timetoken => {:timetoken => "14654012994484207", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013008492993)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654012960500889)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654012994484207", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401300, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013007472420", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013008492993)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654012960500889)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401300, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013007472420", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401300, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/43", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 459, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013024743270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013025069712", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013026931242)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013008492993)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013025069712", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 461, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013025336990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013025661088", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013026931242)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013008492993)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013025661088", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 463, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013025935832", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013026256947", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013026931242)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013008492993)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013026256947", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 465, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013026528770", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013026846387", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013026931242)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013008492993)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013026846387", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/45", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 467, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013057059588", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013057385286", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013070707681)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013026931242)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013057385286", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 469, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013057656550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013057978349", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013070707681)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013026931242)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013057978349", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 471, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013058253750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013058574767", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013070707681)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013026931242)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013058574767", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 473, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013058867462", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013059184748", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013070707681)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013026931242)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013059184748", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401306, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013062820718", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013070707681)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013026931242)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401306, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013062820718", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401306, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401307, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013070317393", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013070707681)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013026931242)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401307, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013070317393", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401307, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/41", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 475, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013089381142", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013089701178", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013103063679)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013070707681)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013089701178", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 477, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013089970220", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013090287569", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013103063679)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013070707681)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013090287569", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 479, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013090555400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013090872097", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013103063679)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013070707681)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013090872097", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 481, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013091146722", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013091472485", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013103063679)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013070707681)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013091472485", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401310, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013100243056", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013103063679)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013070707681)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401310, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013100243056", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401310, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401310, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013102670274", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013103063679)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013070707681)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401310, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013102670274", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401310, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/37", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 483, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013123874280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013124196139", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013148062360)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013103063679)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013124196139", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 485, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013124471738", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013124810118", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013148062360)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013103063679)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013124810118", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 487, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013125091750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013125413846", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013148062360)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013103063679)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013125413846", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 489, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013125690450", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013126021553", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013148062360)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013103063679)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013126021553", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401313, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013133189546", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013148062360)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013103063679)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401313, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013133189546", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401313, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401314, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013147670106", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013148062360)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013103063679)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401314, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013147670106", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401314, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/39", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 491, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013156381860", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013156701907", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013172360009)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013148062360)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013156701907", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 493, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013156982688", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013157305269", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013172360009)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013148062360)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013157305269", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 495, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013157597150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013157921954", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013172360009)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013148062360)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013157921954", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 497, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013158192958", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013158517577", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013172360009)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013148062360)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013158517577", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401316, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013163823597", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013172360009)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013148062360)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401316, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013163823597", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401316, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401317, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013170755181", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013172360009)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013148062360)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401317, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013170755181", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401317, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/53", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 499, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013188706880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013189029032", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013200116061)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013172360009)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013189029032", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 501, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013189292622", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013189615620", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013200116061)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013172360009)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013189615620", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 503, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013189887790", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013190209702", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013200116061)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013172360009)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013190209702", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401319, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013198143452", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013200116061)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013172360009)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401319, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013198143452", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401319, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/49", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 505, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013221058690", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013221388721", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013236893332)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013200116061)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013221388721", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 507, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013221664730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013221982651", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013236893332)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013200116061)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013221982651", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 509, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013222255390", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013222573774", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013236893332)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013200116061)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013222573774", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401323, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013234915959", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013236893332)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013200116061)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401323, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013234915959", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401323, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/51", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 511, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013253770658", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013254096471", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013268635013)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013236893332)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013254096471", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 513, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013254387068", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013254713703", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013268635013)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013236893332)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013254713703", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 515, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013254994838", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013255337349", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013268635013)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013236893332)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013255337349", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401326, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013264062860", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013268635013)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013236893332)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401326, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013264062860", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401326, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401326, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013267669633", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013268635013)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013236893332)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401326, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013267669633", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401326, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/29", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 517, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013286713410", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013287036336", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013287036336", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 519, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013287329578", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013287655091", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013287655091", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 521, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013287934580", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013288262475", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013288262475", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 523, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013288543140", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013288872610", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013288872610", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401329, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013297057039", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401329, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013297057039", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401329, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401329, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013297057039", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401329, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013297057039", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401329, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401330, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013301240189", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401330, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013301240189", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401330, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401330, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013301240189", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013302015735)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013255422984)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401330, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013301240189", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401330, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/25", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 525, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013324006920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013324329936", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013324329936", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 527, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013324616380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013324947450", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013324947450", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 529, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013325238560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013325561557", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013325561557", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 531, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013325849320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013326174654", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013326174654", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013333267233", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013333267233", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401333, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013333267233", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013333267233", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401333, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013338519261", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013338519261", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401333, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013338519261", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401333, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013338519261", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401333, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401334, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013341065773", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401334, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013341065773", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401334, :state => nil, :occupancy => 2}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401334, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013341065773", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654013341839806)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654013302015735)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401334, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013341065773", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401334, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/27", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 533, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013356453300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013356778472", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013370768653)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013341839806)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013356778472", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 535, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013357055160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013357378459", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013370768653)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013341839806)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013357378459", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 537, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013357661250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013357986226", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013370768653)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013341839806)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013357986226", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 539, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013358274400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013358591743", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013370768653)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013341839806)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013358591743", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401336, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013370060341", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013370768653)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013341839806)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401336, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013370060341", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401336, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401336, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013370060341", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013370768653)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013341839806)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401336, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013370060341", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401336, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/23", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 541, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013389148450", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013389481070", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013389481070", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 543, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013389775420", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013390101959", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013390101959", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 545, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013390514100", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013390836858", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013390836858", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 547, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013391130062", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013391458446", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013391458446", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401339, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013399698588", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401339, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013399698588", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401339, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401339, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013399698588", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401339, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013399698588", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401339, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401340, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013402630915", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401340, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013402630915", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401340, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401340, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013402630915", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013403023356)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013370768653)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401340, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013402630915", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401340, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/19", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 549, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013421973200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013422294756", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013422294756", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 551, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013422590962", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013422913786", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013422913786", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 553, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013423622730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013423945634", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013423945634", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 555, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013424422478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013424749934", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013424749934", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013430360065", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013430360065", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401343, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013430360065", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013430360065", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401343, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013435981867", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013435981867", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401343, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013435981867", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013436374268)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013403023356)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401343, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013435981867", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401343, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/21", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 557, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013454330922", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013454649827", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013454649827", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 559, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013454918442", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013455240666", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013455240666", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 561, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013455513192", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013455832541", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013455832541", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 563, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013456101520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013456423897", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013456423897", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013462263223", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013462263223", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401346, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013462263223", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013462263223", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401346, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013468721062", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013468721062", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401346, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013468721062", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013469466513)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013436374268)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401346, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013468721062", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401346, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/35", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 565, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013486624770", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013486944485", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013486944485", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 567, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013487227900", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013487547393", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013487547393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 569, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013487827800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013488152560", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013488152560", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013495642337", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013495642337", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401349, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013495642337", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013495642337", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401349, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013499362001", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013499362001", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401349, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013499362001", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013499754296)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013469466513)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401349, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013499362001", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401349, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/31", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 571, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013518959392", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013519281132", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013519281132", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 573, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013519561658", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013519881709", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013519881709", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 575, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013520227918", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013520546886", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013520546886", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401352, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013525549612", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401352, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013525549612", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401352, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401352, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013525549612", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401352, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013525549612", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401352, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013532721734", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013532721734", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401353, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013532721734", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013532721734", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401353, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013533679027", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013533679027", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401353, :state => nil, :occupancy => 2}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013533679027", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654013535415683)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654013499754296)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401353, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013533679027", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401353, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/33", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 577, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013551486750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013551807613", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013566520060)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013535415683)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013551807613", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 579, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013552078590", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013552396501", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013566520060)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013535415683)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013552396501", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 581, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013552671658", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013552990028", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013566520060)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013535415683)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013552990028", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401356, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013565283176", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013566520060)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013535415683)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401356, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013565283176", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401356, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401356, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013565283176", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013566520060)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013535415683)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401356, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013565283176", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401356, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/65", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 583, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013583781572", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013584111608", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013597749374)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013566520059)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013584111608", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 585, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013584376278", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013584698680", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013597749374)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013566520059)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013584698680", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 587, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013584972470", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013585296575", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013597749374)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013566520059)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013585296575", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 589, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013585570250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013585888115", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013597749374)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013566520059)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013585888115", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013597033294", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013597749374)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013566520059)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013597033294", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401359, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/61", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 591, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013616110290", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013616434783", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013631263724)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013597749374)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013616434783", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 593, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013616709618", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013617032962", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013631263724)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013597749374)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013617032962", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 595, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013617303600", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013617624065", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013631263724)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013597749374)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013617624065", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 597, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013617895848", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013618218761", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013631263724)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013597749374)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013618218761", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401362, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013621798199", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013631263724)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013597749374)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401362, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013621798199", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401362, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401363, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013630487474", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013631263724)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013597749374)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401363, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013630487474", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401363, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/63", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 599, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013648485330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013648805547", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013665929181)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013631263724)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013648805547", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 601, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013649086342", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013649406497", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013665929181)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013631263724)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013649406497", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 603, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013649686880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013650004227", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013665929181)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013631263724)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013650004227", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 605, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013650282030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013650607653", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013665929181)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013631263724)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013650607653", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401365, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013655898683", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013665929181)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013631263724)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401365, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013655898683", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401365, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401366, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013664459609", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013665929181)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013631263724)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401366, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013664459609", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401366, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/59", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 607, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013680839470", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013681160343", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013688960003)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013665929181)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013681160343", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 609, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013681441810", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013681763260", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013688960003)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013665929181)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013681763260", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 611, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013682045910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013682366043", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013688960003)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013665929181)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013682366043", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 613, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013682638070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013682967375", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013688960003)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013665929181)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013682967375", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401368, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013688596031", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013688960003)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013665929181)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401368, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013688596031", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401368, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/55", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 615, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013713192510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013713515309", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013727625364)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013688960003)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013713515309", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 617, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013713790520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013714108883", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013727625364)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013688960003)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013714108883", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 619, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013714383472", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013714702565", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013727625364)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013688960003)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013714702565", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 621, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013714975582", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013715294331", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013727625364)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013688960003)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013715294331", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013727233060", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013727625364)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013688960003)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013727233060", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401372, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/57", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 623, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013745541940", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013745866769", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013762416171)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013727625364)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013745866769", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 625, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013746142920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013746461788", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013762416171)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013727625364)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013746461788", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 627, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013746740338", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013747058147", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013762416171)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013727625364)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013747058147", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 629, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013747344250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013747663316", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013762416171)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013727625364)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013747663316", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013751406261", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013762416171)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013727625364)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013751406261", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401375, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013760992509", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013762416171)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013727625364)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013760992509", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401376, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/71", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 631, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013778369128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013778694282", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013787359038)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013762416171)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013778694282", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 633, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013778969430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013779292082", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013787359038)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013762416171)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013779292082", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 635, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013779578200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013779902523", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013787359038)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013762416171)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013779902523", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401378, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013786583644", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013787359038)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013762416171)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401378, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013786583644", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401378, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/67", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 637, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013810747170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013811081656", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013825285102)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013787359038)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013811081656", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 639, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013811363650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013811682337", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013825285102)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013787359038)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013811682337", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 641, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013811965498", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013812284875", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013825285102)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013787359038)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013812284875", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013824574417", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013825285102)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013787359038)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013824574417", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401382, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/69", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 643, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013849871870", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013850193772", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013864565343)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013825285102)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013850193772", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 645, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013850488630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013850810338", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013864565343)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013825285102)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013850810338", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 647, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013851104950", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013851427199", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013864565343)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013825285102)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013851427199", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401385, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013859573485", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013864565343)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013825285102)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401385, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013859573485", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401385, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401386, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013863809903", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013864565343)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013825285102)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401386, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654013863809903", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401386, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/11", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 653, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013883508540", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013883828702", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013883828702", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013898609931", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013898609931", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401389, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401390, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013901599751", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401390, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013901599751", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401390, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013898609931", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013898609931", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401389, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401390, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013901599751", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401390, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013901599751", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401390, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 649, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013882287910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013882615622", :region_code => 12}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:subscribe)
        expect(envelopes[5].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013882615622", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013898539640", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654013898539640", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401389, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 651, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013882902138", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013883226092", :region_code => 12}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:subscribe)
        expect(envelopes[7].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013883226092", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013897888097", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013897888097", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401389, :state => nil, :occupancy => 2}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013899665771", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401389, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013899665771", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401389, :state => nil, :occupancy => 1}})

        expect(envelopes[10].status[:code]).to eq(200)
        expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 655, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013884120472", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013884440867", :region_code => 12}})
        expect(envelopes[10].status[:category]).to eq(:ack)
        expect(envelopes[10].status[:auto_retried]).to eq(true)
        expect(envelopes[10].status[:current_timetoken]).to eq(14654013901994596)
        expect(envelopes[10].status[:last_timetoken]).to eq(14654013880913487)
        expect(envelopes[10].status[:subscribed_channels]).to eq([])
        expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[10].result[:code]).to eq(200)
        expect(envelopes[10].result[:operation]).to eq(:subscribe)
        expect(envelopes[10].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013884440867", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/7", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 657, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013914949700", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013915270097", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013915270097", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 659, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013915552918", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013915875497", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013915875497", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 661, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013916160020", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013916487592", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013916487592", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 663, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013916773892", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013917092806", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013917092806", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013922016381", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013922016381", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401392, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013922641762", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013922641762", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401392, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013922641762", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013922641762", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401392, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013929339529", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401392, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654013929339529", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401392, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013932063233", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013932063233", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401393, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013932521504", :region_code => 2}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013932521504", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401393, :state => nil, :occupancy => 2}})

        expect(envelopes[10].status[:code]).to eq(200)
        expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013937112121", :region_code => 1}})
        expect(envelopes[10].status[:category]).to eq(:ack)
        expect(envelopes[10].status[:auto_retried]).to eq(true)
        expect(envelopes[10].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[10].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[10].status[:subscribed_channels]).to eq([])
        expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[10].result[:code]).to eq(200)
        expect(envelopes[10].result[:operation]).to eq(:presence)
        expect(envelopes[10].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013937112121", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401393, :state => nil, :occupancy => 1}})

        expect(envelopes[11].status[:code]).to eq(200)
        expect(envelopes[11].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013937112121", :region_code => 1}})
        expect(envelopes[11].status[:category]).to eq(:ack)
        expect(envelopes[11].status[:auto_retried]).to eq(true)
        expect(envelopes[11].status[:current_timetoken]).to eq(14654013937884476)
        expect(envelopes[11].status[:last_timetoken]).to eq(14654013901994596)
        expect(envelopes[11].status[:subscribed_channels]).to eq([])
        expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[11].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[11].result[:code]).to eq(200)
        expect(envelopes[11].result[:operation]).to eq(:presence)
        expect(envelopes[11].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401393, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013937112121", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401393, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/9", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 665, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013947599640", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013947935997", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013947935997", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 667, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013948222180", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013948545672", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013948545672", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401394, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013947508172", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401394, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654013947508172", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401394, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 669, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013948829010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013949156001", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013949156001", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 671, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013949441040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013949760798", :region_code => 12}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:subscribe)
        expect(envelopes[4].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013949760798", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401395, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013953764576", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401395, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013953764576", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401395, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401395, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013953764576", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401395, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013953764576", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401395, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401396, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013961644453", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401396, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013961644453", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401396, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401396, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013966738862", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401396, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013966738862", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401396, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401396, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013966738862", :region_code => 2}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654013967131509)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654013937884476)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401396, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013966738862", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401396, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/5", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 673, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013979993480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013980316396", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654013980316396", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 675, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013980603010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013980924548", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654013980924548", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 677, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013981207490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013981528871", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654013981528871", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 679, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654013981812632", :region_code => nil}, :publish_timetoken => {:timetoken => "14654013982134478", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654013982134478", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401398, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013986806645", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401398, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013986806645", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401398, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401398, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013986806645", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401398, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654013986806645", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401398, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401398, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013987465706", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401398, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013987465706", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401398, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401399, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013994508919", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401399, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654013994508919", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401399, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401399, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013997418017", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401399, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013997418017", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401399, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401399, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654013998506931", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401399, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654013998506931", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401399, :state => nil, :occupancy => 2}})

        expect(envelopes[10].status[:code]).to eq(200)
        expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401400, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014002274764", :region_code => 1}})
        expect(envelopes[10].status[:category]).to eq(:ack)
        expect(envelopes[10].status[:auto_retried]).to eq(true)
        expect(envelopes[10].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[10].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[10].status[:subscribed_channels]).to eq([])
        expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[10].result[:code]).to eq(200)
        expect(envelopes[10].result[:operation]).to eq(:presence)
        expect(envelopes[10].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401400, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014002274764", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401400, :state => nil, :occupancy => 1}})

        expect(envelopes[11].status[:code]).to eq(200)
        expect(envelopes[11].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401400, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014002274764", :region_code => 1}})
        expect(envelopes[11].status[:category]).to eq(:ack)
        expect(envelopes[11].status[:auto_retried]).to eq(true)
        expect(envelopes[11].status[:current_timetoken]).to eq(14654014003049792)
        expect(envelopes[11].status[:last_timetoken]).to eq(14654013967131509)
        expect(envelopes[11].status[:subscribed_channels]).to eq([])
        expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[11].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[11].result[:code]).to eq(200)
        expect(envelopes[11].result[:operation]).to eq(:presence)
        expect(envelopes[11].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401400, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014002274764", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401400, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/1", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401401, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014011806945", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401401, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014011806945", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401401, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 681, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014012803462", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014013133426", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014013133426", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 683, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014013410308", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014013728750", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014013728750", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 685, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014014006788", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014014326981", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014014326981", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 687, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014014591820", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014014911546", :region_code => 12}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:subscribe)
        expect(envelopes[4].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014014911546", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401402, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014023287600", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401402, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014023287600", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401402, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401402, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014023287600", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401402, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014023287600", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401402, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401402, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014028016724", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401402, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014028016724", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401402, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014031069490", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014031069490", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401403, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014031069490", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014031069490", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401403, :state => nil, :occupancy => 1}})

        expect(envelopes[10].status[:code]).to eq(200)
        expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014032176278", :region_code => 1}})
        expect(envelopes[10].status[:category]).to eq(:ack)
        expect(envelopes[10].status[:auto_retried]).to eq(true)
        expect(envelopes[10].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[10].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[10].status[:subscribed_channels]).to eq([])
        expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[10].result[:code]).to eq(200)
        expect(envelopes[10].result[:operation]).to eq(:presence)
        expect(envelopes[10].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014032176278", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401403, :state => nil, :occupancy => 2}})

        expect(envelopes[11].status[:code]).to eq(200)
        expect(envelopes[11].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014032176278", :region_code => 1}})
        expect(envelopes[11].status[:category]).to eq(:ack)
        expect(envelopes[11].status[:auto_retried]).to eq(true)
        expect(envelopes[11].status[:current_timetoken]).to eq(14654014032949861)
        expect(envelopes[11].status[:last_timetoken]).to eq(14654014003049792)
        expect(envelopes[11].status[:subscribed_channels]).to eq([])
        expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[11].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[11].result[:code]).to eq(200)
        expect(envelopes[11].result[:operation]).to eq(:presence)
        expect(envelopes[11].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401403, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014032176278", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401403, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/3", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 689, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014045286632", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014045608872", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014045608872", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 691, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014045893590", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014046213751", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014046213751", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 693, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014046485550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014046807370", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014046807370", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 695, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014047095292", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014047419902", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014047419902", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401405, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014055567433", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401405, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014055567433", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401405, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401405, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014059775565", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401405, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014059775565", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401405, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014063560768", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014063560768", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401406, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014066597633", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014066597633", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401406, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014066597633", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014066597633", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401406, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014067465014", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014067465014", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401406, :state => nil, :occupancy => 2}})

        expect(envelopes[10].status[:code]).to eq(200)
        expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014067465014", :region_code => 1}})
        expect(envelopes[10].status[:category]).to eq(:ack)
        expect(envelopes[10].status[:auto_retried]).to eq(true)
        expect(envelopes[10].status[:current_timetoken]).to eq(14654014069546867)
        expect(envelopes[10].status[:last_timetoken]).to eq(14654014032949861)
        expect(envelopes[10].status[:subscribed_channels]).to eq([])
        expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[10].result[:code]).to eq(200)
        expect(envelopes[10].result[:operation]).to eq(:presence)
        expect(envelopes[10].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401406, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014067465014", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401406, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/17", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 701, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014078903072", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014079222820", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014079222820", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401409, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014093971052", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401409, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014093971052", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401409, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401409, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014093971052", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401409, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014093971052", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401409, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 697, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014077654678", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014077982507", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014077982507", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401408, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014086408555", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401408, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014086408555", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401408, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401409, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014090416885", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401409, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014090416885", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401409, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 699, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014078270158", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014078603674", :region_code => 12}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:subscribe)
        expect(envelopes[6].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014078603674", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401408, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014085670300", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654014094364149)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654014076286995)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401408, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014085670300", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401408, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/13", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 703, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014117134268", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014117455965", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014117455965", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 705, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014117744170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014118068545", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014118068545", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 707, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014118360642", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014118689473", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014118689473", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401412, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014125723136", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401412, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014125723136", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401412, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401412, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014125772772", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401412, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014125772772", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401412, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401412, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014125772772", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401412, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014125772772", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401412, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014131046884", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014131046884", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401413, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014133806837", :region_code => 2}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014133806837", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401413, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014133929432", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014133929432", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401413, :state => nil, :occupancy => 2}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014138543333", :region_code => 1}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014138543333", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401413, :state => nil, :occupancy => 1}})

        expect(envelopes[10].status[:code]).to eq(200)
        expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014138543333", :region_code => 1}})
        expect(envelopes[10].status[:category]).to eq(:ack)
        expect(envelopes[10].status[:auto_retried]).to eq(true)
        expect(envelopes[10].status[:current_timetoken]).to eq(14654014140555669)
        expect(envelopes[10].status[:last_timetoken]).to eq(14654014094364149)
        expect(envelopes[10].status[:subscribed_channels]).to eq([])
        expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[10].result[:code]).to eq(200)
        expect(envelopes[10].result[:operation]).to eq(:presence)
        expect(envelopes[10].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401413, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014138543333", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401413, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/15", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 709, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014149619960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014149940970", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014149940970", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 711, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014150227342", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014150555216", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014150555216", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 713, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014150843060", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014151248843", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014151248843", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014160111970", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654014160111970", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401416, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014161125310", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014161125310", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401416, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014161125310", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014161125310", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401416, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014163146849", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654014163615238)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654014140555669)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401416, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654014163146849", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401416, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/83", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 719, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014183216660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014183536836", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014184211113)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014180623513)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014183536836", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 715, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014181993930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014182317130", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014184211113)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014180623513)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014182317130", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 717, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014182612300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014182933819", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014184211113)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014180623513)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014182933819", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 721, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014183806940", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014184125703", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014184211113)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014180623513)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014184125703", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/79", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 723, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014214364070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014214685884", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014216602737)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014184211113)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014214685884", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 725, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014214971380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014215295542", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014216602737)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014184211113)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014215295542", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 727, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014215582778", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014215903286", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014216602737)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014184211113)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014215903286", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 729, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014216189650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014216517746", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014216602737)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014184211113)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014216517746", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/81", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 731, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014246735320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014247055459", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014248929388)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014216602737)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014247055459", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 733, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014247336680", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014247657633", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014248929388)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014216602737)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014247657633", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 735, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014247944488", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014248266396", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014248929388)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014216602737)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014248266396", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 737, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014248552750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014248872868", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014248929388)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014216602737)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014248872868", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/77", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 739, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014279141882", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014279463232", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014281390255)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014248929388)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014279463232", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 741, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014279755430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014280084888", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014281390255)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014248929388)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014280084888", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 743, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014280371520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014280694724", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014281390255)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014248929388)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014280694724", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 745, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014280982800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014281304691", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014281390255)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014248929388)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014281304691", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/73", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 747, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014311489930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014311808929", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014313716856)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014281390255)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014311808929", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 749, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014312095912", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014312416476", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014313716856)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014281390255)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014312416476", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 751, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014312703390", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014313028437", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014313716856)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014281390255)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014313028437", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 753, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014313309040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014313631535", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014313716856)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014281390255)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014313631535", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/75", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 755, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014343846972", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014344182746", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014346832916)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014313716856)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014344182746", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 757, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014344468110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014345532530", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014346832916)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014313716856)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014345532530", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 759, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014345818088", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014346138251", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014346832916)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014313716856)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014346138251", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 761, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014346428202", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014346749609", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014346832916)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014313716856)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014346749609", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/89", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 763, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014376171300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014376490334", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014377764154)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014346222410)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014376490334", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 765, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014376774772", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014377103838", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014377764154)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014346222410)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014377103838", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 767, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014377377720", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014377699362", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014377764154)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014346222410)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014377699362", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/85", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 769, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014410078468", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014410397614", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014411700191)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014377764154)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014410397614", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 771, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014410683000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014411005224", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014411700191)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014377764154)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014411005224", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 773, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014411292300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014411614875", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014411700191)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014377764154)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014411614875", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/87", record: :none) do
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 775, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014446931222", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014447251328", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014448560455)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014411700191)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654014447251328", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 777, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014447533948", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014447858880", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014448560455)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014411700191)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654014447858880", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 779, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014448151382", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014448475627", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014448560455)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014411700191)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654014448475627", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/407", record: :none) do
        pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 781, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014479285938", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014479606460", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014493414244)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014346832916)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014479606460", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401449, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014492639682", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014493414244)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014346832916)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401449, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014492639682", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401449, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/403", record: :none) do
        pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 783, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014511676640", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014511995782", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014523644536)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014493414244)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014511995782", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401451, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014518780371", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014523644536)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014493414244)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401451, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014518780371", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401451, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401452, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014523254496", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014523644536)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014493414244)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401452, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014523254496", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401452, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/405", record: :none) do
        pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 785, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014544536908", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014544860041", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014556451411)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014523644536)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014544860041", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401455, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014550558090", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014556451411)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014523644536)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401455, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014550558090", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401455, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401455, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014556057730", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014556451411)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014523644536)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401455, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014556057730", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401455, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/401", record: :none) do
        pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 787, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014576765398", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014577086581", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014588668761)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014556521384)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014577086581", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401458, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014583519699", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014588668761)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014556521384)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401458, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014583519699", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401458, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401458, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014588229665", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014588668761)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014556521384)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401458, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014588229665", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401458, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/397", record: :none) do
        pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 789, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014608943210", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014609265148", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014620908167)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014588668761)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014609265148", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401461, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014616174182", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014620908167)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014588668761)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401461, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014616174182", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401461, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401462, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014620452897", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014620908167)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014588668761)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401462, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014620452897", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401462, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/399", record: :none) do
        pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 791, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014641080530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014641409099", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014653139427)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014620908167)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014641409099", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401464, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014648852359", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014653139427)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014620908167)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401464, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014648852359", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401464, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401465, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014652655287", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014653139427)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014620908167)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401465, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014652655287", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401465, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/413", record: :none) do
        pubnub.subscribe(presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465401468, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014682111332", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014682884926)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014653139427)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401468, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014682111332", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401468, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/409", record: :none) do
        pubnub.subscribe(presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401471, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014716171953", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014716613318)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014682884926)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401471, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014716171953", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401471, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/411", record: :none) do
        pubnub.subscribe(presence: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465401474, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014742440386", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014750223741)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014716613318)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401474, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014742440386", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401474, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401474, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014749369985", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014750223741)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014716613318)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401474, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654014749369985", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401474, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/389", record: :none) do
        pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401478, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014780856651", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014781303099)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014768082110)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401478, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014780856651", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401478, :state => nil, :occupancy => 1}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 793, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014769391400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014769716564", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014781303099)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014768082110)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014769716564", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/385", record: :none) do
        pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 795, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014803063490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014803384135", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014816784729)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014781303099)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014803384135", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401480, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014809079522", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014816784729)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014781303099)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401480, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014809079522", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401480, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401481, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014816019230", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014816784729)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014781303099)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401481, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014816019230", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401481, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/387", record: :none) do
        pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 797, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014835206608", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014835525797", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014847159486)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014816784729)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014835525797", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401484, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014844280212", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014847159486)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014816784729)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401484, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014844280212", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401484, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401484, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014846675009", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014847159486)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014816784729)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401484, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014846675009", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401484, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/383", record: :none) do
        pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 799, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014867386580", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014867715911", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014882913608)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014847159486)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014867715911", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401487, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014873099850", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014882913608)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014847159486)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401487, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014873099850", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401487, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401487, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014879976715", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654014882913608)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654014847159486)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401487, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014879976715", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401487, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401488, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014881064447", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654014882913608)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654014847159486)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401488, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014881064447", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401488, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/379", record: :none) do
        pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 801, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014899567480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014899892352", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014899895984)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014882913608)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014899892352", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/381", record: :none) do
        pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 803, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654014931672198", :region_code => nil}, :publish_timetoken => {:timetoken => "14654014931997717", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014944445943)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014899895984)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654014931997717", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401494, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014943522062", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014944445943)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014899895984)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401494, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014943522062", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401494, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/395", record: :none) do
        pubnub.subscribe(presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo.*", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465401497, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014970736098", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654014975133404)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014944445943)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401497, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014970736098", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401497, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401497, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654014974678833", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654014975133404)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014944445943)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401497, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654014974678833", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401497, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/391", record: :none) do
        pubnub.subscribe(presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(presence: "demo.*", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465401500, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015001626827", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015009334397)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014975133404)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401500, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015001626827", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401500, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401500, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015007813357", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015009334397)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014975133404)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401500, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015007813357", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401500, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/393", record: :none) do
        pubnub.subscribe(presence: "demo.*", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: "demo.*", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465401503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015036092426", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015039793156)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015009334397)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015036092426", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401503, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015039324618", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015039793156)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015009334397)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015039324618", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401503, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: "demo.*", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/425", record: :none) do
        pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 805, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015060594208", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015060916608", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015072585871)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654014931920583)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015060916608", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401507, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015072102194", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015072585871)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654014931920583)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401507, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015072102194", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401507, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/421", record: :none) do
        pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 807, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015092758960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015093083507", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015106315224)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015072585871)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015093083507", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015096823711", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015106315224)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015072585871)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015096823711", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401509, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401510, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015105391413", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015106315224)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015072585871)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401510, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015105391413", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401510, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/423", record: :none) do
        pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 809, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015124915710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015125237367", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015137512852)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015106315224)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015125237367", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015130863913", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015137512852)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015106315224)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015130863913", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401513, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015136663046", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015137512852)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015106315224)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015136663046", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401513, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/419", record: :none) do
        pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 811, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015157057530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015157385637", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015169008844)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015137512852)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015157385637", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015162343585", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015169008844)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015137512852)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015162343585", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401516, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015168535964", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015169008844)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015137512852)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015168535964", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401516, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/415", record: :none) do
        pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 813, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015189244210", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015189574214", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015204152098)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015169008844)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015189574214", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401519, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015194247863", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015204152098)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015169008844)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401519, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015194247863", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401519, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015201857257", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015204152098)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015169008844)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015201857257", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401520, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/417", record: :none) do
        pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 815, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015221339982", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015221668837", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015229268074)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015204152098)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015221668837", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465401522, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015228414236", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015229268074)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015204152098)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401522, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015228414236", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401522, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/431", record: :none) do
        pubnub.subscribe(presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401526, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015267070920", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015268058454)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015229268074)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401526, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015267070920", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401526, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/427", record: :none) do
        pubnub.subscribe(presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465401529, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015294515511", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015294901390)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015268058454)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401529, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015294515511", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401529, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/429", record: :none) do
        pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465401533, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015331326547", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015332175028)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015294901390)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401533, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654015331326547", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401533, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/371", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401535, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015357621355", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015371018449)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015350131755)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401535, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015357621355", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401535, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401537, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015370173222", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015371018449)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015350131755)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401537, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015370173222", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401537, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401536, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015362974886", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015371018449)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015350131755)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401536, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015362974886", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401536, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401536, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015363724753", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015371018449)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015350131755)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401536, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015363724753", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401536, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401536, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015367117735", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654015371018449)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654015350131755)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401536, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015367117735", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401536, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 817, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015351458530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015351777713", :region_code => 12}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654015371018449)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654015350131755)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:subscribe)
        expect(envelopes[5].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015351777713", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/367", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 819, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015383712692", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015384033959", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015397892101)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015371018449)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015384033959", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401539, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015391991823", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015397892101)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015371018449)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401539, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015391991823", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401539, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401539, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015392714557", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015397892101)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015371018449)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401539, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015392714557", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401539, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401539, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015397026916", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015397892101)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015371018449)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401539, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015397026916", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401539, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/369", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 821, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015415921220", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015416242756", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015442083940)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015397892101)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015416242756", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401543, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015433433253", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015442083940)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015397892101)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401543, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015433433253", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401543, :state => nil, :occupancy => 1}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401543, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015433589431", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015442083940)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015397892101)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401543, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015433589431", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401543, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401543, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015439360606", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015442083940)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015397892101)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401543, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015439360606", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401543, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401544, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015441257316", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654015442083940)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654015397892101)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401544, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015441257316", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401544, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/365", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 823, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015448082090", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015448400748", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015466524002)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015442083940)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015448400748", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401545, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015455144489", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015466524002)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015442083940)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401545, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015455144489", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401545, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401546, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015460703749", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015466524002)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015442083940)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401546, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015460703749", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401546, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401546, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015462269303", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015466524002)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015442083940)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401546, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015462269303", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401546, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401546, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015466070130", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654015466524002)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654015442083940)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401546, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015466070130", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401546, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/361", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 825, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015480239330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015480567536", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015498860686)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015466524002)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015480567536", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401548, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015484538015", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015498860686)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015466524002)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401548, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015484538015", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401548, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401549, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015493548253", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015498860686)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015466524002)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401549, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015493548253", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401549, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401549, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015496656867", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015498860686)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015466524002)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401549, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015496656867", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401549, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/363", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 827, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015512415030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015512736727", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015531879055)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015498860686)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015512736727", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401551, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015519379379", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015531879055)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015498860686)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401551, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015519379379", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401551, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401552, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015520266923", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015531879055)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015498860686)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401552, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015520266923", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401552, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401552, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015523946935", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015531879055)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015498860686)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401552, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015523946935", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401552, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401552, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015528009004", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654015531879055)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654015498860686)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401552, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015528009004", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401552, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401553, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015531057372", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654015531879055)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654015498860686)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401553, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015531057372", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401553, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/377", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401554, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015549303532", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015559959819)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015531879055)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401554, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015549303532", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401554, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401554, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015549312742", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015559959819)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015531879055)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401554, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015549312742", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401554, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401555, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015550061589", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015559959819)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015531879055)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401555, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015550061589", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401555, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401555, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015555461779", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015559959819)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015531879055)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401555, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015555461779", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401555, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401555, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015559166546", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654015559959819)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654015531879055)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401555, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015559166546", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401555, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/373", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401558, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015587280060", :region_code => 2}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015602089887)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015559743373)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401558, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015587280060", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401558, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401558, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015587299644", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015602089887)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015559743373)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401558, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015587299644", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401558, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401559, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015593520300", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015602089887)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015559743373)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401559, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015593520300", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401559, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401559, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015598372058", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015602089887)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015559743373)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401559, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015598372058", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401559, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401560, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015601695322", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654015602089887)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654015559743373)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401560, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015601695322", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401560, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/375", record: :none) do
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015620751266", :region_code => 1}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015625161976)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015602089887)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:presence)
        expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654015620751266", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401562, :state => nil, :occupancy => 2}})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015621468144", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654015625161976)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654015602089887)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015621468144", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401562, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015621414647", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654015625161976)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654015602089887)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654015621414647", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401562, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654015624769973", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654015625161976)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654015602089887)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465401562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654015624769973", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465401562, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/443", record: :none) do
        pubnub.subscribe(channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 829, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015646219520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015646540219", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015646623352)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015512822383)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015646540219", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/439", record: :none) do
        pubnub.subscribe(channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 831, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015680548680", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015680870863", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015680957046)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015646623352)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015680870863", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/441", record: :none) do
        pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 833, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015712766412", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015713102914", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015713026108)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015680952314)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015713102914", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/437", record: :none) do
        pubnub.subscribe(channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 835, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015744927518", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015745249481", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015745172724)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015713026108)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015745249481", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/433", record: :none) do
        pubnub.subscribe(channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 837, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015777064418", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015777388583", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015777393063)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015745172724)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015777388583", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/435", record: :none) do
        pubnub.subscribe(channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 839, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654015809208140", :region_code => nil}, :publish_timetoken => {:timetoken => "14654015809529937", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654015809501035)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654015777393063)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654015809529937", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end
  end
end
