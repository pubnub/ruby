require 'spec_helper'

describe Pubnub::Publish do
  around :each do |example|
    Celluloid.boot

    @fired = false

    @callback = ->(_envelope) do
      @fired = true
    end

    @pubnub = Pubnub.new(
      publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
      subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
      uuid: 'ruby-test-uuid-client-one',
      auth_key: 'ruby-test-auth-client-one'
    )

    example.run
    Celluloid.shutdown
  end

  it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/684f0f197d4721ee1852c738c4a12881f38b27abc9d6e416d5294c9e58819815', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/01fc780f449cce3dcdc2a272f2918366488fb31505fae2f2bdda668f4756b433', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4668f44ecf5a00a9512a7364edf5e1f35aa63cf22d18f399e28bf7cf0aa80450', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/892bd795d8ae1efe874bbdff663042fa15dd94ed1e48021f67a9234001027f4a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/879fb9f9cb746526d965b54644d8e8d8893cc2ff6ea88cb5d334c1741bd31072', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/28b72fd158753b36f1a67143ac3410330f92d75def5de200e6c6f38ea1c3a180', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/62119002222af2a5e1db593fd1857f56eaab141d1743f4e553e5d00bbd3b7797', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/56acf60816552d317485da901820d45c89ff45ce2aa30dd33c8d6341f521945d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/b5fb40a690d3d5b6540b275258f37736f33e13cefbd546658b4b67a5aaef5f36', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/f3385731e9a68350da78f1a78c31f6d96aea398efcef29813ab0a147643eb779', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/548f0b2ce0c53403f2ba4b05e56b4558449bdaa56bdd5c5c7d2858450f0b7cac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b608f61ebd6e69a42d7c9253bf523cef46dd9bfcdf03c3c6460a131f3aedb8d6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/a41a27269e97fc556f84dd77455f1078ee35dee629b29a4b7631b30af7b576b8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/8a92efaf07a6f2f5379d5da12be722102cb777ef5e2b5893c2ce5068d19c2be0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/c278af9bed3dd8d0ef13651936d80f84ae228f0f76c2c052c9bfaa3fdade381f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6d535f34013d02263b81c3defb9b3a45b3ccc05ffbb2bde8a822775e789fe9ca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/ea24fac23362507f245a36fbbe151136652293f959d69733febba82a65b2dd7a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/a1b2c870c958ef01e6ff3bb14dce32b9fb09cd56f53d5baf5369b09d697a8dca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/fbd6da35e4e4cbd2459499fb288ff1ab1c33c50d9743bb81f18e8839de0384a6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/89c4d1b10c0f07bd2283c7acefbee19a10b93a64d4c128a49900af9294f3c652', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/12cb85ad862f721c93e42b8a16b4e616a7fd25490ef3046618a5d134c1cd23bb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/4e1d688c27a77d3c16d309f57d392f17c201a63749d84eaf3dfa7c57c27ff236', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9a4528171a58d64940d2349da37f137f3ad34372e89c19950684ce33fcd82da4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/1afccc4a816f2304569a570a2571e08f1a29647bf1d2d852a1438f049df68480', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6dabf387aea68c94ae997ebd7875225db31f64793f5e5f86ffdbf548d94dc220', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a4059c524a8cecd507822b3a836b1519c6b26b0a5c0c53198f70c03d463b2745', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/2bf32575bd836a8efdd98dcd2b435d5b3fbe13ef9e2b6f17d08ccde7691c1b48', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/e37946d5f703f8373cc5de2dec6644408ad694c0c3776e73a3e2adf2fbcfde63', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/35eb6c9f992717fb82e9bc0fabf9a00cd75f5c55b98a7320f1a508f55022e762', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/53079b8b42a64492f8e9882c4560ee98a34f27c140ea84c8d80fc7761c9e62a7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/852f4103b65eca123e10c63c08153b5babdc5e5e9c25aa34ab3aa893ff7936c8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9a1dd738dfe6121f667b7dd1e340cc691b57ec590930c2d8a5b0e120dfd14af1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/3493d714eec8d42f9e5ace19e4964c8ecddf8113108ef5fa19dab11c1df3fb61', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/54027dd95fd48b720ea89c03c817d42555f37e715441632d1bc9352154a327c1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/5a1e14b970fd553c85795ed787c8df00fefdcc6b849525ddec837ce55b346a21', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/70a440ac80c8677f0bc5c1ad0735b0565a9a967572eefd3c3b4554b414f0363e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/da881dad3152b7120f80e124fdd1d773a5534bf189bea1dd37f3065825f9f357', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/6a4c49be92c36a3631d9707986b0b536ffcdcc21ac6a51b911d2fd54fc62045e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4ed163e9c98e2dfe5460c1d17ccd20009084409043d64679eb6c4bb204cc5e79', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/a9ae43d92ff0a906ae5222a4013761223aea39793e5f79f5d863d08ed45ae56f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a0a770086ac56dffdd0dbe9e285133132fde3c634c784daaf5875189f5a0ba00', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/26b367310cde68879d964684df3aa720d0b5651faabffe8776e9f6d4f79d052c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/a879ca0c1b698081d0ccb2a642a2ff25742ba520eecdc739b3a51e2d1bc27a7e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3decd6d8efadd0a6c85701c93b79cde46873f91e8aee1d56a5cf6d65844c2316', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/65d3ac779be8d41dc9fce76ce658966d0476ae1e1e04e503c5ec0db32b466a54', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/8037af89592f8e71bada55f6f3afdd8208f6033f57dbffb5ab67ec006a016900', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/aaaf47c6ad9e441424821c7ad2b45337961701b5b34014dd62abe069b66020e8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/c0c459068b1664382ee22f2271650c5a77ed47d38c72ea62daff6523e03f1b41', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/f83586f9df4055700ccfa91f5afed4f29748b0c22c8818154395b15bd2cb9628', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/8d568eba027d17264fd80e174de72df9862f122bb4e87553fbc61d0813e691cf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f4ae2a97d86f183fe39164f87aabf089b8dc0b054eac758f18bbdf5647feb5a2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d54234c009d30b1712659433da7d9c39e47382d18e05e70e364592d3badd41bb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/d6224a70473626da86d34fed471d42d9cd1914a9549537a7429653efd0280722', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/80a6a9e01d41e9fc5cec03a2c3ce43366daad8d8651dc57778a893bb441c0142', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/a30905f491db7e5c4dcf7159e1517a56b1e37d6bbbe468c99e4269a5710c1fe7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/4f5ca1b27716ebfcf56b0a2b59e4ecffd54a11fcbe580025411479b2eb4e7cff', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/eedbbf0be182422eabbd4d87bad89b6886cc3e91a35a3b79f06808f9bd7d96e9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c411d0f2849c20220ed4dd9cefff16c25955a79a4bfa09851baf571e4282a11e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/13e4acb8b424f6f5fbdf928876fa962619124e7bb073b90980941b24fc97bd8a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/cf7262348df56975be1b4fc06b581e6e810bfc3daad3343d501f61b252d08e65', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/571787a08b1b877299750b32b718477957a6126113960ae83d3f490a93842c46', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/0e0080505f052b114601dcac7deab637cb5d05fcdf559ad8eb4c440da7eeff11', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/279d06098cd97151f9b7e9e37963b6a0a7f0554d9ba780e5cda50cafc8b0d36d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/798579ebfd00f6736b78ec53d19bdd2768094af5c91df4d185ab32ea24482546', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/d667d714836b22d2981b08f3040da90d46e278149bb3750bcf67ab1d7d1c6824', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/871294a5d8f7da6ead51e4d84d4ade7356add503eec02a7abb5296c3dc7444ac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/0ed4ce7a548283b649a618f28c663481f524f102fc193147e3a0436e766116cc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/669aa468db4ac4270cc3c76f3a2b56d70b99e800ba3f99ee647876c31517f0d3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/eea83a6b5f0d0e5f3263e0de264a710e70f787eb717d7b536b8e77013e139ac5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/f9c0a4dc8f959a3cbac0e9f41314c3fc1a8e2aeb9ca251da50a6d41fc17bd23c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/40be843a01bdc9becf55512096010e25224ec543059885dd889bb44f197da3eb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0f12a7e3e1580cf2034df12e87477d516d14424fb1c825cc5916b260167809e7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/59065b61575c739a5a4b7ddba155b8cacf1ae39188b4bbb6655e58f53b7c1101', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/0221b1a0f66818654adcd26afc23999127666070239f48a072ea280f211a3e39', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/e4375acf2f4184f488c61ea71d9b356b8d463181fbdd0a7ba43c5924116b63c5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6b323095545993213033b66a8cd032ba8b6c978b4976d545657ad3982c3bf3cf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/dc6687458e0878c05e325e85c23fa4381a3f06bfda31d346d4337c0033fbd8f1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/27ae1fa5e6ab3f0c67b2509d2ed291e00470a170d7b9088514664f76ec84c6b2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/dbba7fe3fd7eb489f120931a49c7791b64b9fbf048fbb0b372c2d037f64d312e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/ff6d2e8ca1eddf47daa3fb3d5324c7cc54348c4642465cfb255c0a268d85467e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/b658ad88fb7d9f9421dacccca635cfeaf44fca4c7334a91dd17a8dd03224ad3c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6baedc31bb2b63607e86b4f6515a17aa0950e062ad8c8a1cb3dbd46fa4c1f7e6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/144ba2d426db4899d49ebf5eb66cfad155e8ac17cc775d1afefbe2baf28c06e8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/2bfc09f246d0378b85b77f732bc45445e7d16753a9a37f5eff0be662ade3f49f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/b7394a666d5550cde442e4d55361d0568b5a0a5f1ea35a3a951b39490a9ef930', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9042dc2bc9fd72fb8b92215a4ae6798f2dc6b0f9a743c08e8ca5bf1ece808e5e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/0636c601460fc05fa2fdae88c6d4744ced15598a5b615c5bb3f0cafe9c21d948', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/48fc84960a00a97d937a5269a58da91757ebed131083fdb59f590ba2b381cef8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/03e1a70c462539d3c95e5dcc34bc60a6cc981815211367191275ba57beb79af1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0f661333c995d9df3a33ace0fe9958897826dcb2fa782561c24c58751c44b8fb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/32fe387a2862172e4a0f657ecf805ebae30ce0ff5cd77fbfd1633cd271fc2c75', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3f800be74b7b3adf43cadd7d2dd01a6335d478877f33612deb347655547c8732', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/6d71db7d8538eb3001349a76d20af46425e000c9eda665584350788c06ef0bcd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/348d9d8c2937fe5cbcb47b4ae48f85c4171eeabb1950102ae90d2e9eeb03ce1c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9fbaa9997c3773dab4918b1abf7f3badb86ff0a0cfa6428bf93ccf41a3b4f4e8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/c0e7647f24da5a0542fe1b5f1955ac7299c000f136778ed1fce8069d5ff38d66', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/4e339293fb899ec112f53d3701c077491d6276b34d33325be24df083372d6d73', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/cdf28e2a074f76649dd034d1c61dc9bc4dfbe4c6a9e2b1bcd85b1a533d34ce2d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/92193e1d55eb24ab7c20d161a7e575c96f775f79fee22acc67c3ffa7690e11c9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/2b007b33b30d4dec8ecd1d2d9ae870ab1c7a809166e574f19e7d494149a52539', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/3a23e663f621c3a6b01dfac138f39675a7449b1701c128e486a0a8a8450914af', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/9c7b328ac910c333164ad2c7c82c2cae404e61f75a55526050bf08789317b7b0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ec104313c3972927d8b74eea0da698e1b4b2e9d4ec02e7c05c9b4885d20dd811', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/53066735104cfb842add1fc34ed165b5206ab330fb58dc8efe0eae3cc1e32a97', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f085150d14310ba94aa4ec5c2cfa83eca32654833bd6a3084449e2ef4810715b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c8362ea7b9a3a2231ef941eeacfc4592ce4efa9cf02a4b885bb0288a450d7cb2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/315a119fc0109bc50143e01997cb84c055d1cd2ffa3bcb25a7c4839246d3ef22', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/4ca1d4e18da23f26ee2886dcd158a7d9d5330020a288d53a4f2cabe9897138ad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ec4ca921bb8a993bc3f82b469118b11ecb9655a558c87af58164ceaecd0e5176', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/36433602ccd561d0e6c3917123daa67b823a765dfdc7728045847f91f0cb5e3c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/0816b4da7c4625469004587ccd136b510ed85e35e08568350219213a35829269', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/11270f17669c18d6c43f3ee569d823626caf42a177907bbb99ab9d33157c5601', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/568220d289dc3178ba26ee95910e0af9fd45a8549a684a3cfdf579c819eb4e18', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/121a87df7b4f115e3a09e0471f71521f7af252f966300079d4857337d068a676', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/03caf1976160c3ce20554d4f25dd999ea79fc3075b18beab4fecc6928415a7f5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/0e523a8ce7e06083cb8b5bf5413a6cf277b9a87096eb54ab2c7623679ab916d4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/a723a8308edcc55f35f561822bfeda20f284ca1f823bdae48b2affd386b1260e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/80c30802ac714227a91dc78d7d196ab02e4768a602c5b127a2b6876309546144', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/072005f795cb0eb406206a253fe9992e5c7dc801ac91637c51d502c4c095c8ea', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/1d716f71ad99f349b4ac1c8fce53eb07c198f00f80ada9450dc1024eba08f78d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/dc0705b2e5131f2c9a7c65f1dcbaee19e514cd265b13fc17182f3508c6fe568e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/77e34f297b94e2c956a6eb60a888e7dbd4dc095389d7beca9e8b000855b2df68', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/9f9f0ee43aa63ef1ed49ca1add646c7ffd0f82d8f8971224e90556dfc21b65a3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/57f049b65895bb526834c5f12705e08e50efc9fd2e737c4d8ce38c21573b44f8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/426dff45519945f36183c475c4cb80cb945b7bc3c1b4cfcac43c5200058bf178', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b0d9ab35e230e3ae162ff541bc6aea60e6402b04e5168f352a78d2683c105a33', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/226ba5f4332e1c979c13dc9f0860d86206745a6ad2a9c7fa07c633c0f6948b5b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3a857a2a05536c7a8c609a74ccaeda0b4712cc0a77510786a47eebf34866b165', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/bc1557678c8b7ed91cef569fa6bf388806389e0ae6aee57e071d08b6fef2bcc5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6d72cf61be18376769f6645781deaf8794a1ed3a495d8073a7239fa5cf8b6132', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e39bb1460c48aa4407239fa7786e7782ab8142efa4683c95c83fcdad52f8f21f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/fd2c6bd000564d09369c71bc688f80250bcfd9ba1ecef72f0bff35c171bb6673', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/5b1e932aa8ee106f7b89a72ce699fdabbd6c4141c12c8a958de0f4a0f7042284', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/47abf18a43eed10d61dcf4e7e66900b5bdaa1b452b84c1d5181aaeaab9fb7b31', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/1edd6c236b9fca5c9f2a7798b389864b3fd7457809d7a6b24ba32dad6d111ee2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/14f62a50a700143595b5a57d0a4de038eb33f549ac9a097d5381dac53bc814a7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a8e926488bc79a4ec2fffbe217fd5c3be770a9db7708b3db780aaf9de3845105', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e9721d1404e27896c2513db55828dfde687a6de786eaf19ac320f08b36b88c89', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/40be757f060602e05a3d7d875bbfdf101c988712716caa72aa4da1a78efd04c6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/6443a5850cb435b017ae6f59aff2bf090a7c382d492a1f640afa8cd769ceff69', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/2761e7d3d8e181fb804308a2f62d205e8424540e9fd1b428d10b71ad909e5771', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/cfbd320a4fcc23d37df0e2260f72ffd92d760e42f0bf2dd0306482d7adfd1143', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/03d7730526cb449e261d25aa582e663d95de605c862bc906255cc7fa2915a2f7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/a901d56d19fdca83033ee75fa2f921dd85622c29376648bf4ad60d0eafed4aa2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/fa0d07445a0182c7d77f8af51363b0154c603af7464a497c098dec0ca16461c9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/e944217ad3898c53e491b7d4dbe0ba6784c81e1c0b677a6dba9d1e32e439d2a8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/59b307e43e1af234d7de10bb42c14d87f3ed1cb29011bbd9650218c7bdd0d61c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c19330409de07e440725e59ca36470d82dd606c40b71bf77b734a378ad4bb75f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e509e8de61573e7739167b6fb268340ace32b2db71f91653c697a307ffa7b2fe', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8e26afe1d60a10564475afe4970f508753b171bd0247f72913238ca10dfc0043', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ef425806e419646088a15e42cb890eaa2f48eff0fe5b8f0e21a2d9fe76ca28cb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/5ad9d1ba57b26c589abc97978b12bf5c880706f5a6fffabcfbf872f79ebec4ca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ea8e1b0427147673e3f5138b2f6096cb2d9e8b66303809b939f8fed0b4d4c796', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c490d414cac8278ca09a1a7c992cf637e252ddca68dd464f71a7f4dbb73381d6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/44c931610e22c22a1dead86e632ff2598467537d33ea28f353b9de983cd9a22e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/c9b772253b6ccaab3d13d7ac9c33348429f25b98eeb06f464171c0f6068ffb0b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/c47fce115c99d77ce1d056c9e3d8fbfd983c97425558ff78f9e71f2de6339fdd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/6eab76960dc8e19eba3f2ede64bb5846fe42239aa4f706362708d349225fbaf9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ab8fc09ccc8d8a04706063f58067f8fdb0c9550ec9bc8c8f1be011016813cb9a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d5bc2401cf0d882c85b7309c26d0215d12c8a896996adec8f65d9f340c800d21', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/c46610ab2ec67e567d1688fe6b9ab3cebcbb6ecd652812da0f36f9e6f23314ee', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/589269fd8872e7f7ca363ccb14b6bda48a83228cd50e006109ab7a16349032c5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/d3ac1a86db66e2683335f72e6b4bc611aeaa2aed82d4935bf6cd71f8e4760528', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3e4ccf8b53fc15b4fe6744df70d4ac6b84809dc024db80754c33d794f5ca8c44', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f95379409b2acc6fc0f262a3a46666bc82ecbcf5b53920509389533f82550579', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/a24022686464008e07953d92a4e017b897bcc9d1de6e8bd51a65dfd6704e7412', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/55d64cb9af28b80f066efb28b129ecde75495015a89c135da5841705a8e772af', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/846498661812b88151b5d59080405265832bd4d493327552bcf95eb08f620761', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/9603d9aeecbeee38dae50ab2caa45daebd347371d7a11e377c9dbf09f62bb3da', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3050527ee5a7e73dc343725621b1f6e193aa1ead3955f0e9d2a8f58cfb8285cf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/da2712700f71c0bb47b8a131366ce0c93c02d9cc463f7c7dc8eb2299567519a7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/42a3cada8ab08dcc914da7e7dbcba001fbca2da13ea31d5d609c48e25f507b3c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/c95ed9464544285f90968379309c2518ca6764aff6ab52a4c13feb4d3aa0b7f0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/786581128148b2f3f55e77c19ff71576080ff2307c4b53f0df6ffafb689a9fdc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/b804b9387be2284330d21cf109ab2255d199b6c9a089e9aa3ab2d9d4415cc8f6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/f6d491e1d819071b05842bc7c3aca01776168e3aa24640bc1c622d4b345cedec', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/169369081a2a7422e026cf62aab10a47258183951f68536891400c5c105d1f11', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/13974d1b406e11d401242ab264e7142c7cb9c6140d72136bd695c777ae8dcd15', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/0c81df5cdf238811413817916c07158334a83cf9d809a51477b4d2ea25ba4324', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/47d06c615007f6ad647416ae4db2c77f0fb288ab9efc45e026af33b4ef2633cb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ed194357a3c9b6dc40b46f0791491cf2a87d8189e97db47d8bcf982c1486a18b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/cdf0e222e5656aec5e082aee4352b921ba9e197d2cf88f6e3a95c1bc7b271a59', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4a24db64dcc922999a294e4471a0f4d590b57f9935a7f3822a8878ac78a1cb16', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/8d668b5dbcc9ede07674dfa197ab076ff9211865937e105fa214944712873a05', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/c0e28650126248defaaf09eb88b1f9b027da4407e938eab1f4a388de32f24108', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/84f452a1f0146d4249bca4fe9fc9ae7f1fb74a5999363fc02a5df67583cbe390', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/98d36cf17422f2f830b9c171e22999c0cdc107a2936e7d08aafe230d7792cdf8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3f696b875b4515f462c4566b99e34ed82b41b0c8ef83cc850b9c6fd9ca36d50e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/1aa7cb7d3e8c8061c860e7fc0dd0a83184423c64b526d9943929dfcd91b5af4f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/88fa7fa00572e4aaaf8072c1167615a11bdad17d84b1a300d5cc243e462ce37f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a6e5428a99d2fd789d60aa4077bd638b1af71f45c9f7cbe1316282904788c7a9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/554edea91965e11e35243dddda8e79aaa72f8178834325dd52eccbd20220c9d2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/5bb9940bfc71e82f08528bd7a44670890f8729c5281cb8bdd0697d3aaf14a22a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/4133972d60c94b8fee87597834fefbfe6d7a97be5cc92a07f15eb1bc31acbefa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5b6ddeeab176037683dddfa26aabf05c6f8134326ae8de817f0ce6cf03bbceb4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/b463674a322c3dd8c1a0de888a3ad22eacc54545c21724b79cca88ddb34d1200', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/5ad75757e7da4286e2e5f81a5f626e4fe364d3d2b8ff5b19bb94f6026e8e0aa3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/366862d6fbcb1f52ecc49dccff77f7a8086e57ec9cef496b99fcb3d39c0bb3c1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/e1c65b0cbb839d057d9371553983cd7c6cca057aaedbcf76604ce162c4cf1669', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3c61b32c1c2e636369223e4a12bf5ed33f093b4c6156c8f38cfbc47349ce5278', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4306faa33e02ca25564dc4be0b733db93fbd80f6490f3b83e1f8111bc154258c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/37e3df549b7ec0b385f5aef6cfe09716701c09299d7c0b6f03c6b89c793867df', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/290a2b6a3d803b8d49024bd9b0ff7f5ee3edde06dafd5cbd86e24a4abfafdcd5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/7361b5853f8920ef9958a004d7c2dc91ecfd3330e28c9f42be9075278f98e3a7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6099db0e3eb87d7add67d6ef721c98c3b1a51d4b6866675a0cc9b60ae12ce34e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/65ead3583ac52526cae15c4d2d1e03f0d914ebb4f08171f3c9407407c2677d18', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/9f898fef4f89a0100b37959978085366e166709f2e9809260c741e9d0c67a951', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/964a8c0768d832d46378c1b09d74fb4f3a47e1f40ed2586ec40cf3ecfb427abc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/5fb380653159903886a72588833e987cefa36cde662d60a477dd5aba78a9dd50', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/2b98fab7f1d9fb576302389e16f48d98da524517bfcf8a388e2110d6bc038d1f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/cdcb5e49743139406b34f6daa79c1e5dc28a385e68a5f52967ec8775b4287e37', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/2ebf9580784cc20036eab04935de1a85037e155343947cd39830afcc4edf0db6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5a32b5f57860941e6ec46ad6a2e7bc35288e3c564f52d89ba0cd4a8f85b2ea74', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/477c28daf379d0d55cde5e6f09e071e014d87415a8d0a60f1d06d28481cefcd0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/d0e92c77d5ec127a8b01d862f457f4fe944839f8073b303fe0a5554cd3be11ad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/91d6168373cbb22ff9b9825154cf03ddddb1e34eca9d800dc05d7f28f1dc1417', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/fe9257ec59644b71ff3ab1f2d501b15752496a7fa8998c9c5668aa710b16eb82', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3e578aead86005467cc2fb2cb1800d5a80382934159c360a0e379ff9e84967ce', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7b2d11df131ff9208898dfed405831a63b6c76762924a26d814bc5c3bef92063', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/49370584dab29f763f1cbb6aeee619fb15b3788de6b97ea342dc5dac33a95fcf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/df9fef50494b0eb4f77a8a50dfc0e2ac575d84c3a9889d5e0f1174b69fb7c665', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/95722d46fad6d844ae1f07ee7ed141c3f00f20a11ffa6850e5a26e863ae0486a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ecb754056013a3254922d266e1023b57f959d5cfb0ecae2470c14c16cedc549c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/d14b26348a62727acda22c8c0935ac6bdc68aece4d7f3d77dfabea51f8c70691', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/2b0b362a82331a8051207cb530dccbd834ad8bbf46e8b7e96e0c228b49c566b7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/20e4372ed718be47ca90c5cdf605668bf748ad60cfb360e46dc22cf7bdcdc2b1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/7e9b66e6763dc1caa0148fb88ee7c2257ca9a41559862a8f23a51e8fe7757842', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/14b2a6c78a1d88535975fc3a9cc7759368a6217eb5527cf9620cf81d1208726b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/27315b0a2f8e26e16a248541832b2b4d042e607be2670690189b00d9ae63c0a2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a6a96d76b1e1a881cb3333b5a78f8db314d7e1c67bb28b9b8340115721872ed1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/55f3f81242cbbe3ff389be37887847ce6bddd20519119f33d922046f4852caf3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c642a25b734e47eb219df654974c6a977523bc3f38293844ccd0e1a0882172c2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/6fcc51968eb0aaa20694198c878971790ab55df9720cac0c8f4c7205ac33f3ec', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/3d414026e291030f1ae7fe81dcb1819b4d638b1cc71bb0b190e15f40330751cf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/d2b08939a53eb50e232912f898a1b8cf1882cba1c49383753e66f034d795c4fb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/66881241ee34c3c909b9b5625e683e653313f257a57aaecab153dc31b2b606c9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/0a0813fe1ca7a6f2530e5922f458ae4ef3debb23f6e4fa819371b4f9d3d5a483', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/b3737ac5546a83d2900ee8be72876990283c6bf0908135082da6c41723faf439', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a18b9fad84c44c9aef863dee6178c129aef5562274f049121cab7d58fc55c4b9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/640f87d1dc86a55e3ae1d4e1d7c8e2ab7ac27268b36d879004f77d34bdc0bebd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/b3e74a96177fd17366124da18f009c18f2ca541f2a10f34dc95c4d8b06d0fa49', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/d673a5ca42bd6e4c15a5145b4bbe53554a1deee5ac391640945d00544715101c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/d33e65b85210329ce9016c083f00ff3a3a4e3ec1350bd97a8aa78554f677a904', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/00cc8b2df8236bc1219d033328f22aae8d21b18ca8d678080d53c3b157f4fdfa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/bdf25e97aaa3ead3f979aa48aba19161b20bcc27704433b1f8d8eb6e3e336870', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8eb189a8e794b6e8b8d1cfb538dee9c12b6aa59c4d27c05cbca37bc08a627dce', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/d021828d5b184dde8d0c6bcb5dc4ba932cd4c28d75d58c9467d931419e2d4669', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/da86cd7ccce26edb0575d05f2e857407dc673a1a2da53ed97f665a466de2c954', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/cbf4ab8b588ea23e6aecb4bd86c22a452363cedb785c3cca7be116705a7ab615', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/083c3a3c180f2ff93d04c223ad3ccce4b54b9eb3c9f972136f3dd9615ead85db', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/2ee6917ccb41c8936df3c3d6ce544e6bd05d9d6860941997a1341931621d84df', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8c817a4345be8c590744c4a6edcce7fec4906ae624dedf81aec81ab79c68f0d8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/91cdaea9d424653f62105f50956a5bbb3e2f7c674a11ebe059690d172941fe55', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a8aa8ab34019a752b6aa6623e57c8daee058cf45efb0fdb9a23e1891c798ce79', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7ae9f26bedab5c0a0ce1798d1c720831a3bcaf0b784f5926291bca21f688d189', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/7ccc81e221f9049884c194b6d9f64e786c1b002e4cc246b77eed9c60e897e39b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/268dca5e024cb40230cf080b1a804f6d79f3eecab2f408802c46161bd3ddcc62', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/2db1209451af3a89457771be8786c6c0212c997f8dccb2b2a4ab2d29dc60fdc4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/2354bc977ae087305d08b8d6c298e5e5ed843100ef3660e2dc1e95f9da753cc7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3ec249134f09cbfc9075493b36ee96edf33a6b762449cced1c998f739e678801', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/1c808727f671536b3966790cd48161602ed8a946fab98fee4ee0ebc263de762d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/66212e15b01aa37d08587a7d20e3ef05df58073fb3dccda9b5878302b3c94f8d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9de1a0f7c705ad723e832a6c0686e8f9b48bf444b41a1769103d8286cba10bc0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/7c552d69a2deec33c7548619c35bc49c7a3c52f329c6318d3fe7d5a5c5997036', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/44a182f85422831e614877b13e20a1a67c5e76d8d7d9971ff3dd21f6f6496483', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/b597f10712b91aa2e0197488c3a55b6ea434c0716acbbaa9fe73328e5f3f76b7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4ce8420e6bc40a76f7898964e1ce9b9b0cf7bfa2a9ee16f2a618e075e61427b0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c135baffd17fcb7ba36e19b481a635d4f55eb250b7642900e514feb8cda1276e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/d748549db64a63b444d255bdeddb5a5b0bf2b1ffe88d6ad4927954a9113ac2fd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/15fc7b96fce8a1f6fbac04116a594c2f9be01daa08df29e6a38c040dd06f34e1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/bf3a723408138b74f0473ce2dc958114f304f7d3f7210f6a2ca763350cd8d6ef', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/670597a1808c22948c14beef25f5d915f7283659dd2a5decf8fecb3b512ffd64', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/c37f86a7988366410322d90411f49e85c26eb8b5a18b21679c0ffaeba2eb34d6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/14a45ddff0089dde8e9fac8d71e23078a8032c987bcd3a2c44e7428df1ae9923', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/33d32683271f99e9ea5f5f18e52e711e91e4674de82e19262a0fd05a60364608', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e0c4074783d29ff13526990ee86cb29b27b1c2d5bd3fdd74b8d2f68f1388a75a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/62a73c637643e89a77d970b890e3d4ed9666c457894c7e7cb3a62b45ab8db924', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/f4d5be202fcbf4162b750e13e17806eef77f5dd567b875342b7d09b5dcb7e497', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/810432489de491e27dd500503c3f6dd4d54678dcbf77e66193b3f412eb3cac50', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/859b54671706deb981625d0f9948bd0c630d725098c756e3dfdd940b9761c077', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/6ec0e580e41ce1d9b00cccbf7caa31223181730a1969fe69eb7e79d3629ff931', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0e5540ac8e862b1c46553a7e8d57a7e7bc4aa02c475327c81d5a869c6de78dfc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/c61b5c1ac257f21dd22d860453dc495a6699283667bc32af6c0aa904e8cf6bdb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/1adbccc51f9d460fd7b81a090cf4ee6a3d49adf4eb37dee234a9ccb0ca0fe6a3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f5aa9771b9d6d1d321789a6d33ecfaa12e9eeef70961d55e1de3c8c1d2d298af', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/4f441125f1586e68b4df1bfd65d73b0d53ce15ff39e0800be20751d78a8cd96b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/6a2a4b8572fe95daa786105ae95be82dc0a5f6cebed8bce87fa0a8126ba1a68a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/c1f49d4066b452ee01dead65e5df69939e937771c4ebf3b89df043fa859cdbb5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/4e4a59e2223e2dd6fae0f7d87b7b8bd580bc30de5653cd945df787a23b487c83', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/098f511a3afbc771db1a3b10fbd54b91c791d21974a155b6eb8ef6c2f5e7482a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/19c5366bd42cddb9fefbd8ccac53cd241d6279cba11300fb7b377257678ed756', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/75dd55e01f266f9545b2a3146e3c110b36b7a0ea7870c4bd10e13fe2894b3d47', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/16d71920a308676b6734367818c3139268a4833aae6666f35c78e812bab58411', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/939e6f0437a179984bde7c95876b2e8d060fedc3fd6a73a5db3266c095791466', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6dcf723719a9f8d0b7e1cb26a3b2cdebebc3585a60c4432cf4b8c9d0208027d1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/014453bbee89e4a9274b74459d3b75571765fa7466a9b0280538368ba5d5b0b6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/fd3efc1079146e173747552ff17e3995bf3cc796207b6f0f30b2b5ae09033458', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/26da6b63e3e90ed84380f8289aef9aa779579c282d544cb5b2bdfc64a48d6d59', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/4e1a4dd107b075e4388cd6b286719b6558ec173f505af6f4df706b2814f3c100', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/cc910d66a29ca85b3df00666eac34e56a6e477499bf0f1b8e8cb3833de9f98cb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/46c5b939c60d37673402d5d005b2a1c906af484f102d3800852fee35e8fb7353', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9e996fcea3ca68a0c86e6e07329e3a8243efd3d253395619858ff3d17d51faee', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/9504403f332c0c4486fd5762e02de71d47a542a006036db5d5ac0bb5463a5a32', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/7652b36a613d0bf00b969cc9630ed5b001080d5513b58dabb2e28fe0712838a6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/f7e2f2641f273ac56a48e3e63e87fe5d2d677e12f3eb21900874af9678f4c213', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8888ec4ce12923b5d021606577d9a1f2f48353530e0ad4b211722f644230f96b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/239371c59fcf081d025fe596633e7a959095bd9ee8b7dca178f0cea6c60dccef', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/37de3f0108404e7833bfae846ae67ce7793899d383dea98079ffbb9048d236f7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/654aeae18079990e26315f26c167a9e88b56af47749d0938ca3cf027f2926b6e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/b5b63ec3a5a0d9bc073061406d926c76de3b1574064e85b8bfca56c8ccf59639', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e29243babe9013537ebcc23591019013aa4e38e95b857beaa604376530131830', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/19c35225b43ee31ca63ebca215c1b7c1a129978b09b91797602516bdb43da6fd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/f8aae86fb4e2c6ee36e7726143b6a7d9ce67d127a1e2f1c105d58b9fcf84f7ac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9d4ab2931f9bb9bb06936d70a94f7d901e42be58ff13bd158db30caf65519256', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/e099e14d8d4fab6f0ae7288dc5634cc88f1bc68a6499ffd4126d8d98bbf7f87f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/ffe9018a2ccae28f73245463ce661257f9958dfa51d13eb07fb8d21d7451f17e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/b71ba8353bece3961e7e83cdb15310cc31e1fc28eaa5842e2562abc671352ee5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/21e92b55bb05062265bf4d8e5ed983b191c694d9935b36662cd8b2e2901317d8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6dc681f6fbe50c74ffc656c2b0c44b7b551461baff636ad314c623cbab4f119d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/017735f25064334b0474d016979a10eaecbc2069eb4782dbe4babb7431f95f0f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/473da725404e36c96392f7e29af76614fb5292d0c634e398da47f75ea5c94c45', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d2cc3f8b63a1df05f9e42502ba5e9f4bc20faa7fff11ddb951c346c0aaa5a59c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/936344c2a299e412756e6389b4ac784d9c954796b56a38342679988f947d5b18', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/9ec6a419f3e252514c06b49329b09f640d3117f6e5c1d49c8e9290f82e883bc1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6aae30a1683ee55f867e0221a748aa86bac0392fba923ef923f0c6a1656141b6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/96df35383f03a28928a95c2915a22d17987a3c586186a5c0a54243e94f04feea', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/03052e99c4623aa2e6a5b2617cacfda99120975ee59f8ea6c29780b285097758', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/2f24c00fcc57ba44b3edacce333d64ec07c95b1ecf103c7a339ae727779ee49b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a46e750d74488930bbe84ac0f39df1fec7ab435b1c9b7418364c5af9b357ce26', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8f3ebade2a68616a945896f27f9823912958b00a2e1fe94271328becff0b93c9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/edf0c08ff114c1908a40a659ec9adea3bb91f3f6e5a56c52d3cbc684ff230005', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/cedd972573e54cffc1dc4cd72016339fcc9385fb515e514eb2be2dad2e72c29a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/151effb016aed57f8c6599ac5013dd1e82a2f79cfa2302490a7f2c02bd52dcbe', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/0175f333f3c32692391def1dc316883b68b0a29672fff5b52bcdc51899a5d428', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e17c632e073a99b8032e2e33b8a50f1bb3e1ae521b5060871c9cbec11aa9a6e2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/14ee924249d0828d70138e56bf5fc2a42ea8899951ee11c8dcd1c54c6d8e1744', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/f0c5c5fc00c3853396c564a1b47a6971e4ed8c0ac0ffa769e434c4a1c2c979f2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/0fa660aa9a83c29d69c94b0d387ca009f8074d923aa51ead0cf7528660c84798', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/d68827e623b9aea058f7aba159ac6362785e19ec6bafad613f9919dc3a8603a2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/77aa3085c80a9c3f278f2f0f06068fd98e310239384230482e33f26c40804516', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/c3fd699f56dfeaa0132defa8f827e12a5ef671e84a90c2aaaae7804ba2806915', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/ae9cbaf0b0ac829001701b20e6b6273a012a339a3a4e6f6370e72610943b0bd6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/23d7c4b756377b96ecaeb9234aadafbef9be75f1622bce25e6950e4a58cbc0ad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/dd31f8b9f171bc810260857f8987dc621ac3b6f0739a7ecf857295cfb64eec60', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7cb0813000f08d5820c61374587f70076f52f9197fa88aecaedd5119e8f4010e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/68cc7e86e42f8a9ccf768152078c8a4fdbe2f876c1f5c94cba1f08067fb3a108', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/db824bb9d622ac6e77c1b424d073347eeb58a529c735b3514cc0c790244535f5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0d52fead298ae3c5253c7170b85a976a1ec7828f244921d6c6844fb5d3338ff3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6ee0f8025ef6ff086b111a95a039b60fb05ce867e0aad1dfcb8a8da8ced71fc7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/accb373a576345b5525389e95008c4fad9c3ece7d4a52529c8139a7929fec684', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/1bba72e88cc6db635b2c45bb9b16c46ada82c3ed06e70f6ccb59755ad0516674', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/ae933ca9755e4a9d5c0472dc024981b226b8ac87d26e052614a5fb1542b2df0e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/d4e16df16194f414bb3bcdc9b3aa29387d8cb1eaf68805d0a7a44d3c72a8adc1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/2c42455d668a434e42b651fe18862983d89f6e6fbc5b346a15134526dbe42b8a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/78968a2625463ced0153da596317563000820cbb037851d6445331ce2ec178d2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/50c49f2a19f78ee58c2755703513e4047860dbbca7f340d7101682f61f482bba', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/8c3b889bfb6dbf00986a2c0ca1ef291e32d856515f9b06af424df661bcc9436b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1ac5efa2d2d03fa8bf53b3b6699f5ec4c75f76e2d7e2344999725d17bd64abc5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/2aea3ef8f6bd77eda118f4eca1d50732af273643916590cf7ed0b73ad2eec229', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/c5862f465721202655cca2fffb2079f8125ad28bc8749086147616721221431a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ee714d501bd3b52e71505d93dc1578a220e0552dc93513736742d4002e6ee04d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/22b8e261c2f7a8fe352d3e92fa12845c995aeb98c2dad6321fa44b1d175b5a38', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/e687b640f2c9325248a9d14d717a4086b3048ba974e04d74b674f033e99d9ead', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6a5041df2da0891743871bfe5424daafcf1524fb210bc060d3c790e67a823cd6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9a0822144b97d254203555a99f543e5da48efbc9df9b4251a94360bcd7177590', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/150bc000ab5e56767a27b0367d4e5cf5080dd90337515fe2eee5bc8ca093fc8b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6eead256a493aced8863174fe6719f6050cf7b3ef7cbaf71e309e27ca850037c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/7b34fe086683d8cb065c3c856c5819fcaac814fa0d7d51f7c433474ca4b36903', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f3c7c0ccf292093eaff174d2f84bc6d7ddc40a517450cc15f70f51d47f99d186', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/687ab3d80aa4f4e858006faed89aaedec5cda26b2414af21fae5f538940353d7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/1ae310905638a6b1023861c62f6d81c53263d2510140181902cb107c6123ffee', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/08f6940571c085563d1422830d2c8cd81fb315a1d55cc967f926c2ac3a6bea56', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/e30cdcbaadac40c1afbfcb91e33588096a616ee4ff0925e8636a01770b92574d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/870911ecc0f4edf74fbbaf40d0b195947a2af6a600c49f891a1db0cf4b6da8bc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/d41be85895f275d8912b2f02c89fe3bc058e26508c0a22acadf179c93bfac3a7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/9bb2a412f0f743b6a60650d06ef2d32d6865c6c04115d99a4f279a06059fe844', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/05f457b5fb7fc65c39575e658c96a7c800fbd931f07631ec53b611dbe7b93776', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/f274678bd065cf94c258019380808c7340e392a804043e7c40fb45b353f43395', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/18ecb3a68b4acc44e49ed169112e9f9a54e48deb9b256e70ae545dc64d2d77cd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/393ca0cfe2b0ec79bf897af570be539b05c8b6ef4174f5c8590a9e432f23c9a5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f9832158122812cd5290f18b6b739eed5aa5a9c74035e2c99c070f9e9bca131c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/ee9832511b0d6f61dabf25ce84a5019bad9320bf980bf200d52d103ca84afb70', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/8efd3ea2eeaad1a948cba571d0daeab97da9e759e05fb56308d94530ff3cccf9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/3a887f7282d82d6c213e958b67ce0bb288cd0371a74dc49089ae2780f735b04d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/010a05dfd7a3aa247abbecee9b66cc4327119a3c481b84ee5b9e16ba6b98174a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a080a690d1594029b06d4d15e05300248e215eb35a9c96ec0abfadbe864de68f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/251941f4d8dda367b3c5c3a3e27764de6a12379e289b0f746a7aafc546403d5c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/ba9c12e86c5c84e80922af32683ccc180437326e039bebd502101f7dbddbd538', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/389450bda00b34a28a375fe21e743e57d09a1d0195c549a4053a2b77f24a826c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/6ca8647166ee8d6fd8c49a23b144c86b34d2aa17b7e51b72d2845e44e34c548b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/f402f783bdc42b21ca0ca0bd94f672a9fccc8f8ca19914bc4d3ad5bb81449344', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/0e27b44f791b61197f9f574700eb96a32bd284fb42db0b48d9f6b24d41227fb8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7a892cdf39e8498065cf1e6fcfa799b74be0e6f56f531e7e9029c09f22ba8888', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3182a34716e49d37eec5f76c463bb4bc75034a7d6af10f1fdf826f4f86ac043c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/b92addc55b87c673ff3112ecac6bac53f923ab63591d8bbfe2cde554aad9d5f2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/bb053d7a5a6d921e3f9919f2518cb64def6e3a9fe67e748818fa29b1c8e1a433', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ac9d9e9b4e554696ad71e94787ae694668a16efbfb9330fd482ef690dd95fc2f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/fb1af21826907791736e82b55a480bf8c988b006f22e59529654b58bb6d29eb9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/d4e238a3b25101443c60f063c21b01c1646cb130f31bdcac5f92a4d3d7dd27d7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/b8e44dfb34879c0ef44135dadccbfef027dd5bf7480ba7079ed08c9419c11ca9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/348a9ec1432edad110937b2affa5d4592e43c69b6df94b7f1a302273cbdabea8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/5dff85db61c054ae100fffd4b41c24739581108e54a31eff538d30b552f73b05', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/455df02e187af29cc156cc75e4334eb1f092d1f444800d2b2fa461921801318f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a9484de812336fa70785505cb147c098880e95ef7925d1cbf9154c5a50372c19', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/eb37b7da6a3b285ca97e3cf4c0566250a1aa437f934312e78175036576d0899c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/273c5b484ba5c62b916d50a4e0828d9265b6bc201e6d053772f02b574946d12d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a0e6902c458a403602872b3aa564ce296fd3111fedab42c8a8f2ce38b6d28baa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b4ae7363ca8a92257d92686d327bfef695f37a22871c002dfdf9fb614160f3f0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/e4374f05aee9c1e893af6f93e6a3ef4798c0802f0f86535e78061ba085619eb7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/cef25c9e5138bffcef84e066594618b5bb9b799f1a3473a005664df9f4679049', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7fcfd7f5f4eedf5e9727caa602d59ff1fff8ac1d0ce7ac2ab23b2b3e97e22ed8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/26b71fd042172b7e3d896d56d96a048b3e5d5b8dda8e98a2b5eb106f4a4b8725', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/0a3f9724b2ef0f6e2d6ea22863293cce305e1ce379d33a83e4b43ed87e5a345a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/1166e9fdd6dccc52fb36f526151522a57e28ad07b98daf23ff77c995131db487', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/0ce27a08ac5af08937caebc35e126ae78469791b7a0966e02da550cdb4f14ae0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/e96088c9743da68aba2542f4875b19792fd9a59f934b5edf7c7060623019c1ca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/b693d311d328be66f9b9fed7e9d09fb4b61d1a7c3e7208395a4f46f4f2069c8c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/317e858dcb29397fc9185b6791c13f52a990e49b081d6f4e4e69b892ea8a95e1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/fbbc519a5cfb74a6d15f17a9c42cd03e7315412cccb92c6a9cc8db45ab7c9536', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/807d9470931d03c9f9ae851d8d20096a334d20039fcd8b73115e169be5dc2e2e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ff0a03e8ade5541078fbd81dc6c4456fb43b5981d0fabe61ae225b2a4b8e2f82', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/553f4d633a12282d038922d45d4961f7f9ac201032a0d81c34b49cd25bf868c5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/a02feed52c2e1bb968adae8f0f23af45dfc3ffa4191ca18d8b7069d03890feb6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d2970c3a03f143cec63d87e3ec661e043a805e62d9f85d667618faa121189dea', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/f575a9992b313bd77b40569a8ef2a37b082df0a5814bb95a12a0e6df793d3cd3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/eb51e20ec0e75d19db16f57490c723a251216f0ffb5ed1ad16ca2f9ead91b8e3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/c35f3bec1cee95980a6cc22fca5ca2a21a5bc51ad4310c1f6798a2c9e5875ecd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/2dd6010f18a4875f6349d86a7e57a39399f734407889e24c8224e1cc94b884c7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4a8083dadf744b1cbec24ab01751b6d00d8ecd48ddd2d388c18d6b7a281564bf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d40c6bbc20028db023170513ae21677cd4673e6c60399df1944f7f1c0350d844', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/ed01685ae915bc949ff579c01b2ea209f2d114004bc9c4d786c036bc0331ad1a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/65fb7295d44e22faf36080363f92ccb54424da06d5114e577b07b932b9047d63', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/e00b13bb936f885d9003d7c63605a2d8d7eab66fe87bcf9f9797b7fa3081079d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/36eee5e77d3f58e0bfae095b2a6399336f2db15949f7e61afd638bc903f2286d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5473c35b1e1863d3de2e03829019505b41cb9f7ed823ba70f48570a7b14792e1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1c119ede25d3c07480011bd86aa66a1d8b6f6cdd31c45f89cf527af6850bd1d5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/397f4b1de46209003a4f20e4073dbecaa449adcd15361eca4722315b74318987', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/a252c603339eb7be53afedf3f737c93a55259de5a23f166b7ebc9bc7e515dd80', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6cdd3264f3e3d43eadcc4d4a5e2df7694ae0153545b60d1b52794ff37400c3e4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9d104c7dab83651b4415a0ced7c92360e6a656abc20555b59387d063e6383c05', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/e5417b3a1b68aeb7dfbf5687713aa165119f2e08ae61b03b6bb15bcd752b2cbb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/8beab580afe5aef4a232e4070a43f4c78402850f51e4be452bf402f07bbb94da', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/534a9a82f5fe404d24b19b46c68d4b0e910759e6c3206343f486af167bc8bec7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b48f1a1e43f03565b3c1d24efb619e037afcdb830cd790862973a794b7c7dd4e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/1bcca5759d101c465e4fb9012a2e362e7ea6961614dcbe0766a530d6fc978d26', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/b1c1bc9efb303cb317d78ff411d21f53de82310c5b0960e881087b1300aff0ba', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ea5ddddebcce3b86c7df0a2ed2b91e7816b7f7e9785c41d628d547f12af965d1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1e56d3883b90534a397aa158172ac890a2826931db1d71489d1998111be12caa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/dc8f3609bcd659a0858ac21a5d1e1d2679f3db795a4c5137cdde19fc7b3f33ae', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/1c0cb64298dd3ccca8c430a5cc19efc1642f59c92823f4593cd0226cdd9aec4f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/1d1614680f4273e499d48e53c26e79c65273d3557a8a0c7c7996ebd0952137d5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/018e76a5bcbae90e729dd62fccf8f9059e4d94c95d38d08b1533d8596ed1d839', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/92461171a99a78aa11d7b82882cd3a33e288fe7501595f6a4f6c9613c325cfb8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/8c7b4b932da96df4b85d8f97609f0c520727618b0b7efa70de0cf6fd123225fe', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a9ab83d5b6c32b8e7c75c2e8f581c0feeac220c1ac040cabe5a1c1ab4b8e7846', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e1fb17b69c3e3ed1005e473d84656ea273f556e7aea9f931a04fe69b5b59cca6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/954ea683b0c0de58c7cbfe4b8cbd39b694fafece549d077410c752430b918b42', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/f1bf6830567d1ca53d665668d1e835583f25891a98f832a579f54caac26cf7b8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5721edde5e64108614135e07f439e8eb31e973a3848d1b5c737fa1d5d4b09b3b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/a5e67defcf80c424084b4f161f6844c1604e881f2207e7563d29478371afe995', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9fea3e332bcbc4633497cee53e92756a5622be14a7725790c50e617fd6391e65', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0e143211e9af177ccaf55f0f9db7ff55d5d267072803c2ed31b243c7e867fb7e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/df17e01a471f8c6b86d113c901a405a0188dc7bfe69e2fb8d18ef0ff4012920c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/1af6a031e4cabb5b402eb83e2492badb6d70a632464016cab0b23cacd56d3453', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/4b9be7c0009a1ba89b8a4dbb6a4358c70a865ed1d2c7c21cfe8bfcce05f1088c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/2d02da69314fe483a6bd78362fe5cbc377ee408f6c7cb11ca28931ae95be5020', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/02450c82c1abc583e3669e8669b858dacef26d6987bc7772f550713b71d9d1ad', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/7cbe2be110bf31bf555b3634d561b2b01988fcea1896d3544fdb1799584e9a8e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/9a97110e3828637be283da9787537904071bd0e8ebfdbd0299f8bddf9bc8b0da', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/515d5983aadee94dab798f3d40b047de36b67b08d6454ffc9da307287627ad42', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/78d86c977cbff5054d1142e9b8203ea903140af316c769548632dbf7ca757bbc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/53331f8aea201982c49b0fb6daebec96f84e7e9c76eec9cb61ecb1ea8d043811', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/2c2047f5179152ac690d6ae91365cf3693e1bced5b9630fa89cb2fcd7f731546', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/749ba8e0bb42fdd4f9f68c0e50cba40b1a43047dcdc1b566598a706edc2c2a47', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/495b1d8e723f4b94c469be57095badc923ad6803190669d4c1d8f0de9744543f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/b526feeea9500f80c460ed7728b61ada27c96777c18d93e24dc98f5d6fbff80d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/65a9974a8f166246bc7266c6aef401950220dcec3ef6e22cbcece68fe194eb85', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3aaa8f2cb14f1e12a517052cf8344438ad2b81174d72924ef4e83cc5c8e53df6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/bce406956dfa73cc7979685307acaed03198a075baa9b44f24f9c82c4e6a5e55', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/d7325d9e9fb81fba723dbbedaddb1c2a172506fa58974e4a601e15d4c0cc0120', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/cbcd59851222ca83f54c917a665a65c45322b1ec708954e5d7131a8b7748ad8f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/b14381eafdce3d7fd9525106ffc48179900de430279a8e7ac857576624f8eb04', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/3d71a7968c51f668c339d53709f3beec8bc628dc7b14d19a89dad8ecb456db9b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/9892882c997adf33b40fb9920bae8d8c9e9dbace486a2260adf057371998131d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/b8a56225360cbc3568612bd150a1e103ede65ef5605d36ce52834a9246186a8b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/30f9628016e100ad633cb560f629f09b7275aea70692c21f664b5ee95fcac7b4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/35b46fdb6d2506232cc5e2b951571a7309b49f8996773b959c1093f150ad731e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/337eb66c16e6bb2a64635d6cdcf4fec3fc394be4bd6af4673736610432f2cbeb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/eb299995191be392ddfab0e21b1d1e77d41cb68bf046cdd41acb4b108396dbb5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c278c72aa1242d656b16789b0530bbf9a300e87d032e86043455338d9869289a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/00a49fd63ce433df4ea327c1a4fab2fb7321b3af745c89441c3fee6318f9a772', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e4c379afc8ce670a26ef896770d307b115cfc216f1ec75c409d24ec2bf3bbe0c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/53c6d1e43416e5b25eae5c53f2ad7fd49e2f5be09e37f191fdf468f2bd464059', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/350f9f6e7f84738670496adccbb0adc90d54f8778c9de4fb348ac06f19b84303', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/2c13289124425652884277912e318a78dfb492a13a2a0b5556ea18bed6934e6b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6faf24346e4d28fc58ec6a8e6b27dd07d0d364885b142f0f5ae2c95d28e7a2f0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/8a37964e3363df728badafc0f781aa90d55c380aeca6c55a2831fc4ebc34a43f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8cfec2b9c8865ae2bd60fa93f25ea8d9fa6ab3cfb0a8828af9f0c79340945045', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/2c0545926a5fc99678156211981cd1a54a7991d8360906e830917fc34bddf34d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/fe1e5c7466eb8ba31a9e375de3d49d25e8aff9a895d34fe529a5ddd355cdf1de', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/234efb7c6a8854e01477b4f88a3248cec6f09a2608c9dadb84b6de58c607ce79', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3fbabc00ba9b2e5f82b8f22930790e16e0506d803b84599a780be4b17dafff3f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/aa663b093fbf909e0999c96b17079e2aff42ec0f3e4b85b2f67cef1b4f9a9e4f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/d529306735577692e44677b98cb50076fa5d4c32141a058c2e91df3b134b11f1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/7b63c4d3b3ff3259bd08d8d11697d6a56314c1a5c9be9c5dab02d974637e88e3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/637bedbe0637128419cd1fed076b705d8a8dd0fd4a76ea45ed33a2082a9b2926', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/3787db245ef1cd5adeb9d7a28053af028e66b26bfabd1e2a0da801ae85d8fcb3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1af3152e841fc4b78a4f3c6de8d8a03a366731eff99a552bad071a20e53b00ee', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/bf5071801c1aabc47dd4b98641e9f71682322905c36603b91bb2c1613713a760', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/4fd4898d0f72895247436020ccc8c0958ab9f5a182068ba663b084b3e0546ca8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/5645ecd464842fb1771a76faf6f3b56c01064c7625416a3d1c0a22872edfdda8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/5dc8080be5fb56bdeea055f4790dda7a94776b4d6c4caca85fd2c54df0272948', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/c09fd0e79cdeea1121994426ca8ea2b2392a19fdfb7773fc2b6d5cb3a2d275d8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3ccbf910e08cf11eca45c47d3d667323a727a39ea635d38e579714565920d677', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/f02fbc6d02cd440d4a31ad5e03b45afda789c981d7becc433c598892fc964ac1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/f43f556bb957cdc3245fb1796a4abd3dabeec946cc9bc1780b904663e6dff9e0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/a589b01de10672ab1dfad3b2ea2adcf5bc23206b533d064dddb31a4a595f3d2e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9469133b37d67412e5ba0bd46e6a038c5d255ceae7609bce8c3f25faa3591f84', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/e03cc0ced435f0472a424a15f11c37884f6ff81ffb89c9cb65e7f0b55a663c9a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/001d69e899ba9eb547a4c21d5aaa61299a3a58bc37aa289bd657f2c8a83fa0ee', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/70f4d014f5030f5fc43a4a0a768fa20adf23158efdb1e806eb2503b887fc1d03', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/75f8251e5350c7475273f939eaefaaab4b0ee82942c5458e9f3cb854f653673d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/1bf7678e6a6a75520122482c30f19dfdc288fd27dc58615e73f8aace71dfd938', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/51e004a11cb266c17b93b5a3efab566a31e8d6d278a6547436cfc534b56546aa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/b1638c410bed03d81ffbbec94f9c88dcd39a317d3532079dc84a9a2eecffc6be', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/521c2713581407c0c8319cb069607d43ac151d2b17042decc2dab4a2badb8720', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/b0aa5acb68dbb1aef61f88142da890f4b00e19afb2967ab71e2679f0b236ef34', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/99e9f63af723ec4a43c364c9fb2b7cd550b526badea8a36b55389cc24b1544fc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/736933dda6ef1c54ed76e24135d94f5c96130c82aca4fda35005246ff2bd1dac', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/5ae13bcfcb087f816b1d26c9ba4bae97cd64b4cbe25c52969fe3a168073ba71f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/bf0f822d0f3da4028a7d4780679f385bbaad3a52f16a9fac026bb01b8f7a0780', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6959117834eb3d6f193df60e49af180dd30099a7a08ffe265917791a7c683ebf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/0d2fb03d998c39486a64eaab81cf957e5e462bdcfb95047bb00d50583fd9ad09', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/d89f8bcff8b3b9024bd783997544ce45483fd1ce7951b46c02734cc7793a05f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/2fe3d54adacf7b7a60beec7f227f0a3e51c7a99c84118221323a24624e628245', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/06c199b23fcea19935bc36e3911749bd7ef83769f18d50b8beaea2991dfc4e12', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/47a1416bae1d87f627dee1d73b7f664cf4f866311d2a5fa66526415c982f51e8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/602599fa5d04115c77ec700d16d4fe3952576148ed6493953af5764e2dbe021d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/4c6d9e3e534c3fa2cfae1575a27c5870bc571f9350f6ec69119401e0fdfdd049', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/440c60ffa6f8f776a4b7d7cffbf1830c6f844c071ab9c54dffbde0549ba632d5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/98fb15d53043f3ebe5562aff6314a8576df311286876d30d348d0a918aad1333', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/00c1924b3fa5f67dfb55d0c8bda74cbad95e011e65703f884419dd34d207fbb6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/623e08b3f031db2a971200705681f0178406f90903da1f9f80dc6f862f8e8f10', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/2444d30d17356045e41b5a7a194878065f80de0e7f98b714c3efada4d5173d02', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/bcd67b31452016d0f13e55667db9fcee9cec02b9bf20506c19d1a80c99b6de10', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b26e42ffe80be3b0dbc687aac08884f17226a0a937c60a23e125d1c7da562d08', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/9c1158923afeb1d81cc9d904461c4091f09da7342c9ada6480494a70b374fca5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/f476a13d367eb5bd7dbcbc2517a2da80647492f0de0469787530cea5632e3a41', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/1cd026c0141926b5e3ae31b8f4442a199d1df5346b91f80eace6506927930b8b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/22172cc196d516fcd416d4a4b92a92347030560c11a50eee4521c826941de03f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/568db719895ffb5409eb55f196311348c59687a7ea06086488cd1ffd4a32dd40', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/577319f39f4f1aebd22263f01c2fad44852bcb24dabe198d0aebb0d4d69892bf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/9e873fefa5a46df8e7648d0db7abbb9a2ccc6abf0847e47babf6beb7bfcf6303', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/5928f60009a89f39bc3fbe924807123c75d0693268f329ca3dfb1570dae29c82', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/0d5beeaba785c8a22ce37518898e8b704e5b3f9bd7aa9f360bd38650e27193f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/6313a780122e546eeec2a024274b9d57d12de6257a0a8d1675c68dca56caf8e4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/2cdd717e38f7c65de73a66d8fba5aff37f33e8ab6123858d1d79b0f3b12179be', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/06754771beaf597916b29029487007d917e4b08f36e5b15824768e2310012968', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/4e23a4c3d7c39b5b726912e85cd1a066f029c1392c9f51a1a0bd4fbc73a0407c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a871bd97cf6853e73a0f5a226194df93cd0a76735582e023b3253120d4235594', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/d1a6826cbf683d621bce294957a7e70979774daf153b82ab17723337dbfd0f50', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d0b489c6fdc79dfe775bbc5f4d7305775f80ec5f0ed2d64828647b7f2ca968d2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/d83b83ba5e9672a9b8e71267110f72f66094c9064e6e0fa1a98db2152aff6627', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e6f09c00b4c95a4e94105a74f71427ebe2cda9bc6551e6afa0a96d1b691c8ae9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/06ccbc4006b317853aa47febf318e33fc8fc24d210f49115bba3e6d3963044ce', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/94b636f0118b3c8c3b834d737782889a3fa16c15338aae5d44ced5d8adee1428', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7b18fe4f2914b90e79b77087766f083dc09e8e834e30d0328190dd1b0d726e0c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/cb3fefef0831f8304c31071bff35ce5f7b68a9e70a6826edfdda8adced28eff2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/592207665b0a46cd7646fcab1c183e2767241848e30402ee4b93028262242e79', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0a7f6dd6da097c61e871c880887eb155f617068a1c9b4a91c64d24100d5a8102', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/f260a8cb6965788ae3eab44a3fc0776d8ce4cbfdbf0ef6fce501da01f3eb48d0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/15085d9cc0a2d647c79f1de1b8377f813bacde724de03eea753ec4a7252fc198', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5b14caa2e6446f2cfc717fcc62104d0f4f405e5d7df8a9b253d8d81ba008a7d2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/f0a97a0be23b67430e0a93c7e52ecaffcb0afa62afb2aa2a7085ee6b36864e9b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/8d418a1d0ab8bbf01cb0614f8281ea84d30a79f35fac9a09e9f8b0412c935906', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/21bd5cbfc9cade7285130b5eb0ec9e0672a8368c3c6e68c6766d6071661f2949', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/d68fcd9b4eb601bbb3e49ce6a309e5c6c2bfcbfeb2cf4e53793050984440c068', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/ba8fecd47bf277c5f5735be688ead5ddc9ed7e7daa654f2272640f238b41ff3a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/02e90c0ceb8b40daf8c85c77d4255f3b64d4b7a718d5b99a2351a0e97cbf627e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/90c22b201e388250ff5309fed36a9e515b85ae8ddc460ff695ea5c9352cc4e41', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/ce91eb6bd39279ff6bff1d139586e4d99f209a1cdf3d27a264701189ca546147', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/3731b6ec2e149cf857668fb69380b4eeaa8270d3a7bd827907aba78831927cd1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/9ca2b5c60aecd0d358bc7e2bc23c0d0a5d370518a7c8d3923bd15edfb7a2c8d1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/17a12e99d5b34c865b1c08bf5394a9bae1e2ca883542a6dee26a9ea3a28705c2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/315a1fcb35e28ffd612479be6bc22ed5c374a262f96c453648b82b50568c9b27', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d9e04c926532d6579a5b0e7c0696ee2bf87a68d69bc6c2bfbc5672180bdab170', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/638c7b0448ff037dccb174270e61086807a2ac21a4cab3d5dda551ab83884e3b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/fdb6b6f05ae37870d410e439174adb439593053b014a851417f6459ec71e605b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/62997b9e5108803f85edd4684ff4c9c9f12f6b458f93144993772cb864a174bf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/b4ff15f397cf42299d32ebc82825da55a5ce4c68dc3ba1aff037fee909549bfb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f391bf446d568677e5ddc90c9c22aff55eb33983d7e20b79427d63c5917a2dbf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/88416a567eb67f2a8593ccd45f7580390f26b28850919a508b83edf4afa63f63', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/eca3ad86ed432c74981b7d173c4f446da73fa9cb47cce06f2e03e2bf51f1c689', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/656ebdd09940bb3e7681a69a26f49021d12b745bef681efe96420b1710c8dfa4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/2348be6d999dec59b627ca710b42a7f6c1f684b7a5feb6bed04515f9af7218ab', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/43a9c9ef5804bc24e1d701a50680482ddf783617d9e0f04a6774d9a62f215658', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/eb149f1c3299997ed006ffa9d2136d9ab7edaa1e1cc58ad19fe446f77cff4c8f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/7c84a2fc1476055b388014b9554abf62f0d306047dc1fcde726a6286ee52bf70', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/395b808188582f24267eb2feb879dabe31b3c1e6eda9ae2a69e0d7eca9d41fab', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/3d0113650afb97bd9c3c3dbf4bbe1d2b563b8bdd37f6e9a5c58bd25133dec590', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/6bb40bbb206ff2d5063b855284932d95686500277472595ac9d670b6c9f105d4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/61b8883b4ec7d74a36a7a6933d14a71098fb56ddcbddde03ebebcf3048cfabd8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/81d259f120bd801681c1b2ecd6a256036f8e85293768dee5cdf065f75440fe2e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3c4df705fa534f5dc428e0ef6a048cbb808bd2eb64ced169e479ab117286a0d1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/79b18052d6985307217312bf1e4a289bd1212f82a86553ccba4039a8ce2bfd63', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0b5961c88d621fdc293564f80a79cb973c14eea8ddedacb0608d5b5f285b0fd1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/f4727f15f9fdbcd964eb5f6eb8b69b92b84bbdc782b4d4d7364a0e7382a977a9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/f22eddc36ba6caa74ebf7680bdef086ffaae1ceddec3774a1fa7afcec562f94f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/430d9fb1174adba11f116bc46890191bb414cca311994215415cab1da9ec7a23', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/ea73d0135e45f412604211d304bea10a82ce622af5879c9feb79aad041f420d4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a4522cf0ebf8a68185eb63b7f38c81f340666e93a466fa5c0de82dcb16aee2d6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/55942be598bea700c55eb0b99e0906dc6e5724ceb3022d4b7dfc2fdb0a733d98', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ccb99318ab6a00cf1dc512a525d77fe39b5371241ac4a20edfeac650c352bbc0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/4859a79cd56edfc376deaf719136f5ce9e96ba177ec2fe7f58e47f268add16f1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/bbcbd2dbc6c88af53b50b525184b337a2ffc7e80f9cb8cf701c48e3ddd6b8925', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/37dc00be1407fb9b1280b3eb52d2b1dfdbb642c66891209725b7678a2422a25d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/4b36d12b3b5c318a083929884478fa7400ef5e41819c6b0ff4dc4c16e5914c32', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/de9c607b224c228ed10819dec1f6c320f399f9d23aa73fb1222f14067eb272b8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/01ac7ce326be6efdd7f5742868e1501ba81fa3bf2da8b8369c5b65c05feb880f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/92889cd3b01c82c37ac770982f0b16ad3af02fbd2d5d4872de47365c14046e43', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/d320487b04087c873e62a59864a078d6805428ff5c0c17dadaf92a9bed038574', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/99562d1e89c0280bc0ce86e6f5f5d3237cae74f23d67df3a32ad45b46e1de8dd', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/8e6ddcec4f1f4b32c1e4b2a90d4dba08bd57c8a21743e5c82755b31ba677c325', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/3d883735c6b08dd7884697e90e46174ea6181c6e6996ff3ccfc711d90dc3701c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/48004a0e3bae336735c8928c114b48b7e163e43c6ca10d024c1d46dac4e2c99a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/6066f0cf0e4fb196a92590105f64bf8a70b339cfc4379eebe1527800dd7f117d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/52d9956716dab0e3b48243e7e57e117737fd82f8799c4c2956283a474886328c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/77a4d38ac1981da789b02fae62ee47a3c5c92e4aee0e53873c693cd537b0a9de', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/11a1c466fd403625912bb83edb841b1babf2c243cb283dfd4b67147377e89a2b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/ac69eb854913da9cdbd34fe688ecc71f0aaafacd56b89eb3bade540eb4b21430', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/24dcc7da6173e0ec36a160ff51191b735530f1bd0a9fb8b6af53d7f58c57694f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/4af8dff070a7dd7271da90b9070862afdec270a280788f98b3c7f87ea1fd8ddb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/516b35449aab84cd314ca2392bb4fba91f77cc75d16bcccb385eaca4b3016de6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/302f7c7d25f28748739c3d154786ee9c5e75bd05cbc51e8686a2144df4f6010b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/07d31596f4e0a6aa60ecea2083cb9ff2c7666e44d0d13222100e7e87b8f6005e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/cbfc167a10d24d762996bc581272844c04a766e4e2b02169d88e85b0d0907a93', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/48df420b1a6afefa18105635f0a09d110e363371c2b4ab26fdd6533ff427c37a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3998eb6f81bbb24fa71247ba81e31b0564cd290ddc000676c9fbcbbd764efe4d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/fe41c3cf70f3b627ec7a5e2218ab67e710363ac3048efc84fee3e553433b7d45', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d49790950ad75b21b883859168bb4c19ffab13db8c0db321264b7a477fc77fe6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/2ba779f8e4845eac102b8921ec1b0d2f607e6fd9a0fa31f69b16b66c37ae32a4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/77d3e10f14e7eb6eeffe575cabc23ac5f7de3b22f8e3ccc5707b9ef8ff8bb08f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/e4188e4f35f5908c6f65f178b28d26666c5a01b651cd7e26553f321ab90615ec', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/70a540931175a821e67a6e7170a07121d833fb21c28ce62542759f578a214ae5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/946835e8af67b820165fcc0b64130f90ddcdddeeac0c828a1ca6e362cac052e2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/59a4d0e76fb3b61abcb16ae6f358eefe439c9100b6ae203cec1ce6e75aff2b25', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/025956b7586305d484be1e428197a0cc4b800d2c98f118e89ba317a4607b10d1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/996a1197f55be2fe1acb4f0a741eeb61a22353707f6bba8bcfa0dada718427f6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/16858f32475c683a4b29e0da6db6cc43c735431ef48694c718d63095a2107e19', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/20e2f4a77803ddcdbc04da8931dab7a2f6a540f20e74921a38d5e1ec015dd780', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/775703cbf0fc57898606386cd0959b1f84b23405c7143371e3b8b1e084316486', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/8cd7d9b4836cf1cea68fc77571459e5dd5eb9544a3830db7743ed0ec12107fe0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/aaf8636c7f0fd3dd00d9adb1592d926c0df88e1da333cb2548cc60b1462cf288', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/50bd53bdf1998e842374f926a0d98248a75694b839e06f500365968ac05ffb6d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/95d624a7139394af6de4129552bc2c2634f3035924d82aacf3c7dd0a5a388173', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/e4251cafaa20b89f211706b538c38a632a22e6a2c1d51e5a6cd923cb7dbfe171', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/08854f16eaff2abc64726fadaf942a3095dcfec31f2110a6cf02ea46c54b7022', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/f40cf00eab6df0369381d126bca6976dace2f7c9ae230ec16201e9c1428f4acf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/31d2c8cd6eab7c3c3e1c7e49c77027a644312a8eca9bac9fb658df0602afd6b1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/7be47407af6535466465054e395a20f1f4b9f0214de009ea70752b52cb3e01f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ccd613717efb0a62f825d53cdb4e9d09c57a5eb68260b66bb7f09bfb82c1760c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/a90421a9762a68beb4df0a58f1fb7686d4e9bed54564cbc6dc9b9f848b7f8862', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5ca2c1e11d7d3782b0d807f81279e29fdc9d61fdbf932e4644c9c9277df97191', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/2367a285b167cb31608da23e79389d0e93e0fd7affc3a6b7067b1380bffa07e1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/782eba94b766a4123f8ca6392d01725e95cf51ca4976619f6da13b160cd55a9d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/f461f7fc478ee4691c12c2aedc9fe4499851b24298dd1d181c30d4b82f58d14e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/001707bf2681b5de81316e8cae525f4fd3156c405b35f880c38d01fa037b8960', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/b15722a90b6b373732c6d09c9edde156dded7e90780e393f15fae4511d80644a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f0c79fdb90873323351017b42586df14df52049132c5e0be68cda0a1cb06f919', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/7733170879dbfa54c265de60a2cc53d076fb81ffce35ec9097d108315e2b0e85', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/1bad9ee5867d39047955a4b1306e7d50571c3048f2ca7ed5e67a1658315c6a15', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e683f46ee628cca1de318941a5486f24675e1656cb0c0db678776da2a5783011', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/7060f2d65dfbf0c42ce526ebc02a9592cccd6533bd95fe4b6f97a89e9cca9c11', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/6519f506b1f4a49c8845230e024e9ae4ffc94689ab2bc001a20452332b596f9f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/9a78c05e759b5825b7967ce26bfeee9a700f20e3fc1d620b0e7ec1e1312affa9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/47a26d050650d4bd762be4eb9627adb592778de062f491aa73dc52dd1bf0b91b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/813c586e2bb64f56ff99432a41bf29eb24b8f06ef6d86ba693ce6c54c4cc26a3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/6f8398f0d368989cf02d1ccfccd14031e6b813cfd0bec96b48a2a7e0286a9ae1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/2eb89cb05acc25d5119fcf973d8f57bbebbf25d7c4b5e0a4418241480499f9f0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/d190a723f226574c977f3fc80a210bd25a9b35bf6edb9adbbb4896ab741b3a2e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7d6a06574ffc648dbd822d8c21770c0a875a8708d7a32d23b0606db78ada5d12', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/ba167cf241afe3fd88a4c0cc35635a7ee646d5916cfae13b19a7c26a62c47bdb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/8687ab0adf6905fb51bcbd552f1269c7e597d0fb2f00e06e91f96b2e8906fde0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/bd0a849785f5ba95918392de79ade0c2d047dad82d04377b4b0705cab2668e41', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/d46296022e0338ab01b627bc60733798ea73aa62251d0feda41db4cdb9447b92', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/10db5474c9a898f5363a0f08403e10b053bfa60fc3e5c1431eefe18e752141f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ef390afba1f02d2de1d51485a2e4895061c1dc536d42dd72a42e74f58dafe879', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/f5955541ec6b5b0641f1ffa324dea3753020ec204d7be65a61180d9bf25109be', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/04712d7543b6d8abd7e1288e9411e3d5e17e017924991a04f07bdf3a167cf0bc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/96dd615112e3b0b1f9a2aa0ccdef6e39ee073d9ea15209ab35af446c3a6effcf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ea182ec5e775bc2a2d82d71b3951ffd02f7da94a4dc370bc298b85cbfee170fa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/80ad30fdeccb012733b2072592ff7cf65332f60c94138ae47b6c18f59ba3ebe0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5ab1ee81aae4adee6b779628e45228a9f37b83820ef94055a37ffb6013fa0277', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3c12404f27d457958f864974575767a18beaacf103a8b55dfbc98a3ad446a1bc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/76d002ff9aa6739a1aa17255a0307da140ac2fa69f2f49a49d1b901f25df3841', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/2201e5a4dd3f852c38c835b9a08bc2432b60ba611bf2c2139b92f1f01f53a0b0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/057b61b80bac625fa2dd43b2483c4a7bc0514d2061ae22bd80e7f30b1b27cd44', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/2a01bf688591206d044902acc30c7fcb0a0c051bf92886dc1e78ce738fcfb1df', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/1e3e265a03b1716582c486d526fb1048088a1041748845449161b4f3aaa4f3e2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/90bd3abe3fbc6500e874c63c6a4be879a3b97b800a46aa54fd6217dd8654d5ac', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/822836c3341f91a1c60dd5cf97d2e9e7bef007b2cac76578b944e8c9799e4198', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/0c5a16b510114154cdf104a3c35bfdc1d12d62b86b4b04356d564a2932e0940d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/eaccab195a8ac923fe7eb04d760254634e38733fda80a5023c54455f4fecb273', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/6ef65718c6ec07e0f066d8ab2b1c6169f7657618ac5042b5434cfd1c082f7dc0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/6e300617f0b21a5147990f908de62fad99d96a52a8132481bc676a28d06979ed', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/78d40ce9f3e813ae47c05abbf21360790b5d0e37ecf2b7581f4eee8357575cb8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/f64f4c185459d23c4da3cbcfe9b59aa7dc9a09837e0cfe3b3962bb9e38290377', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e7425cf755aa7429a220d2afc477a3f6dd8faab00d6009b30e9236db5e1a67d3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/be923df926ebd36c2f58c38cf50e2fc8393a4aaebe402e84d43d9decc026afaa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/631c36436a02190f883bf3b97039dbe6a80f2ba0fc96268ba22f87bdf67703cb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f2a07c947b2e25e54168129d4e30a0d41dac06312523b9fb6c8a30062b0098d7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/689efdcc5cd175699ce60788f350ad45d0d7a6ce5a92df27e304efec353ea736', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/5b1afe2ebf7ab94c0aaecd61d9905582438c69c9f02dccf6057fc34db4f6f7fa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/f9b2365b03a801a3f5080b410c69869f5a1b0a520643af8e03b313be4d50f6de', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/b91244944c334f7bdaaf8173842efdaba1403920b2391773b3603a75e413d4ff', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/5fafca569f02cba43536029957e6becbc1e96b87403cd05821bd28e153829c71', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/2f0c69fd920446dc24d7eb84c1029d4094d52d6bafcbe5f54cbb6feb3f01a54a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/a8add9087b610038edaefebfa3948eb54f616c65d4dc969e91ae403a45b0557a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/c2200b49921445c82e4799a8d9d0ab458e9ad65ad561bd9ee5339fb242b41664', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b18bfe9eabba4ada9a9d10fe5906f48d9194c8690db58a7c35c54387fb2b1bd5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/4de4e99bc795eb5ae35687d19017871381e72fc7f29dde00f18fbfc073f4a198', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/08e5e12f8059bfbee1bd1acc58a5da14293105fd57b1583a0941e8f1452a4539', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/429766107040fa677e3d81b1b1b2e33ba788a54fc39556244ec17e12a55dea68', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/d89fe85d91d9999bbbd92a3fdd117c0fc81c04b14fec08594176a5d3943d9995', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/145b82fc35c93b87f764c9e558715a789dfb977e095b4070d2d251aa42d05750', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/de6f5712e9cc8ad4f9973fc45a049f991a37a2f1c43852550827ffbcb0050ef8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/ca49169f6115d0a0e35cd33c37c5b7015cc2cda653f39a5521ff85dcc13f4c65', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/f63c0293dba5d6c5c633856c624c925f85e6240f9213a911e1118235a5108823', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/32af8f4b504884b24f2351a51e92ccce3be373a3c1f70ea806a901b7cb33d0c6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3c65353b199a1a15ee993405dc71214b424a1fa4ad6a1fbcc465a6fd5b782d64', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/be939f885ae170847966765fdee1bbeddc806054d93a5666d3531d27baf37c4c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/a253d1e138a2ddc171563b04dde90b73e4e1d1cf0edcfd3bcaf7780ba7c8df69', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/b40085f4a7524fc2b1a9643fff42770b68ed95f05b9a2f4169c00a8f7b073c45', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/2cfaaf714397a8b380ef3d826c79fdc2892e9eb68e01050a05646018bd590e4c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ee9246e74fab165a577bcd414da8a57a65b04df971ab82d5037683e79006df94', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/b67ad706cd1ff0f9a074de09b7c81b13a871c9c463066465b39450fbd1f167ab', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/bdedd2ad95489b5683e86775d1afda276adb77ad2b6d03c27547df07617c236b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/961130694397ea7c04bbd26bd0f105d3177cf37bc0d2acef64f7405569871820', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/59e19e75742345b5660360b520424201b4f967499c0b860a3ae1d540ad953142', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/07901705295dd2c1bc4f438fc3daab1727db21fb4b9f6111ea023dbc94d53c57', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/f5934eb16f49558a5fdcc2849349c87f770798b9c73949c598a6fd6bee7ed4a0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/32abeb4c68c44be86d3a2ff139f04edf54fbd451013b2fafc0b0c9d30bc0415d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/791e17fedb29b8e081e6e04e7efcff94489b3368b91ff1c785cda4ff0c5e7b81', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/6259a03f2db97061b41d7b52b68769066de8d9a2ded5ece37e15fbf1d8598c8d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/3ac8e0d446d298fa4b89724069094cd1bc79cedbbd71aa909191617394de0e3a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/adb9829ea8327106d533d227f22eabc1be089fa17c79ab4d4be5aa5a8b715a80', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/c9bee880d2b84043e7b720f94fa2f3857889be064fb60508bf8d140ba4b2c925', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/89a33e916b7cc8a6b8bcdcbff6f7d9ad03e70168ef5849a84b59b555e9e25c1c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/11099cafd86584804ff065eeec98750452fee77a76ecda0df2f0721903d1b9ed', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/a4b5e0e79d530f6f467f53fe657d7d9db9cdb7a6de9b91e157f16dc014c64b27', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/36cd304e04faeef6f87c37ca9441580f027b995559cea5dd55fda9e4220a7491', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/25f76b60e59a902bc5137bbd7e6978ba824515538e25305a249b5dad306679ec', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/60512d46c7acbaac442a6a2db8dca2c3f89a444288d804061f0b002e98529801', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3e7fa14a4c08803b8899f1670a1e1e75466842a365d77f382563d1ec1b453b47', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9f1fa84dd7290d7685b48558175b8a745490cc2f1ac6a693e0773d14bc3b4843', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/544beb33fe7e4f24260759f2016085294e7a7b4233079879670a931770ce6eed', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/4af8684ef69c0fded66c327fca9cff0819b505edfb2add1296155a5ba99056b3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/2128d65dda007d349652ccf3e0d3da58fe7d14180c1eb86c12c9aeb0e941b20f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/7a443123442d4b132047f85cee7ecea704a7865ef09636158e9fe7f10ad651a4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/85c7588a32364d9ad878b6f962978cb5046c6234c0dd16f2e4fe1c3005698bcb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/3306d6237f11c3436d3fbf59c3da59c48fc503b46a8c93f8280260129214eaf3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/4ca1a05475565a8f840b849f893a86c1cb54d8896abb672f347efac1c906b197', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/07238f358c14b71705e2a65dc9ffc7ef5ed76fbc1c0a564a0f8f58c61d423d3a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/abc3409ffaf9098778ab16abb58f14b5fbdd926f44c261b4c67e52acf62bbbc1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ad9f3c2d8d87ceb30b1b307552efa9914d8c293149a82363353166dff5c575bd', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/fc407ee70985b5ca4fa177f1ef8b4fc810ab633ca2e02f6ae671634109f08c7d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/df984490970c65c35a938a677304303479c98d88bb5d6f2ff33f286b8889e732', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/7c76d54b178f836f05f636d097ce6c6f47f9e1db4ec186cbb136bf507b174561', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/624af3b333fe968cf1a98b2a9e30ee48306d79fced5847bbc603ffc32f1aaf60', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/ecd7f911c6093eeba8d9e69a4a796aa4c5248d5b4a855f6204f93143e36c02d0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/862714f744517974d298f760aed9ba6fe60e666b3938d25ecc9adaf2856887da', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/9dc787224ce3817f4f6a71a59d9733867e1f5e878c15242d48d208b2c2de84b5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a4e01f012367458e91d5d94c1c26e7842c06d5fe9dba80585447e9b0686a2e84', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/e7462af1a96a2d25e6241ee4bb38326fe9f75cf29104d3644ff22d0084c44de9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/c068b46d17f02f512701297b5a799972de708e5ff5b31ef783f0f4e0e63f5b6d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/9cc0c43a5f1718a1aef9a1fb31f4e54604682d66175cb9a95ade8dc6c7342baa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/62bcfc8ba8fea0d92ae5ee2dfad24a13f6c2f53c7a9725a8daa4319c2cbb6440', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/5d1146c368838a5adc0b48417d4cbd318662baded73b1b6a8bfc16126bf85b36', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e8cbbd8b1d0557bb3c40a047a9ec3436738add062ae66f3cc9390e95778859c5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/8f94cd26bd3a58b7cff9bc73f1f79de304db01a31b1a5fa90210a38595f18902', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/aa2699d07fdd19b43b06a59af0f3651731308949666c1a5b681f0fc291061707', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/ce4b4d92fe07c2c2ee6ad40f4ea72ac57eabb64a78c51eea77b377e5ea56708d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/a4a2d8388ea823bc8c1fad0ec4ca87a4b2fc40de68555b9973bdcd78eb246f02', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1cac34305d87e4f648722e61d4d98b4e97e52ffb8980794305d04663c17464dc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/79184137c836539e4089b85bec4133577ae78364f4a88ebca624ee3308535ffc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/3a6722e0a71558be8d69e2214186536261f8d62a5afd3796d82c599f237bd8cf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/87a2feab9bc290dcdd7d95d28990f7436d79e9df10a0c367fc9f9684e6ecc089', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/edf8790a0cd8b4f94b9319b1a175932063e28ac7268fa6bc256705ba36f424b3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/57634bd699ea280b757493638ed5f880691f83791de5b54c6860ca18cc551c77', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/18cb3aebb121b89665a544d6f851a5fc76f9f6b4745f673dd173b0902f3b30a0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e3c490fb18a0cbb395be8b822c5f479d2b705ae6ac9ae5fd99eb57c95480dd35', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/ee5bfc6a0f999acfe5155aea96581caf755034b3947b16934839d92170f6b2d5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/02f13ceb7229fd0bd5559e066640f36ff0bb8a0bf6b4e2ad97b53c49f8f088a7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3402f1e06d6b3ec847bca30008d938de2ae393d4f3f5b6e6aa2826c93cd6de07', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/79e180f73f51751d98ad98f4e361109729c6e41fd7b9ef5f467d03acd6d36229', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/5f0f37a6aea793a4f48fe8a26482660b59eb5d8eb539ab5ea346f0a8cc8e91b8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/41681082aa812e3621612fdd7dcbd164a1cb8c05e9c7107f02246fc33079a6af', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/4638a2400ed957038a90aac16d33f8d95d4b1e11dd3edf994fb200b16a33c81c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/540dbe4a6e8553bfafd5341d32447058304da8a0a75e2b65022943b75ef71e93', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/bb513d58eec7c523db3be9d265e7c77120419cf74298216956e9a263398882f4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/edaaed80c07b22209a689ca244203d9056d46e281617e1c3ebd3ac317e845284', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/08338ba59b4cf19d3e86161dc87a454061d08cd88f2ad8bf4352ac4ae377a8ad', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/f38e67d4b11029a5c61c5780b6dcba1ea6c9161e39419c7ee9e4a6a84fa71790', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/16beb1a3319a431269766c29aac6bc9b684a384de1c73463908a54cc04d163ca', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/9400d9c21153df798c873ce9788ab49dc63a41543d42b041d2916a79d95c0625', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/181dff04e1f72a51c311733af9aed5f481284fc3e9a9dc743534be4bbd328fbb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/27ffc573ae0b2dc9b2282e42e353b27fa43b931be5ccced5337ff6f5d5087139', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/2a1c9701bdea9d7169394eff2b019cdac94edd56d6cfdeec3fe96e33f3b2cc26', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/513f5bb6c09f25de5715035953dd4d59bdfcd8e3ac4ea42d3bdbdb3a092cebba', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/19335ee58caee12deb2d5a757afdb07bafddc697a3424e45584130ab84c94568', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/11e805f864b7c8ecb6872ed2241a7d5b0028d0d377b41315cbe2af06591e383d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/d887f469ec7a8af48464937976d4bc8481f48924505cc4e30eda4a001a22ac2e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/b07cea973134fb8aac72813b3fe55af5d744bca769ad5be6a07c5674a253fe7b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/b8543d7b3cebc66bae1fc93fe70c216d50de6155722bb7d99e3ea3222d554f02', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/ae0df8b71c22d601356efa1bc160ea812b30590cc65467b25140285b04dc3719', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/480c34a34449963cdbf9fc634d4f41d9c8dbdb66c1bfb44f5d78189ea94e1fde', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/a0350ce939e22156e8143b086925e7f8dee3c50789d72d03aa37bafc77c0f178', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/e249ad9165bca379a001f6fa1b465befff209123ad36b143d4c635427936c0e3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/9ab696478f974475482bdfab52d4d3a2265eacff90c12bacf6cb983e3426060f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/67f7eab45172e8b34eb56b5df13077453a2bf0ee73a94bef8f2a3c88fa7ef1d8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/1b5c56a82cdb1dab2587a8df740d98cbb6f0892cbc1a0a4f44df555df315a6f3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/ba63b1d4dae01df331bb4dc6996298bac6505857bb16bdf7bb84abaa83424b5b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/a9641399ed6e67b74762e1c9dd01596435d97e0659c1f48bca455212d7eb7e53', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/0789d114d15f5928606c59f935d6005e5657369f36ac1b95c5b801760511e2a3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/62eb6569db9611c27261d0bd385cf753e6d2d5f3e1203acdd3863c3035752c03', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/c9cf5d63a2b3cd573b1a6368ddd2aeaae7b98ba0a0fd7e37950d4d581d906fef', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/17b4420eab6295987d4f83bfb8741dd98fc1bad12cb489d7ac1d212d33e77d00', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/66a2dc929815a62561c0d35a78dbcbb10fa8d14e8587d2d081190fa005832e74', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/0d2aea76e347f59cb8900f7ddf14f8c7e3a7c8aae997eceab6cdbb526e5cd83c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/3b627f51ec821b6fa8e6c8b8f2f6d5b814ca784ef6d6544b12ab74c6cafae8dc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/b4c9a0313c69d27912838dcbe78163e840260440a3ea79acb6dfde2f14876705', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/3e00290b1236daeb74977ced13a108262581919e05220c028b37e596b83ba103', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/a3da6096391290f994702bd85c4751a8db8af3fc8abde3e7caa688bbab64a5d7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/90698c36e8e728ff75c9f4b75a695ebc8b9cf28e6b469b1d87a46ffb0a5a8fbd', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/5581e13a76586feee83028580764537fa1434c19288148e690776b8adb0e6e95', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/5ac94767f3a3a2b3e791fb29653a3e8c6766844fff4df3bc511f338d5d9181ab', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/ff3f4b50b9528d8b076d4a939b0b84accc7912be19061153778fa94fe8e99289', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/be762a933289957827263693311f45bbca1c05b162ba37aeeed273bc410a4eb6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/ff4adf5804f70ec960b5b8b35319d5f9fa968f2a94079dac323788e0cd1281ac', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/2a36027b246cede21894a773810c18604d6758e50518910f21b7de13bf3d31f5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/0334ea9dbf6be1718482a860d5622b6243847f689748aa20673050c3c0905b94', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/e1c4a045dc1a1b6f5ea2e65e0809a417d6d48ac6356c6a34660a7d8f14c788de', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/771d7107eb9efac87cf2da6855fdf4f261b89fa68715e9a31a045dc5827b6f01', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1a3eed345a46d084bf78f574381d66b727111bd2cab9489e3e1af960291c1f74', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/9d4a73788c355ac8821b1b32f313039daf1468026170179bbfeb1f23c09638e1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/b11254fb655bd72411c77ff7fb13c02c9012216fae33998562eca600bf825445', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/4847c2d215c3281d45f0d49a8d0f9f3ac43d3ac18e20258c3570bc257d7dc533', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/1e9f528749691ff68d4b6c128e6945b912ca04ec70281685513b127683392b0a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/2b6fd3636c03b068f5f3cae8ee95357b069eecf17a60cdf998238e4ae004291b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/1dbfd3224595e1cd7b02a3a17cd42e502943e155f74fa9687b2d2cc4519277ee', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/7cce5184451d3f6cb820b72c02dbfc3d23dba6310a7e9cd6723a5d61f93f4695', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/46712d1cd7d0c4bab24c0672f457ab08ccc9ca8e38188aa24edbced76e7a41c7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/43dbb7b9285b1b46c4a552adda84ac9e7db67d4c98eaebbbabc962e4b1bb90ad', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/1acc2074ae26c2120b1a568ccaf4a99a20d6fdf69a17ca2b35eeb2fa0f7ab660', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/0cbf5011ff15febb0cc6df6184b8cca4831d37139a7cc41f269caad763f5037e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/940b3bf3e6e67cc33605aa31222a96f3b06dd0fa0e997eadd2e95268eaa2a54f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/e4d4729af8d03f989599bdbae05a35d548183116814dfcf462c91816a385bb39', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/53f9f43c253d984856bf402aa0e6922c150985f3249e3ee19605e7260925cdae', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_' do
VCR.use_cassette('examples/publish/0f1f25b79afdbe7d6bf5f664e334547e50d395f418266f8d5f081771c0c8fdb2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_' do
VCR.use_cassette('examples/publish/c7178449cf774d18f772043d1e78e2e939f58827d5fb8efd3da843fbb3c98932', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_' do
VCR.use_cassette('examples/publish/5e0c1c528a42599f37a636b4e1b340e271737545b154d7602c2c7b7dd3afa5f6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_' do
VCR.use_cassette('examples/publish/faec492d589273cd8afc2af94dc54dd85f0f1c0d7057cd57f31cd615876823a4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_' do
VCR.use_cassette('examples/publish/98f709cb75294967c401de312fae089c1e5bc320ad4ad8b5e4e1794109153deb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_' do
VCR.use_cassette('examples/publish/6abdef257e62f88008a0fe47b10be42ae1b0d0756192c526ec0769318bed17a7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/31e6f146053c0d2273c27f9a42262c2bee8f8f73dbac806115215d8c3d817667', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/38a5f7f8e2d1204f3885e784dbffc9a3603abbfa3cfd005450eb74750ce1cbd0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ffc6c709128ad67ed02ac9c192136720ee9b5c5a2ef814e1bbc8d77968fe48c9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7a097a2b60718056b653ccf11e43d5369e4ead704f5aaff143522899f11ee772', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a167062c9401f48b1dd0c71e6962e0c14b4749a4298907159781ebf66230fb39', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/63f4fcf55aa04f59fd96718d630a2090060ef6b193c86aad6bc72cea17728e80', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d4205cbb07e06a1dc35b15f5c8858430a8c8209305aa30e2a007a01e87fad2b9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/42bff7edabcdbfd066195c99570c14e0d399359ae9478c71314e48b6cd5c0206', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/465915c6c5886cd40beb6006293b7c3644b41c06031d053e70b86facd3663b0f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e9245b304c1eb99891e7974d0b008d79a40077177034474a2e62f4b3d4c10be8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b643055dc9f5ec9daee5decebc011a06953010364cc335e03e335c8e232624dc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/692d53d0116f60211d387558b85d18625a3a00fcd54a887bd87b023c066dcafd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0b1460d75abe7f6f82fd3c6508e62088807e7dcc361aca79d3bc331206642c69', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/27b6219bb5f81a48a1b22671211b4aabab7864c968407f5a61aa7be336242136', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2f793ef3fe0ca06b10eb85759e4d436b643f2217def0b9e73ca15140300ec9d5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/390ac9f0bdbf5c9f9ee918fa0679dbc736581c86ef039078933c1f65d7d20639', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/41a3f07590c77172fd9656328067b4cd7bf3ebe588e031beb7617c550a84b5d7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/afe700f4cef0b668a197e066236cb8dea4d7647e05b7a9af0bd5fbfb3e19547e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/736a7621920941e3d48f806843fd6067ef153ef4e61611d58bea7bcfccdab35a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2f19295e45064b6b523c8394e1f572f3a3ecbf21080036de650f610726e3d4bf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d7b7d41be7089977ed4fb3c4102b4f2e9d2dfa7732a54f806956bd5d7318386c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8be993541b452605a4abfefb6b62b3ca5fe0e24efa1b036a06cb8106780a4875', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/17970956066d970fa2570414823c67435cc353769afb036b1f89f67384424fd2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/47f153d91f4bce456d70c081ec3a5e26f48ca1ec676d0e70e7c2dc39d803d44d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c81a9fbecebb95c2dd3a1209ec02bcf29d1de779274c5883d606646c9a32acc8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e6fcff2d727c3a2839ea7110b9a7fee786425bbccec513c482a833a36c670ebb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a126147ddbf50391c96dc4af2d4cb97e01cd66ac97db65ce18bac72a5b9421ff', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aa0618c35c6721dd7f0394f261048be7016c426f04304139e549076efa6f883d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bab67b738a4aa944b80148931266ef20adfdecf2421792216ba42beaa80ccb38', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a1b9dbbcb889377dc99a3a98af3af63879ee94f0eb18226bb7db35964547ebaf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f9e1153304fa55001fd2a11b08f1ad4172347f7ac2e9d1cc65d6b4270bdc48c1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4ca77639293f74b5daa546a0c07b261281caa6c890f32af8b5d1c6ef8b0c907d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e716394f68804f790207d49015d51e4a548fe77fd83e06e98e5b5cea20feefd1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b457cc937e372e410a06ec985f92543ee3abdd763aa0b97abe1e636cc48e19f3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b8943885f5d6e0aff47a23b4ac25388aefb21c85ef20b085090cc054bd7ee510', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/08af7b0c03f7814b7c500618fe8a7ef7313c1112aace84cb4def5c9de4eba983', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4b1bd8bfe2f0f3c8f20de9e8eafb99f08cb19513665d235142a7bd2b36f400b9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6f259a5b18b9fd5f7b92805048f153b33e762e276f3f5cb21320311bb466b8d0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2a3b95790eeec0a07bc71ed84fd2f6e779ba04af962574eef4b2a5a9aed0359f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b453fd2144fc5f8fb0276247a4db9f0c88b2737436714561f7696793577f8e85', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b17e1426f546cdbea5b5dc66eccbca55a26ae2c4cb10b0eed43d7b7b0b2396d4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/01f0af7ecdc9f4cc842345b1f03325dc6d6bb25b68cf0748de2637709b08ce24', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b16adaca39dfdd32bf509b0b46831dc4f78451af804edcb5e838b90ee94be862', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aa0d9e95e75d279092cf6f1f82b2f2e386e4fc7223d56f11b3530a55028a0664', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c7a5cf9ffed1af47fa55d4bd9e467c8929f3b37aee22ad66cc16e88142962adc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/35e196b2cfb6bc2642c855fadfdf59ce96f11a0a751f516dc35ef3afec855f50', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e6cde6c58242523ab33136f3d99de1a97df22311862ac2189c99e5881609edc9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/142d8f8f1b2e8779b06aa784d81238fd58a755a63a0ea8ba0469cb13559026c2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4b564c8bcfa47d5dbf2684beb8539619b0323fdbcf36a9dba086782bb2466691', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/eeb72bca879311fdda08cefdaf7205856b94acc117046f5b494070f05e874800', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c7ebe447b44444a726509604ca18a54c49ed8015e5f2d87969155e56589c4256', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c8df8723449bdb1fc9765044a130c213a7d8411b5d3331eff4c28a7bb98117ef', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c4c276fa0d0cc99bc0871b7d96afb5d05de42f207784b10b49f632af55cf5174', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3e1834097cbb767c7df8b9ae783c6de9e99667714c7d91613e8ccd7109c7bbe2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a99f8dfa22d686706f7c83d0128c96ca6244de45936a59793cfe0d69a793ddd2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/15bc90f20deb9da62bc6b72676a563a2da8360b54bcc0ce75429d5c257ac3df2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b47cd4a5994118a083bed6d178a5e218b4dcb2c2992fff00989be73315fe308e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4d119ca4a3a294739fa3ec6989073b74fec20f017d5eb9569a36d6786018141b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ef14c205f86e6a90b8d8a2375bfde43097463e8a2c1469957e6d6d838c569d6b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/01c7a3166c869cf6dbdf427ccfffa6d9146e0c8c71f3dbcc49af36c9c9e58eff', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8c68e3f5c7f5e89beaeb98a4783b86d85e13cab37d408407f8f7159049b922b2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1659465f08200f14f1d71430da08e2dc09f8fc922cf2a20bb378da20be36c16e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5c3ffb92465e1bdd1758d312ef8bc967a32a564f2eee35d3cac6e5a82161d184', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9e907077272b62f80f280325d1424ff0479d5a946c59d159e32fba15f319471a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/302ac168e48ff9f82783a246b6ff3c0dd77914dd0404e14a00ca9cbb01dc7c87', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b568d95e97772d7247527263047f7cf4eb5457c54107a6e6a556c0a729c02bb6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a7a5e2af6436e14a7e32fc2ea5574dc171f97b8bb19350d8e5404dd1a5b43bf1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f66c6d3bb74a418743c5c1bb0782eb3fcf02b810b318c3471f03a1ef1cb7e630', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/11f03401718d4f355c9ad471b09c7a147f700e11368595267760163e9bcb4b42', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/56cd60ade95a146daf8cee237a261234af61856ef5eb88e8ca117708db9c62b7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f6f8c6f2ab371594a511ee208bd7ace3e86174b3f913af606a51273197ed1afe', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d17704ce5b78362a118597fe2dfb0234d75fcf1f639cefe2bda25bfd4f48f2ee', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a9a63627362ee6bea77873b6da411a2bcb5bbdca659aa74bd670e6f42763f49e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2a752c916bacc7dbcbc6a486b5ad97fdae836cf830a984fec499509e90a34c36', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7625b7caf86021f73cd081a29a70eda3dbc247480c766aee593d86ff922f4ee9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cedbf5bfe81b5d254c4ed27b064460c28a6cf1c8a93ac276eb7a593cd1ced8ac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e7396902faad1ab0248211c09a748cd721a9eeeaa4ebd44e9f2ef4e0796ebb60', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/484acc74d141515f390d4eb51fb718079f7a1b8ecdb90833e9b3a300938b96f4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/12e8fb7451aee59f6936374ebba83555d297a52dcb06aead8b7dbbd858001149', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/358e2c2ecbe2b5056ee0b09b22415e965ef43b5dec64da5b6983b76a5a4970fe', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4af8f6d55b455fc9d152be7a18c9592388e73eab837acb8364aff486654fb10f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0824d7d6855ab723a59b1d2b497823817a28f89dd2f96687eeea0287564bb8f8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/89d2ef68f865387c30fb684c03b4c7e33eb311307f2c8245be346d874058067c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9f0e03a7477176b64b43ac026d776b720df825c0554ce28452ca20a5c614da77', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/977bfc2cfeb57f9bb7b683cedd38bbe90de0f37c948f8de86ce249a26794b5ca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/441ca985f83b82436a798d245cf5ee1c02a1ba908b3ec07786beaed8b2319b1e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ba6ebd83a8271eb51edeefb1b5f0c75e3abf48e89d07c8f789f90b0604bd9fff', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7d4818305d1f91e4cc07ab0387b0b7051dca8556f51c0ed214e321ade5f6d091', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/389c98e02dfceb8c6800f4ff8e5158566736f46bf6186f644a3c9982ff69c45c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/06ccebc56254730f515c7034ca80051e6adba80e599921c37fced001dc52ad24', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/66d952f5d9331074a4da7c0d8ffac6a499eeaf01d4993d49db7cb9bf0d772f1d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/98c93820563c4236a57a633decc0a9d04674bce4bafeaa4ed04529fbfed83bb9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a6f279d034a68fe81e79c53427a1cc5b9913b302277285bc77731f9991df6b04', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fcf1cc1e1feacea87a0a01d4dcc6ecefc33c9117263fb326d5541eadaf599499', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/56d143859df8eaf7ed574fe2122202c9d4e3a00e884cdf015d9cf85498c4d9c4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/982b7268013ac2d146a336e4221366cb846a38e4057de005b615adc435467876', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/04d241551c3cb78071912038b8a460f850e506224d694f23a518b7db51d83b63', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7d73f71907802544a59b1c5006c8a8d22aa95135bf80d9bd93c0a4d8223d2e05', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e9537a44f747ecd749f255cc6dfac6060da4f4a615348a74546af431aa5a1ce0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ff23729a0d7b3b1abbefdbf2ebc7afe18bd0f1e65366daf24f6905f76ef68e58', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/60bc7f93ffe5f0b0513ce78e8e4ca0cea678b0f5096fec0635889c99bdefd9ed', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/136ac56bbb3f2e6e6fa06a3b895af5a1540107a39433c582575dcf4d017f49b0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b7750f8a80233972bc74ba6c4facd581a0d8487a633a1e92d754d40449b6d25b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2331f5c21c7f37cb6bdaac89b5f9e8ad9833e26e2b4648e297ba1e75d6e04113', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2dccac20e80dc13f185a2f4f98816ee852cf3ce4bd97fe4ab423daf10dccd489', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5e771858a674d54a98c794f8b492d04fbc27e4fdba5cbf8011f3a8c8648c8f9d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c3580509862cab0a9a589f1df81feaa5b746cd20a5d3c5f171a5f6704dd9696c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6f1b39244bf6b4587cd7a5935826f46d8ae2f3a360a0e46a076b55f9fee7c017', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 100, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6071801e12aacdccb866367b81a954018cf224444fc349fbf3929f7c7f489def', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/35bc30fce3c8ab7d5fdbffb122c42205c9ede76285f8f104f4cd82d3e1443fa6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/11e70056fd4349471bac58c45263a291d81445e67456452257d5444122d415e6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c43a61034dc7e6de7b7d8e10ad7f7835d3b475e3efc21dc03fe1cae7699df8bf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/03ce08944b7553f5d004349263e4eacad67d224e93badeb8531c4577f3be88f0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/90fba087730d5103d97cb6f99822a4c3f7c328dae152f23b18c8f700bd9034ac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0c6b7c1b485cb55c76ce7ee8c8771b51084f4184dfb41c2023859ff5041c42d8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f416f8fd88dc281765a125ccd64a0daccfa041e7e46cbb10cf637d38c8008765', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/616731e80fcc8a6453f79530f9438776150d44cd0431fb4a236363573d4a3b92', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9d552c0073ffb377ece195b1fc14cb0225ff53d15578418c19b18c77af084274', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/73f40b5c41b807cfea7893e2a2c006539d77eda7287423337e936461f5b9b031', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2b7beec411ba45871c9fb1d73cb06f96b1498bb42cbf6ae4822ae45165bb3843', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a1beccdfac321ac9c82f3fd28351e3f7e8fe5d5d9631d23d8addc81695a3b105', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dfd09c28644d71afd26fd294f9bd4203c85622c1a755b2da85ea35526d0e4736', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0e2204d5de28b524a748c13844fa34a9c74e5ba0b17c343efd4f487bb35d762d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/57ce0b59f370d13decc1267ff990ac02d95b9c04c30e2a7af5f47d71fba381fe', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/56e5a2b62e31b82be3f9405512428bcde999e29cbacdd548d10419f605e961a0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/56a796c5301d896b136554d93854648c0776c3dc9d3819c3d98681becde97b2d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ef752fc8c95e4d5e486d5a6cd10a9f08cfbb4520da00dc80a176b6bb4c2ce4da', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/51def7676ea89739d8e8dc3532084fcbcf4bbcd0c6b260f5389d5c5a1160f8f5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2c5a36f403df1fe973d50887f97f77a9f5e565a6061b96c0590c8491bcbb20c2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6eda6498a349d284ef0b6001bd4775d60475b5c510883372b45b007f8c7909f3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6cc86549e0c28720b93230359b3cb1966e697954e02f04a605794f5b80235d8b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/87b10edd0edb0af94cf761efef7e1678fc1a3d89c2b6749cfc5a23511be8acd4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/47c7f20020bf3c9b18b88154e11e1bfd8e0ad1c166fc1f77344f5aa8f6198440', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1c92dc946b04b4969ef3362bdf57be8fa7ae3399e3bd05023bbd51bffa7bda21', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c9586a71145c489f8df9bbec7bbca889f0a15f235722b2df0bb6e4f3f1894469', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/054c3d0b30851804d76eca357d4a93be20b161cd0475b578c65c9ccc32e74355', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8c41a08b62d3c2a1344e9733798aa7b2d9f89638ccd6e27def97c37beaac549c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/007d8320f583d297fd484f1b425187aeea7148b74a20c694e471d5605effcec8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ffeab4633db247026476a0139d5c49c97f15c02c9e3da1b434b9e38b587a9972', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f79f301295827e63605db07a200081b2d962d7b9141e40501a8774b45a38de82', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fb9d0ce088807107d39ce5411ed86665bd5ca30076307b070ccd5e575e7e7852', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6e527f5a6f537096964b70c6892f0660e29c3d8ecd20340f1f1ef6ec7b2dd0b8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/96d692cb0b591394e0d8c3174d43d31309e57587de28ff24719b58e34b116d97', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/888837f256748291cd7f79f788b847996f87a23fe9cad7c78444804d417b75e0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ebaebed0aa6e8021f83191566429256e5a50df16a3d39513a117dd28b7d430af', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/161f29f7c44073207efff5ae86899e65ceee6442ad47344b9c688a95a5b4b541', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/012f472690bd1fb53169b74ef54d9f717f6863534c1b514268835bdf5b7f5888', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/db862e9dc69bba7812110bbcfb73624e479418f63423545d02b85af3cd6e3bf0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/467866368ca5b7b67908475671f8727a35b6b8079721ab85a2920b0a958cb818', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/976841ece7f6da7b4bba24ca74868aa9337a82fe24416f52edc38ad908ab3e83', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/78706ad23470b33804d0ffa658311fa78b940a7ff0b766d7cb111ab56b635c41', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1d10e96e050ef33855b607d539423b2839a5d7f8a1ad3fd8164eb995b8bb92d0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/37795f9e17cc58086de12f564b4d3e3e6c95856abf31e0dff547b09b1893fd8f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5037a1a7273f771b3868fe95f1a162ddd426fa39bc436cb37b8335bbc5d3f45c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/39794aa68ca53e34677854154746ea9282642474bb793ec27e651da1d678dd64', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4dea01c056542cbcf5a26f32d0c78dac731e23b70c1b24c97a6efb506f9891a1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d2dd959c4de1f518254060c711907dc4b0c77a3fe40a9b54a02d5da1e362b00d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/82651875d65d2ffa243ac7081665b8ba65b61f5ebe73861148027f5af4cf5904', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7567487aca64f1a4b09f7f1c8b81248f70b37919022bef06eae31c145655d7fb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a84f593c2255ea2c3c09af91de7c7e91629e7161ca1ea78cb270d41e84c1654b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5324bc911e0c07d8490cabe37013164badbf221a172b42827801ac03e3aa44ed', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/70ce075c7ce68686957207015f858a5468c333e7277487a5fdaabdef7721b36b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6be564836638c354f3f94762414a98443230c3a354f49e76769dd75f5edcdf35', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0fd867f2bfeb53cbdfcac98fdc0e157a528659d80ae26c692d118d3c30445ae0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e1d3fbfd78bf32a9502aeb82d899726a348461b152fece353403af3176435b3a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/98e8c792026c3f543c6d33171d1e4a44b6953ea55e18427ceeb2f92b058978ab', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8df8c733bc37652e632bea1c37f845439cf176f273da3eca4dc2af6126815a71', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/074691d7dd1b2f9501e69a243642e474aeb008917b6d69b401b002ab4b478489', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a0e88204270cca1999553b5fea7d16df9d3afae2bca5c40459077bff935b155f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3ab869a33b606dc6645210301440c50e1cb804d8155549fd052d9ca0283b438d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/66102c21f4ee865bcbcfadabe989f0808f10e0605cfb93b62e8aa9bc0e026a83', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/172aa123c953b4df1407e90ae1c0b3b77ae02b695555e88fb30a6961a38fe6f8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a683d01f90451a8b3ad9e7dd00e99eeee154d2703cf4d75dd13edd12b8f7bcc7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b9d97b0cf115a798f9dfad44e14fc2acc4c0c2f2b9b61808bf0667237a21ced9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/44698d794b96240222e7bbf282f40a809624f32188bd792f520a24ac08266e1b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a7728112aa38f094fa6e3d2a5b066b74eeeeae5e59cd8837fa23aea26d1f3b54', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7180cd17a7d5e30c2662285dc24810a1cf22c6bd992f7bf8fc330a8e41245c80', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/636d9f829c8e188e8f6e115f5b78301c3227ca7eab4544b6360217a92ba04a93', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2a1f727ee1502566ee5330614799a8eae06abfcf6e4933dae377d76f3ff29376', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e26cb68bc55fae687a54df08347ea8e3ba0f90be84c96b964fa7e5348d1c9ed1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a8e03b486965d97c7d549ebee113409e353b3693aa0357055e820b8dc9027515', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aa2647f20028b7d6c22e53bb3513d658c498242cc474f769f19da042aae09952', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7721b7843d6c37d7256d5aefbe10b4c05b4b8e92d361c141d71a465414f8350a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f9d4f225f05f16ee6b05a91dc16c7e1fdbb90de5859bae7478861f93728a7c16', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/42952a3bc0c7ce221a5256cecbdf23c3ff2b50b5dae2d273dc2b30d0e9ff5de7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b4a63d342782678154f81ee027596364c99efe499f3d4f31892352b0f1d06789', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e025a4c32384a29412b900918e9fdb7a144e918aa8979c2defd52d75c03f4f01', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d30665e53504da59ec4b7e6f2ad89bfba7fa7819b678c7c8585de71d00d3b55b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3ec90b07db56b30493af0a7d82837c3319b0ed72a4c3bb778d38138de47d288c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/42ed2f50c4fd2c9d6f915c42002eaa7e5f132bb91e84aef6e0ac7d5f2c3d7e15', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0756081fbbe452f8a1f29774fb4708b124233865ff1a3a4a99d1acc52eeb8e1b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a797745da20d983d77125c5c4508423fe4be21aa5d97a5ec403a6e33ffea7c4b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bf4c4dacdfdd584127f906bb3a7500ff4ebcdd95e599bc2f9aa9c1ba687884d2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/618809c59e0a44ed44ad16aae10e8b8fdbd20156005291d6313ee8b7d6b08907', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0822baf6952806bfe2b8125058a0d09818fff2d0d73c6b3459dfc84996807a8c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1dd15a70960dee0d87c0f700a4a3a9e98cd832462d090372150fc745e407752f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2e0c151a028eb65742816ef987fb7d2449cbbf194e8edd7a05647485fee1949a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e550b3bc5497013121824ad1a92d727bef0e27811501ea81ff6b91e65ead59eb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d4acf89de29bf2538981fd500a5d0e785a6c4f6f448c66d935e84270dee2330a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9ee21f2de59aa5d79b124baa34b72c8658ed5671433b3bb1e2846e47e28b3cf5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7b5577c9d7a5f31ace3f840e73f233d0fb21f21579d536dd57fd4dc328842e19', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e64c1e03cb57da0c30adc4031565944cc3c2c60a34998985bd4fee85a7bede47', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/eaae2d992739115aca99681336a62fe088b77e73449a526f8e8d843ad46e7120', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/397aa38f7339d18156c0bc9713cde53de369570a9a74f5b385ecc9c0c6b80e67', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/72f46c3d8fe3a3cc4276c2e19ff774239eafc3e680479d59fc388e22cf4fd5b4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/74572d0d1e5d0d918b72e95933e9499715f403d7c017e79e7bbad5b995819153', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7f29ea806c663a74f9c5fa5a468a2412e6ef8d1a6785b13f3e1452c1dfe55e13', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3f57ddcde9586ce175705135a72670f36fd585434d94d28b4382fcad1a67708e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/47c3bab7bac3425d5881f04f9e8cf72732405fb19462499c8847b045a1d5f159', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/85faca9a4a16bdeb76cae23c53e24f63d21d6ac8924f5344da1f2235a5e18b98', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/52e6f616e42e4655610828744131981357cae02fe7cc25bd45572d703c41981a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6e88ae4598340570b4dba5b4b408b501d77f83202f1102a97a1d2839d9bca951', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/67e3bbc266377826d4a596e7678f0cf37b47d4f79e9d0b2d4274d8799a354d50', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/02b835deba891cff137565575fead5ad795136005c045a359d3553f88ac0871a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a5cfd2b518421547a6cc32e637ef3e6d16c024bab95f1665dee22a78f1596f53', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9636d3f7defb300ad55ef66f123fdeb377fd9fe810769228c8163639e0130eb1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: 'string', http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e5843612bbfd568e8bbe63f1d7423f4693cde429f8c49f137ba4fb0dcb996357', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/40b4d70dfcf616e37c319909022e7dcb424e72858eb24b095114d26ffe2dede8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b4711993f664a308486fd9ae8ff87662877dd897cda2961bff13ff3f4937c0f8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e7e529d07f9c0a7a29b430e04e971513ac163d84a1f7aa0c83fc23361f728189', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dce30f79c502b0f325d41775ae60f8300adc18ed1445f07d83744497a4fc55bf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ad088daa95a986a698ac2a7f46cad7634f09937fcd2f0f82de501a697241572d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fbdd366b8209af3a9272dc60f21baed0d64acd97b287ab38e5a3d283d7a03f5e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9fc913a436c50f178f317a325dc28938c277c84835b688ec784e97842738bb89', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b97e4a4c1ff8dad61651b09a123c263bd232ec9f4aca64c0154114cfd897fa2a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1d99a4c2c5a720e38b579b00472bceb9e79ca5bfe06fe18556cc1031f7adf321', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/428d057f5bb9fcab6f4dec809ceb186ca12081c6d58b759255a6f1044b5fe7e4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b35f8e4f901e2fc09001cbc98680b361d2652469d1e1647c2493e4a479ea25db', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0decdfa1a7c35b9f62fcf04d2ceea9851e0f535e966b26dabbf422bd88eaf3c5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/68a32a0cf3f0e021bb8381a3b997c3060f46e505ef5879dd017927f21db55e5d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/965715ebd7ee44e762ba57d9b7e560af548b499726ecfa2cf6cf31b3a05966e5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/32322d315b9543d26a55258fdc91c6f0633d4c0600ed291a1f59c9a346f5d8ca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/36f658685a0115a95e5e2a946eb82e889818e363b767ec8afcb016de0a81acf5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/19b71e701c323e4357d15354f2fa67bca0540406f8b4da6a1077002580a49cec', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2be5460fedccd5f54d380bee23ddd7d32d3780e06ae0e1d86a5ac3ac2d68aa46', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/164fc76639e295df30e6adfa9c1bdfe05be59435e34d1d55eba48d44e894c1cd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f115f6ed5aab63ca69bf1b3c9873b81a5cfa37fb89ff5e73f5b02d7467843cf7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/552d2d703954875f8b1ffd0f2c0a9161f24b8f1644aa8e5a40adb8a807d83ddf', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/94223cdb0532065a625419d5ff93b5ccd48c2da7f09aaf21abd3a86f202381c6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3247321fd44d9cf45633a10f7924530e98cf0be3ba82e3edc5c7496c79f2b000', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b44c9839c7db01b8225a4f8907c19a25d78e6589d125990e0350cce203078615', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0aca0a144e9795f10fd01fd866248348276405f8b3fa2cd51073155ac9d0e5d0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1672dabfa2c535b83abbfb99beaa8b5710b9238d8867f48046eca0875d5cd33c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a59e8fcf52f49490f5c4187e7ea370ea69ab0a9f0242cecc13ea59ece682ddc5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0976e9fdb9f9ef1c65c6f2d5673fc85b35ef91ae14526837b33dd7f55a906782', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2a1dcca87f5dc0a879a24606253770f1c359dc68d63f402c5c3889da6dc245bc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7ab32e603d2a4df71b402b75cb42f09729a0deb747a47437fcdb726ece258e44', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4fa513f1d96030af88afe716e29ad69ff72dd0274802d0720474e04e28ee1492', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9fdaf327143e4375483307101cc8f59fa32e3131cc2e732338c785ebbce88bc5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ce60dfeeaff9cf4e171d9e2d3b441148367bafadad0fd924fb8d18298e8511bc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/572751323a2f85106b1bf0cb39b580977124a71cda900103d1ab5f62d6f60e61', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8d80acf1d7b39397efaab7f1b2a463fbcb2671a1018f059315fb605a592bb849', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/17809eb95ff185a394fd40cf0b9e826cefa881e06fd7cf3796500a74405bc035', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2a17c1544af971e33778e9350c9b7a7ea3472c43ffdb188383b8a1bbdb56986f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0a876ac1effdfd36ce4abd9f5a03bd0a7cffec01257fce3669dfb1f8aec142b4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/de3cd78d54d0c9b123739ac921ab20d60f663ce0c03cdd3725d093530cca4d88', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/715ed6f5116f5e417d6fb41bdfc280725bc63e17d478d542464310df5127f5d8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7234cc81b48838e0512ddead239b8919497fff1bb0387d8eb73ee93d825c0103', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1e3bbed3c3f488aa55623f94567ce69959c03a5720c679460e0509a5dc25ba12', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ef56ce5aa8764afaa072572603021db79d8714664f4d5d39f6ae565be4184932', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c396d0a18a51355c3e6a9a7d862cb9d549e8d5ac81f9cd980a278cd95b7f4536', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/853aee383d8114938905ba9b9853d816803a27be4d236bc15e3d4f846880d9e7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b95a952f8d10fb739c64dc1322c551896e77790b3baba014f28a50e91dd918c3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b99a45acd7f6017471f153e33f046332b52dc03c222fe7eb911edcae91abd351', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5beb445c809c8b655748b1786365bcfa830c1913210ba2e25b2f589eeb4f4702', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b36de98c96a36451a8d08289c459020c95f8f073e0f40ac392bdd191aece6ba5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/90216edcd2f99c4b400058ccb565720938c067cd52a1c059c07f86e02591501e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a35f30e2848343ff393f68aef3e9f2344d1051ae45c7f5f99140426a2a8b54f0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/152a684de74657b199a2caca68593d060747a62d39b6b57b3eaecd5147d335ff', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0e86f50713e441c010cc74a7d81710c6bbf50f47f8487de694f5461f52f26efc', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/385b169ef2d605d0783f3647fafce7940b88d65776dca57c63b01f70194c4e36', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cb4c0bfbd76b54697f8ded3b727fb32c31c78ef60e7005679eaa70652fe6296c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9b7537fd7c3f5440f4216086086203caa5b860ffba6ca4cce5c81bec09b0a43e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/69cd7a07748c07dda0e8a792fb25fc230450d5c783979fe44594b9ddbc4376c4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ac55f00898b1b144a9fccc62844f23d7404f4d69e54e54c78515517e38a16d92', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/53c6ddfbeae5128e023126280c54d81cb768d35ce9546fea2cbc14f6d96d26b3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4c5965fb977eded75905d46c531b982a609923fe8c978c9bd344a71f213637ed', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6b915aed438e63aa03b6c152ab402bda2d9d039de06df7969dee69a23ec718b4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8a7de7412044dad310363d63aefef53af81e44af3a31c1c96cf775251695dd66', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/440ad2e99d2445c9b1a9ac5adc32f19d0d68fc46e860ec01f3e2c3c566279d06', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/46a3f9ebb216f3052419e35812eb91c1dae8fb96806ac6fa22a3caa9d8452ab1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/55f09ccebcfab83e61299deb8192e7b9ef989e502549cc15c12fd621819fcfd9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4c1b9e79a9863adc645beedf5b83037c6d6d3950b0e6972e5bc9dc2ca9511bd0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bf6f6611635c19d354b8aadc046b4ddc0d47a40a81d2a83ef669af00878077fa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/46c9e302aec4ac03de998b335e56fb5bd6f8ea84c3792ed94f91978e37ce0174', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6a5fc24f533342bdbbb698930552577a76b2a8eb75ab9e8e49f6b50eb195a0ad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/39f18ff83ed35f833e229a13d3207e1781dd849a62da8c269f7242a63eb791df', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/74fe16aa97fcb1a2904a1ef71d95b54f90f7c310c1c1f84f6b12da456ca1e631', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4c212344e23901b9865c0e2df8d9d2d5a2b2f3c639f84fcd105addd5dc32e3a4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/430bcd040b98aa6dbc8ebd4867fe3532bca1d678f0dcbdbc2b56822d3943e8e9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9d58a9da54297469cd79f7e86b995523e1b483e87ae64d2a64a02f98f8dc957b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4817ee499fac7c81fdea64d6c0202020a6fe1b693d0fb8279fc6ed5e121a4b60', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/95afc9f96ff55eec9a94aec413c1343f898debfc203dffe8bdcfabbe15d2f0ee', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f3242235f5b957ebe97e9887819807e9ef537276fa87581a7e28d3aa2e16c9e3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/273b9492d1523d813dfeda32573e6ba3023f6120da168d14423c253cedc6c93e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/53efa1b620e77ebf3a94771daff8804b2e081db88ba58ed37fd4776470a2b9e3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/87906fb56a0948966ceaa1cf4d325f3a70c1cb503e2b72e350ad47aabc48be9e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a47af55502649ba4fb984b9b1cc3d91b0225100caec7e81ecc83366437f5db38', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cba62cb27ee668d650b3252fed0891985def850376898181ee5c934468d57266', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/712f74f152a3dae36f9d0f198746b13b5b1bd7cc118032593403fe99d2adabd5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/680b7a199982684795bfb1310d2b129669246502c34e876a78fb2e81bb9be894', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/38b56a040ce4bd1380293c951b884a246e55d60f4f6776ce7df92a2e71fcb9e3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fae03e62d346b717fbb8fc5a4091354d4a2096af24f53180a5fa809377be5509', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7123d25781a8577336bd87ae107454a30255c782c41adfc4c4666b01b35b3832', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0e5a45290d87b572c578041f856b8503fb07ffdc82219d878a07674c6f8da24d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dc5ad4d9df65cf0b4b5cf754c13a7983ba15596c71c73e205d674b86c5ab525b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8a667a99a42ed1aa4ec9bf7ad4c3d3622eed66e49c61668926331bdcd49dfdc2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d94d0c6b94736a542fe420063c7f796e3155531ed2cf933d27ed08e23dcdcbaa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f0fbd741832bf31f2b3d76bd60ebb0a73ea69e917250daa6f0e7e5385beaf504', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e0c57fbc72d08b927ce5d2c1b140f0f3c7416ebb8f79c74b5f9490d93faef1ef', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9f33c7aef9e1f550b10447545952279e9390eedf2ac258cdcbbb069978cb9fe4', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a3f6fb6c81d94033ddd2177bd1c93f4603b7a83b873ea546779cfdaa58c55c89', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/21e54e5a8b9154d33fbb1ab206ece62954d7893d18c8a7abf3a2fdcdd61fb298', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/690fe06412eea42267819f4518f2e8ab4475afeea458d15f55c48f474737184f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b9a3e4975b1e89e913a9ecd79afd06fa08f879e71352515861b7d35634bd7882', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c4c78695d62cbac8b1fd56a34e128f6f3c4927e4f8d8d70007386a0a69e9a32e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/57e9bf0d678f5b7347a0c25619391b98d94f7021cdf1a9e1c39ea61fbb336a31', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8a3940d823a41fabab09851cc65d0b81e2fda1dde3754ae8a0c5977c2b30ce6d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8ca94935317486de4157ecbd59f9e86280c7b7c4e221d57aea05427839450c57', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9cdbdf0d747188eded2359e355116ddb2cfff2ac4be71faaeb5b1bbbee9352b8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b41406297c198b6e3cce4a8787cadc502f4911eef2d8cb6a94ea29229e6e728a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8240516fed52c97d88837d6a5433440b70a97d4e917f4c19d6e92e7d011c5a80', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3b9276d60d749a6e31a0695e177669d2781eae28bf7d5fbd1b2e1dcd1a103453', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6308a28db66b885f309bea467288d94161b65f67326ef2920ea68491b8b46aca', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: ["ar", "ray"], http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/03668c7e6b1a2a641fdbf7e8cf8bf688146fb0434b52f92f5ef1bf718790c778', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/67a7666f294adfa2626443943a125d5848fd263445171f4340f532f41b0de3fa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7b31564ff18ed4907157e8dae8c75affd0c3330459dc6c52d5f117bed7153b66', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b873308f0c1fd48ecdc6bd713f5bc77123ba819105565579f7138030ffcc8556', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2793324e27ab094ac3955d2c935111bf077768a56244da4170da717b481c05e6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8ad50340d32971df777bc0220253cdfb654c9156d2a9d5c16b5f9279c2bd3e81', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/70f120955216fb4fa91362a1f4be872b0388e71476dd477a0f1fe4d618ec901f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dfa4b4f7903aecf551b30a5b1ea5796b0c09260e16830555d309774713576b05', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/49593c2c20afcc9527e0e39eb3b589c9e98ab121bd0f5910d9b43b1c94e76bda', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a03da683353064bfea9d45e6767baf778aa92191fd062aba6423b66237f4fa35', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/601707f39d1649b042b9a17ab3bad102b1263a8c8f9e41fa9a8ccec8c67747a0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/af38a40b5631c78fb1c24fc22ed086ed4e04aa339b689f9fdff2a630bd329241', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e4dd7678fdf4c22f24e73fb9bc1b75e5a2b9b017ab08cdefce4b3887994b9a55', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/93a654e9a06e6ec446df4eb1a3ed185e2d3dbc02adfc75d09712956f28366a5d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1b3f95058471b99d6efc96a3fdf978d94d8f9c4526eea7e42f7bdcd860fa8de5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/81ea0f8c580eb2b21ca86429472239ea85e02e4cfa41f0120b8baa8ce5a5d1ec', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/df240b1d0b197e0748930145dd31d1c67f41db72fc0f4912b9962ca0bbeb46d3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/64540d1059a663d3edcee8164f23f101ffbb83b7bd8be2dd29bb46d64f48aa74', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9574d2b2ff8e677fdb192aea5e189b35b5d5852fd5071bb947d0db714332f75a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/373a86b9a052632aa0cf932786725a509ce76f35faf5e277fcbfb93acf2ce3d1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0181b1b6ce3127c799f0260caa0615a5f5c39de9d116e43543e24825070c5dac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1ac8e0cb5365238b23d0108ad4e723953de9f244dfd96c245fa0009ab334a07e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5a4b1790c3ccf5b2276933e73092737e731edb71f34dd8a001072cd05ac8b6d7', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9224d7ad142ba870e16cfef2f9401578032a464eb2a15f48a4d32e9900660320', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/982fd67a0c2f50563bbb61321bfbeb80fc583f68fd5ffc062b607defe3964034', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4e926de94fd13ef5c0749142e14880faaf4998372d78fb8c89aa54a0eba668e0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7121e4f9fead81100b2bd8dbb0751dde73492bfe38f7839417644d1d07d86b4d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5e8a3ee9f47699e69bde859cc0a7fdce72c0799f7e5aa162fb182b455c476cad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dc16df9482eebc062697be13d676dd939ebb60e2108a74235b6db31b0439ff89', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/21dc95682015ea2702aa1e462c2bb778ca44a70807f03d7d26d9713834b92be6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5ada15019a80cb8f63b020e1d20b479cffb486cc39706fd65c674276afe25041', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b2569d68330cb153b10a65c6c3a56fa2424c3969e745e8ef353d07a297ac3c52', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/40df08cee76d1c2f42b815c3094c455caa4c2949ae8fb54458422fd82f8e3127', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ee998eb703ff302f68040cadbf82725527bb0c611aba3b55528243fe656892bb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/eb07bb20460c3317b8d2d24f9847f64246cdc8638abc464144bbf83750e879af', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b9e4d02ca3cfb8ba5c8dcd353190c11a0c799823986e85db0f381af3af9581bd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8b436113f8a4178ead11e6ae77b64a7971796a863b288f7242f57c8328dc59c9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6746a9b99db1ff3da792593cfb28a8030d5000bd90efaef582b75ecb2cc82dd1', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/014cc9e042969139ba70f6460997f327176fe33a70d31b6fe382790e26934ba9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2a889a437a655c6560ac89530f2fc0428def3ffc19d8834ac9587211216fd96b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/391a8c28cf732acc4c00d9f957af9d9ac2147acc2367730f264de07c90d32c2a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8eb905ccfa187878d8b0e290cd5a61bd0aaba7a2b9bc648ec64ab8b437d10a17', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5ecf82a6bc1c36234258ec0130ce289d00fd9a890ae6cf3ebe7817db5434fdcd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d907802c3b81f905b253ebaaa794a60ff9a59efb97f9b538e667eb25cc7647e9', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6b7b2eeac16b4ab2777c18e4a80a9f7ef628584a1772af735224ba14dc763756', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/58ca83a55e7dadb5929f509c4cac438280b5a2e945043aec8984e3ae14fa5d7b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a4eeedabd78c1c38d073433d5ddc815776d1aca12f00338d24d16035543e2978', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c0bb9ba3b8ff81e4e86d18e7c4a56ad5c3a6a9b0935d492fa42e21a703887aae', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f810ba4de3f3b18a51ae11b5b702536220144947a09ea0d56819171bf441def6', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4b39132d782eceb41445286911b92042f29eeafce6e2df89ebfd4ea680c8f09c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/af4525e2cdaf136b45f0af82e194242a359fb3b1d119326e56291a37c44306ad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b6be627caf009b1c9dbf67f888bad04a3849c763c6961e0fbdcaba31faa86e4a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ad6538af616ca346237038c6abfa686858aae84a9b2f220b8da715e1dfec33d5', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1d3e24763addab01852c48db3111811ccad28d565bcec8d4c89d3a06e3af3319', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/280f356bf5d12b035b5646abd3f9fd423ca31c6bcedfdaafbfd658660d5fb327', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/754c14c8c38a3d65d04b685905159ea3eeb25f3cfe654b0c8c80f7065943fc9a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0cd99b25811a9ecbc1d69747ba024fb64a8c4b0f6eda397b3ab8d72dd1dd287b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c2a0e0d33a2828c0b68c42294c5c231e64d3562c1c10b91f9193702b1e088959', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/96ba5e542e8b3a69d25484dcab935bd97b088257f088517eb91c856b2ecd0c38', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6a24813953ef9986abf09712f96a6dc435d2612029675f54c2d75ed10a39e419', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/36bc8b9f2d9513d5bced93dc68a83ebdd59e072c9fe4a6dc6db61c95768bf059', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a675987ef2c125cf13573cc28655cce4e36aa0607b4308d8c503f0937025081f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ce75ffa11eb2b1712404b1e8250cf554adbbf49fb0195a345ec18299635e28bd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3cd581e7bd73a1dc9592210df27ed0ac70c894bafb2baa3d4ad166cc2ae178e0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8e2565ec4e2cf56c875eb01749c64026747aeeb2199716b3f2d25f776c9dd36f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/12c669051d4aa6dc00c30a3cbda80b285e5c5fc36c3a18d468a602b2461b059f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b64e899d3ac8e6fa185a01eac0389c57456d6b8b32bcc6fb919c876ee4f9c407', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5d7062a6839d516fa2155d0ea5def630d4c5264ce9f3b7dab19ce65004950329', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/69d1fc67799a0dc09c101e0c08487ec4468e76e7b35d676b4918e0e9cd612d6e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8690d44b52f18e9c5e9143d4e50d404ddd143c6c1c1599a7f628fb3bcbfa27c0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0b12cfab1340d639b90ae0ae431f4abe9768b4c970df55600b7369010cf652ad', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/27a22d5ea0d5297732943a52708537b8eeb5068bc14447c4c8e91a601030c386', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8492daff05c6e971d1fa86d9d0d5c3940617b47b18e9267c78cd9bffdd203d16', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d81ac5c13a18a10ff2524a984d49902c0b78515bbef8d644ff800c979475faa8', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6f41a3594a7dd30a3e01a188051ca4ef8cd1954723d7e6b2c0991f038352a66a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5c50b54da886980e33e38f28668e701b8935a5348203e8585491716b5f9c8dfa', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/37622be3a13284fccef9c7d93c7ca79dd6846384160d942424d4788192adc7ae', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e1533219e8792e655e8a6e6f78156c892b4091065d95deb4864ed331b623dfc0', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2fa4933674b4fde556ed8a820278cda77f3053326f863281ee0890f3794f8c64', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/362630e473eedacc3455b02aea2d0ffc6504ce9f5d3596cd3f578bbcc9f740ed', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5950b9248d2b51dff19fe3cf04b2547303cad99c269e36b8ab2687210080a10d', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7f514c5cf8b41182fbebe8567265071300df957f088bfe13e91e9f2ffdf81afb', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/204bdcaa967ba8f5d15f9ed51f42df41fa71acecd3cdaefb0642881bed5a6692', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b47d153daa5aa6f569c46df1a051257fc99665f6bb849c3876750d5fb64c4089', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8032a2d5656a85734f115443b92f03230ff52cd97a2878e7aa41e3a856caa64a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/90a4d7ce09c34a85326cae7813450bc423422b3c00a4d70b968ac021b6a8d7bd', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f0c306f7799abd67c9bd2b3fc748008afc8871b81b1ea00b5886ecd61df6c97b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f60455c2f428fa21f41f201a6dbd213451c4aa93c299dbad5867047bf2811a65', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2f6786f41451af58c141f4bdb1c8eeb23f08cfc96593b60671b57edafbe8de6a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/666fa811be9502e0359577aa6543b95e24fa69e751ba44e732710fc9dc3e5f91', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/90a673b9016f9bed7d7bc852f6d798286ea35b30eafde8df7666e4431f578e01', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/61863d43a2fb8c9de1cbb9b1cee60be49d452a3d0d273e1aa3f4c84ff39d2ac3', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8e4b81b9bbb06287df579adc5beab0a6a10f4d4a35a567270b78357c59913a28', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7263b8367f2d92f4aa0b0d0211ccf1fe85799587ae3a27b18c9a29020bf2a55e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/db331f8b9fe3e7da80dd7d7b110513a94de47f759530928fa836603b2ac0ca19', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b627d9a2f492f297e2b55167728aead8bade13074c06fe56c9db25d7a112b86a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d23808718ccbc5a8976ad22e3b4756ce73e6210e34c8d78be439155a859d075e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d4213d90ebdd63c853e38467c86d6b9b2d75dc345ac7b105a573d3bfcbe7922c', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2f656286e0501720872796d4f63504b19476203851e2827303423b2eb47baeba', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/50c7cbac9ae0bad7308c8daff3cdbec9b48b5cf55f44c0b571d9c939e9f8989b', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d61dc957085429eb19bdc414ce5e8cb790e2982b5801093f118d4568bbe61dac', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7b4c5e79d369934d2fb347d11f0ae5c593fb2a1393f0ab154331fc7f3f133f5e', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/64e539deeba6f6ca4ca7831d6b8e1044506100e84f513d50112c843b1ae98a46', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/67a776c80f3d91804d72568ab3f17dfa6a44f42e36504fec3e73724c7e2b6c22', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e3925e0d2bbc09649078d645b7ae83ce646114f3e58c0bc8feba67596fce958a', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/369da6d5127592dee6d04f6c14e307287ef82c107e7f51c57143ebbb9a27f478', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5e1842f205deb3297e2c93c246adef0808e877882da67b6ad359b046f0570b9f', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo___message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/182a813eecbce2ac61ad3dcb8ffdecfc1ab685cb4f253970534c88259dadf5c2', record: :none) do
envelope = @pubnub.publish(channel: :demo, message: {:hash=>"it is"}, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ddc8aaa11e62f55d912915b5f217042237240fbeb0cea654c986bc02f5a10e7e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dda5a7c3bacbdd916cec9d9e92a7caaad812842a9a74530c14e13e5e86a97c0a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/84d54a6cc46dae82ca144cec861a2c8de2f57e1e1e3c5454c90b3ab3b6ffc6e7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bef0a5e0628cbf1009b93b85997bbdcd214cd7853712af58e9ca798ce803e529', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a5b48169d86634d7d08bc8084b73a304690eaa97f27de292d1fef65236631737', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5ab7d27460c58411dbd4219dcd1e13216b8e63f0c47d2c706302b209aac8f67b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/753b92a18454e2e4de3e10ac6d90fb9e928239ff3003ca0520e6987203b3caa6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/367619867e3e5d02050f2e88767e2b8c9e73100068a8ad068663ae5f6d240f06', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8a536de4aa3aae4202b37ebaf2864016357b615d174133ad8c72a7dee7c0dd9f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/963fb8cddac3a1c129b25421c7eaa34e68beefd3af0e293ff215d8dc695c2c48', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/183f627c6e68b485071ef02bad8b255301768347bc416bb2366c9816acaba203', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/30a8c673f56c1e12e5a8a005ec52a0768ec45b2d17de2007e03aaf6fa973dffa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cf8589f70d2feb3a63b4931324a0889639bf0561d5f54b1b51cf6caa02d5c164', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/89f02b0899abda1de9de902706859f15bd2b4b8ed1530a022af87066cf47ab5b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ec49453af4aec318c8763720db939e30c93ff84956e0be64075b55b400f606f0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5006b93931c8c91339385618e8ec4b1244988d58d32ed331b9a1ba8baf9132ce', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6d1a38b0ba49af7ad7a0fc7a2460d91bcee8da45863970928b4c5e333e1b1fcf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6913858bb04aec0f23237bbcf14d479cd41876ffba0759528a88c96016da223b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/80579bdee4e4b8a63802fbea27dd7496dea34b22d31b701e9b36cbb7dd5284b6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/21e6a8c9a92acf430adce1ed5a94e38c43cc1d5df8b59bc4885356d49bf77e00', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/00137969798b5dd71da12968bfd6ebdd311021fd1e29f19921a4aff3111670bc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0da630cdf049249beec88c2b92a795a268f4793b39a3bbeeceee8bdbb63ac7d4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5a388ec4ef9e825b472a7a89f88f26e7df5930b5cb6f1c472a69d39b9f2ce50f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bd2d25b4dbfaa3410854333783aa82cad7651ae4745abe6c44edd88c474add4a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/75db92f8fd44a0871186f15c4917d892f5be15dce8e646dbccba4681cefa10c1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b1ac80373e9a5f04e111efa9dff4ba7f32c244cc887f6a83d8dafb85da2acf2e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/204cceb3416f56480316f22f67cdc096bb82d89fd2836d1059561c815253bf7c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5dd2f9db9d4e8c2875eb4418636a6c88b9a6ed619a8f70fb95010f43a6f03113', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3f0fbf1dc79e9e79c0f7752eea12325d8de4c27feb3725b402ae8867fbdf8f90', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3caa3dc52c7623175e7576cd3929c6978dc39a0b4182012b2a61035ec0a0c452', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/20c7cadeade8db3cf7f549d108033d6c14d3a9014c00f571d8c5b889082c320c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ddbcbdcffd2ad84bc862b5569eb60b4edc6ee794097cb945cc1a289358262245', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cb0edc094e988f6aa644c03fba374d206a47ad0a86791f92bc9036bbaef18a36', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4c8ccb2b9896ffd1f682441d3ea4a3c8d876a2f33364e6fa3e1e8b8f00712761', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/65163b96d72a8142ff939f90b28b955a01a17d7d293b5625c8d054c8379eeecb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6c8b5153c42ff29a1a9f2d282c85d9d76f54b5e214de1d66fbe421107aad9b81', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3c28dab8c85f65c927203bb3548d8603f342c899d58bd17ffb7d03b8b867e8ad', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2adc89be9fb5fb353d3c131d417273f63a7c9e51b29a12b4b29dc24dfc53e4b3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dd03341489de2f89e9973805f7ee426d00eedb4d05c5aa390c34d635e3aebc97', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/babf96984af325fab8d7bfb49d97dbce316373254e87d1413e11b04bd9c2bd96', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cd17607fe38decde5aabe6071e1ebcf001a77fc705fa75eae684a2c05d98e0d6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b24437706aa62fe6da366f5927858c205fb71305e6ce048f7da51a7e68d5f196', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3e5b215f89a4f86f13f3c66097341e477297b4771737873db0aeba3cc0cf1545', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f2bd9fe45dae822716b4454235883e7427d00af305dd17c23b4163e1407e8967', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3b0656e97cc91d35b85ffcde8bae456430cb9932276c2045656cf9f558a17a70', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/035ae3ee64a5d822be75bcdf695b59830fec5017bc4276848b042d115d01210f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6af11f80a1a2cffa7c9156d74f7bdcc657a4f6bd46dcf220cb161576d8e0f275', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d59f86658188630e51b99f541685d776599ca76768a792c3e353f8b15c20cbcf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/60844b833e5f198e7223f5ad4ee032ac435188fe2535b56efa164915bada05b9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b1efc72457c555f44cb727032ac6d54ca1f9e2fa84c2852cde077090e8e02adb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ba3b6a65790f00759117db89046097ff0edb3ce49deebbadec42e4673f0d8404', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e046243c5fd9b84921916be2df23d0c68fcfb76f7775580c078d4239df620be5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f67fcc5f069dc127536b2afa96c100fe5b64418aea36e1b67ad0f712764bfef3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0acb36889acb022eeef47df2e301a6d8340fb7cdfe7bd0eb93b59c01d17e3c9c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7578ab5095b20197dc76df9877dd7bb2a95d510fb1832b19f34d926ec1868db0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dd4bb67fa00b46493a24ae30a29503be98303fc1d4b148ce5f34f02e8bbf733b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7087a41584bbeda8b321c1c52e899ea337a572214270a2d67cdb97216e957547', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d26cd7ef0538e52b3a1b34f433bae9bfeb60dc0c43627eb00cdf93f0f103d5de', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cd5efdfc8fab0c19c2481d6716ebcd11b333875507933e01e36266e88c1e3c96', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/16f9be7055d7d1360a6c97cb85877c73762909ef916622e877ad8611714f9d97', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/95c4e514dd84d7d3c371bb87bbb5ab20cfc7b2ea3cd9cfec14ad83a207285ae4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/319421ebedec701c184148f27d437704873ebf15bd814d366ae61b40aa8a3b76', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/067f42ed0957aba52986aca93acd79e581c2308e4cdd1ac9d63f90fa284668a3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f6692fcbaf1c0738b8210a06e83283e80fb7320976ab896ede70bbdce3ca7b71', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0dfb72b83493957cdf61b80a667ac5104a28a9003d0c96889b6af589b2663e65', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/75aa2e0d86966cc60736ffa7d53f1ba0a780fa6b07f682cda4a0e5ed63c5a895', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6d5a76c13adea0b0c9aa877aaa2fd1142e3f8bc0f0f92571cdd2b039e96b0a31', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/801f0a49e49c1e5637042686fc1fd3b7fd45c6ab52aeced387040ba9a27b0634', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/851056e2b7ab740499fcf382674294f1ee77312736d8aa9ceb737350bebc953a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b2981002b50a56f689ca68c3a43ba15dcb0a57759a7b4da9e804d3bc0cbdbfe2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/26c6ac9f362b05fe051c7a77bd9f93a2a592a2565c2d90f189fa520e92a20e2a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6044d4c763c7684fdea86f20524be06c42bcdb12e213b30eb0941cdff694715f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0c3597358a0318ecaaf209abaf266a8844805f9c75e7052deea8d85ca4159e61', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/91310895c2146127bd51f971ccafcd1599aa47fa5a7de001aec04bda3322f00b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/70d521f6dd991ddeafa9b70e36db67e88dd92e581c210ee648ecdd4726a97d94', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/eb09563a310c2b4dfc8b9beb87892f503e028a16c511e67a6d66d20b264cfca4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2760a319d03c0ec1a5386e0611779833b83d5df5096121436b09d65c3d61afde', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cb44580d6f4bbd8dbc149abae0f6340b3cfae55f178ae64c6096670eba61ae91', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bb23b526ba6b170bf6c31cfb5d3a16a4f02e9802ee81fad305aa0ec9f0d57cdb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d9b7d3375a26fb5375cf38ee3df39abf55587ea6c47124f14e747b1d2dd85df5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e3f7a93c74b8405e96f3d11c9c54f41def8bb4ce7bfe18218016cdf2fee83294', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6b4fb35d14ce7bc2fc64a5a5ba9d75f937efdec818c158614f7c4c30dcf327b9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/025f3a8222edb6de03a5e92f7f2967a0bd049750316ccff6b5d121331eb64f3c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/995e34c03eb009f4d0b801825f1dec496a7c45d7754dc946340a1265970b676e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/48f56a2d01c063cb3dc65b1dda979e160fdcc12411d8faa852678c1623c3dbfd', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0582b7345a0aedcc5cc76259871bc5df4753d3031fc0ecb00a141ae6b76556cf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aedbcdd8515e1786dd56b31c4affe953bebbe165addd6519a08dd696484ad11a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a3e3529523a1f7c1831f4f6216e51df41d50da4ae5000533d7f19641cfa76426', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ed7d12886cdf5538d218664e37589fd77017da80d239fc55c4457fa78c36f89c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d4267b799253723c2ce6eb34266b42170fb64d47ea05b21e7a01e748b538198b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/49c8cf144563ea07a072361ebc12e9f68e443542b8bf96fecac49e7ec282d165', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/acecdad37db92e4bf431a8d9ec82bc6c08820ae99abb6435b8994f58b2a1dff0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5eb271bc8b73a81065f8240d025e4bf945c487774aff2ea5c9dd4a12a6afec8e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/68facd59b5da2d9cf9ade238647f4f4366aad480a38c40787df6f3fbcacaa67d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/07a33d7bf408af5003af6c18f8dc0dedd7ce50106e5b13bc362df9fbca247c54', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bf6858edeec95d2d3531601a59d3d12a8614b037e848cb8cd0347a8ffa702603', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f98f42f19aa7382db6d215e537a8c1bdd76833d093bea9c3227218ccbd3cd5df', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a910d51152bfee6bf6e47b50a2b66fda01a354e2a4fa4c055c6e4fce01b9afe2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ba37413561ff0adf113bd778c7a95c83103254a8ac393e073643490dfe174dba', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ef8bb7945f83b08ae37d222bceb77742015ccad13616f66e84fe0c3632d8b8a1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/413f6d553df3a22a173d6138608ff0bf4cfb15872ed953c568e8a28f06d951a1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f704c6240a10868158453d55c2bcc93e718a618736ccb720bfe3327fc6c7089a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ddc833afb761804fdc330f33b9ba96f82290528cb538c0edbf19d24c53a101fe', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/743e34c908a25aa9097d279d1ae996fd62702d8db2cd54a95ecea668e1c26565', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4c320cc91466184d118c2eb558397f4a40df21bfae7b03c1c3b3c936095ebc9b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d37877d5ac4e9f049e600682615c627f5b0464c2022a08c7dc987740d0e08743', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/547c24f9e148d3144565aec2dcc1509d92694ac0ba63a85ca25e308e8a881d27', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message__100___store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2885cf553fa07665335d57452c57ed9769ff63522601107c19670522bcbbf960', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 100, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a25199d7fef13f53776e5fff05d4d7ba7b9f8da4af3d36d58602f0a42d793488', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/07bc013c632f7778097595f9a500b4410c7fcfc4f5eb2afb3b4c623c2f7c5fda', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2816301d4fa70ebc8c3a64cfc80b771bdc21546a520df9797398a66f1f5f55a8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/789122a0f0d69ed181df28c1db4f01ff8171cdf48d7ddacc638e62e4090e9367', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a7b41e0d5c3bcc3abe8451fe2d0e3af905b1f2ced1be279ba7566585459a3650', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/301e4052fcd26dae3c2500166a8eca963313abc852f70a7f79a42cc6cc7c5753', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e232fd6a770bd05add289943ca86053b8bdf3560eed693043261be674f6f4a94', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3631dad4c757e764640c1310ac20082d1a4c774d09239625a7d66ca14707a72a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/99ea78bd360ea1177b3335c3a6fbb5f98a891fecf8bbfe323a8a8269e069d925', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/235d031a3e43a5f64d6ca7e4c88403b4c31510f7acf997a95c4a345cacfb1680', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4513f0efcb113dc4087522d94dff2576b8623de419caccd512d6d8f9e11971b0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8154e01a26712169d870518f06e3781afe1321ae032974c878df9211d3c59717', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b5f70a2bcfd4c826cd37daa737c5ed2f64082b37ffbe62872ccf52f42a22e137', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/eaa5b6671f5ccea174aeb1fd8649e769849f7f9024499afb04348483fa315c7b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7a194415ee0d9d052c5fdf4d6003e3b8ac5fbd46a1ecf2b3c76c231df116be8d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/86a34b84e66ba5226e3f2ebfe12b80d23f09b708502fb6f70245a7ae823cf671', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c1253c0d9a5e502eb6d4f9897bbf71568ea3ffac854a2bd6d21a03f4ae3ca921', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bc323c656d5dcf0cd0181790b72318dd4d3a78774554a5183263f0ee192ec1ed', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/992da1662b7365c44d04face974245729bdb9be218b8057d4812451c8b71614a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/359ae5de7e10bfc63479cbe12998187b93b8da3682299062da17370d2b4029ac', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/829efc9a3364ccd614165c184d91492364546bcecb215081613aa137a15831ee', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/93c25cc78cd8729089392443843bab4a7136c5d3633766305072c9ebebbe37a8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c2b18c818eba487d356b7adfabccb93a54ee7571f8aa5596a17d315bd001278b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/841e12dae45bca78aa20a49559fd3d1e43000b476cdee3df2281cfe24a2ef181', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c2f8cd419dac1d8f621be0ff84e9b431983c4367e830f73832faef21af3866b1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/120e34af686890781d60dfc38f589b57597d90beb0a5ae86466914768ac4eb4e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1fafbb4218a8b894da688f5724c2e059aa39842fd4c6e9fbc843b6d28b40e682', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/714a650c404986d8f2135a304140b81705543ff6de94e7ced00b583d894dc076', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fb6f2d8f7e86278a848b6836c33bf442afd4862be1cd4f119b173a4a053f27cd', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0d198d01f2af001feac7758305902d739963fd2486213909884f9a0a93e91c6c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/96603cbf977f4b937775a3e8658dc0849d7b33d5a4b2a801fe774db48ecc59aa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/91ad86e9421177ce562efb9910363a165730adfba878c838ffb31110fc8062d0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5aa8df30f81b3dc32f373851bfeef188f537c842c63eb4ffc6ca321641ab32b0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7fa373634b7cf596597a0af243c001cedad1ba609335fbe392c85f1515713e31', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/630e04be85402ce7a1c0d0f7b273a9a736767e273cf701bf716ac5eaee7d183e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dc5f4c83467f567dc36d6150f63052f78d3abcea427da369b9f2b57549f44487', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d3cc194dce51f068030c55a1005b78144b069a51827dcb94462143db4c8585b7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ff53cfeeb6e884fe0abb943270e37980e1a1d2b13ba221f1b5b45817970db9f3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/91b38fb25257c8490d559b7afbaa5d550247445446445ff0196cac08fa268db1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/47b913bb8ffbdbc53d564a880bac9c250fc3bd9902387133baede2a621e3e16e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c5f6455b60c5bfd5faab4e1f317b5178d6e054b614557fac532d768eccab325c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/af7706089b96c5a1f1781c8ef98352bb1c7bea4a59b211551b0a8d249e4a992a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1b084697e4f7b6e837a9df633cc9a1869cda69403e006e7da4b494f58cb81971', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9d4133f66596c02c14d8a06654dfd24d7c7916f58090b92da9691a3502cab7f6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1e590ba609f55a3042ddec1c2c06c394368fcf46ac9f1047fb3b31320abb46a1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1c6d5e025bd93d7fcebdc63f425b11c6ef84dda9732e0d67f714a6168a10e771', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a5785752e991c6b123ea8a0eedb3f59d552633c3e53ba29865d9963adbed960f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4e6db05d501a1a775a5d713e09df1fd78961a8f9da5f3f6f664176348625908e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/28744c3bbbc59a35207bd7debfa413b99f9a22f93286810129646c7de7c4f371', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b38537eab12a8c8f0a444fc3de024edb02f4aa0c415b2c01ab3954699281276e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4ebf739780ae29c2c114592f48dc335fa665a8fd4b444d5fd900c7c42cd9e04b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/40d2295870a489bd53b8fc27000fe8859b3614eb04b38aa6e6576a570d1f97be', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/82f1ceebfbf3b954bb85936b864536c312a03b846ba50f7cc1fa6117b6d42b5a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d1f732c72558748171b301d36f7d56044da6cd9f89f36a6902d968e4ba7f2e69', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f85e9e4333d2e9fb450fb3982f3805c3c0ebb9fce3d6c281b617623ced075559', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0753411565f7938d8f582c60cf85498067d4fcc575de47fac663546db44023ca', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cdaba1a0dcdf95501bc15ab9547120c223cc3fc3bc699c8aa9fb04cce95995b7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/45c4272c01f34fd52b48b49cfd9dc95e3af2670a6a1636e2d037e40e9bd3d3aa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dd90708a7f1ee0c3404eb7b7c568bb42f4698746911df94e05de8ab6f7ae770d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/545f5581af788bff2eb73366d2170b62e2af41d47934be7b7a8b7634009ee873', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a4001df10c6ff4d774603be1143936de7e17a96abb837148c47db51dc319491e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6942e43b9e13505ea0f05eb03a8d451faa931037f414628760833154b488ab5b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ff99bb2f8ea373dae991bba9e8cc7a6cfd3cb7f0a858dafe8e9faca01fb283f6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bdd4b0d506144dc704fbe5d6a2ba8c6b570799f5a10ec6334f17006d60c8af1d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/03ccafe38a6a7593f42bdbfa2292fdea93e4e65c48eddd29421c23c0693bb998', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e8e1cdaafc4a0668d92809dbac8338a1a7952cf6846a894dfaa0484b4a487e69', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7ae3b7900ce72c03d90df625fa826dfad7b4145727b23ce0bebce3115ce413e6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d432cfa736945bd8bbe45646f1fcbe3a6b8cb33d102fb539bc72d668dfca27b4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aa4106fb665a941e121009e9f882b8297a8a30b9c97ec0b93c10f7d1f84b5ddf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/186557c7296c6cf9c995ab690d62948349f9a0ca541dd9b72c77ae46604235c2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/eaaf8ee95e86d49e136c3406b4e64beffc44fe4e2d26198dd46087b0b76ddb46', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/306c8bacfe837759c2f407d0af2c947062891d1bd566d987bd6c8a8b939372f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aac8981e6821a26c4a3e22b8e612669ffd3cb989f501b116596445383ac91682', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/88511f9247428f14d643b0caa934affc38fd72f4e09411a62f143fdf3ae8640c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d4b2c5d2d639dd763bab45fcb35724990fddb445cbcef47a72b93f2ce1415e03', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a5bb9a751aae4c80d86cb4803dda940bce7a62d32c49ff301728c1e7d8542d31', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0c4e7e46d5236b311fca6c9aab48d126aad6013dbafc3abf62650efe2ee05406', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dd4caebd0e1d756c70dae50f8d54cae16381f7442166b2e4be9d00522f21ee73', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/88872cf225752380b1dbdd08dfe5e11afec102b7aec62fa7bac2e7428c87f85c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d422245f2db1bb57d48715345e89b9c516696906f63f759429b9ff83c3486813', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7bdc2b83aafb8d85d255efe8cca0745ad9efd0c9b11b611a9704d42e0c50249b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c074fc56e68c5fd0bac25639659353625612e35b0045ad427e78c1a02cd02210', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/11b57f60cde4e0bae1763173af0d16d5fb312a40c1b7ffdcbc4f09d8bdf3979e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c5f42714b5cd7ce0ab51b136bcba97dd130fbb47cf38bd604d01e6384beabcf4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c7baf7565342a48f6294d66c14c2cd73b04cac95468c8c9fea991da73987a9c7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/657cbc4c9060da2d69d321e3480850b709883b1c17f2f76b5f76d8775da36343', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/268573df3798f1d4613c31708ae419957ed6ea82008295dbcf0a833eb174e34b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/246358121a780e8597c6e83b9e585faa86531eed1bc001b0aada73497df36bda', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fc3bc3f41dd02819b490eae073fc8222c344b7ef33eb75336fff99d9489a4c16', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2989020f81b149b8cc8f018651b216b52bec1eea62c97afa2b007490a3dc09ff', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/72bed88b0fbffb1eea3e03ad9a2c18126cfb5811b97ce7140e35ec2712ccb048', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/80a6e5a4eef3084a19fb31840ed87eca4c7c62027a4e2e7c6dfac6d34ce64092', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f091ea1ecd02385a8596ac63248676ce98a8ce651ae4666a7c195ca2f287f18d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/317972838426372523f3aec1362d7868243b1c75158ef48114202d58f6bcc642', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f1e99d854d95636f2ee5643b133ecc04732913e03c805da2b90213e825e304f8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b04723b2cd8deae54286da19158964fbdc59b6ffc04b30f19e51b34245babd1a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/032f9d81330baf40881f79843d64c9fef16927ef90c735b735e2599b2231db15', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/214450785bf59410d6a2d0e709552725f07a8d3b17c2b068abf7fd87b2946388', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b73ccae012f959a5638ea55a6876e495b1bb60ba105288de1c1a12b443b680f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/37e7aee540d1189c80cd572f6227961a45891551180bf425b9dda05451dd48c2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/430028f9b34b41e9531977d9bc399af5a863e3367fc2f4337cb0c65b648c256d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e4c9bad1951c58ae68d5a509b773a00d1c84e3f5ba6009a5759c2811bac8fbea', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c0c7ae1d575c50b1e42b34cdbcd37ee06a5a9bce9f10d531c35e6f17e062bc33', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a5206aecffa703c9ac74b96c9160d7ea162343e8ab5b44ba51c3cfd7324abd68', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/89fe1282893630c3983ae201ecc474a4d6b9d9eb859efbf3a0611679e01ddec2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1accc599ef0922011e6f515b0e29663cb8644ca55105144eabc101e7ca4ab67d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e48828e17e437ce40808e0e68891a3f4edc1242df92da8da37409b55af181f9b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message___string____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ba88045497e031f5407f7e0f18d6f149ccabaf8ce4ebc243f7a18e2ca865b366', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: 'string', http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0d5de1fefbb2efb71bdc62160e84e07b6c3643d717f18903e1334b509a3f381d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a1b24d7e5ed9a73e5417ed742029ea7e90e2892c779da5fc89b4c8afb4e4f946', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ca0438e7b00e8f42cca90ea9c0313db11b4dfdf8b22a6ee049cd6700c4dac2e4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/37d26d477cb49d2b7ff254e598a5eed74782056d87e61121540d00dd1b04fc64', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/92613b846aca4a8c5e28c42c23dce18655a71658b5755267dc7ae2a66495b70f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b9d32616b848003b9cfe919694c8bda9f7aa4b2cdc672fe264cfae59fc0a10fe', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f0bbb8051c9fea1fa5aa9cf900f2ced03b3ec766fe67646eee530535fceefd11', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/171363b98f5e9ae3a0af1baa7691275ef1f7ae7af3bd986b6795bae361b04ac0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c79da03680195e8119eb635a0fa04047b66e2abef213703e801517036e84891c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1aed64e5def0a2275294e4e3f0bc03e44133b31c85b97fea9854009a3a2ea152', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3b58aa645d3f9e7e7cbdd7257c73cf86e24fcdcb71f0e0432de7fb47452597f7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/68a2ce7591f2f81705514f7cf73dc662ba8d2ad4f1492df4e7f2970ffeb0c130', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1b39e4e901980e6226754c5bed89bd2726f87dfc8fb3dd40301efb47a45768db', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/661ce500d852517f30464502f262360d9fa694003ab93b92b0f216c9751f257b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0172925cea5185f8e7a32f21010c90925e4e095fb1f30e35ef2532ee38f3055c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c0a0be6c7fee21f595ce73b89bec1a7b66113201232afec5eb242f58b0e4edb8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bc6fac43b6f1f4eb1b6fd41f501e9077940b07f948db690a5a952cc9cc64f444', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/37214918193aaa195277a856982716ceadbdb16852e9b8795996ed663d3a9c51', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ce1322b40979798fcee0cd4438bddae028e0c386bf57e5802d03df08d36ef9e0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/41bb4f29edea1356787422bb4c523dafe3c55b0d035c2048e9b78aab5fc53431', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e89552ba6cc75f20d5cdf3c0ab824f1cbd6a5592c67000b37f13b8109d13cf03', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5e5d2d7bd094e64e53583ee4923b260a4e7fec8c1105a991774241fbcd1ab530', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/55c5393b5ed8e8b7a42e36c74d61f6287501a98ba942de5c07a66bb9f5e9d050', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c431a52ea719c46b590f3e1afb343bd035d73c8e33df3d46de02d0b4d275884c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cfad5a91bc4d3a7cc69a4383d18bdc658312bc344aeb719781c3548cf120dca9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9d561cd1ce3259a44679e6dfb37b7b558ba4dc954a27e8e3a9aff05383e92c66', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8448f50fe6f7cd4c500d53ab14b99aae76dddf07d578639c15f1fbbd3e4eb25a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/de91d6a25afbfb9399d7d919258c2b4c198f250dc804fc314080d9ff6d604702', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f40f71738a14d5a23bb20f38d1081b8d5179eb5d770235e3f4618a3df2be8fbc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0d87f1bb6b3267efbcdd7ddccb4fa88ad7e4b74d5a34047c1371660e3e378e7a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/697910f36fbcf975efed111327d756043f2a7e2fd07bc0468a852097b59778e3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e496e15bc221809578716c5969affdcbe6334ba089ddf73232900b48b33230ff', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4c737fa7d5d81bf7df472ee80d5df87d2d3313280ec27951b4e6577cec60773b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1b8f62b2e4e85667ecb6e2ba930d236801f122d27659ff3ef92e0e1e88b37482', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3091473113b23b9ae3de544ea2dbb394437eafdc031d0a4d946da1719529fdc0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/10ff810d84889c205e8fbc2fea05c89b872b1610d12f9909b6122a41c2ea9339', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/01f82300387116ef90ae825ff8bfd5e9c243de06f2cdc5a5cc3ea38047d44dcb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3125071f434846634967f710d44dcafabf1fbf38f03651cf5289e26c6395eff5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3a618ff1eb0375efb06d7867a3bd8482bef8b331f9d969ca9376400613081a87', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a6261a3e34bc45c5614b97f5959751ceb3320ce4035b620a70c69b2e9a75c60c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5e3687cea5995d381e56491d16222bf56c9b705da11a9b44947a7fe36743364e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/57d83369e91c4bc94ff76f3bf91f369a8d9e300be36cce8c353086dfe682a657', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cbe6e3ea52877f456c9e4ecc65ea5dfd649b4071bf95e1c60cb34e6e642409e6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/634ed18e230b2e429efb4c67182d13ecf16b6fa28b97a72e5c55da53a90bc205', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fcb443bba606a482af92f052b939a7f67c56e6ed343d6e663cfaa999c695074d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1bd727a85b8e45179b71d50dc1d35590e628155e492d1d6d8bee5b96df6e5f03', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/12b719e6ae1a2a0bc08e54478af1d24ffbcc090af670b7abfc56fbc99d53096f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/54a6e7640c2b8760117998454132d9b8de9399002da355943b660a9996ac6eaa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1f0009bb25ce89edeada68a0ddf688d58cc83b7dcf1fc23eb18a8ed4801ca9e0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/51641c2bf5109ec28d08c92e25bc549e66ffaee065bbaa5661bd5510c9b936d5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/829928a5a932929dcfa13f2fc24bd40c33b4a10d85766795b9ded3f7df050a05', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/572ef60dcb6f5b575bbf780c8a53a50bcd613e44091384393df1c1aa69baeb3b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5c062dfa5d6cd3537038bc3700c692b7da50e01b0af22cec98cd95bde23aa5b6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9ed750342a6240af33ed0ff3f7c9f409065eba4cdc0d91699218a32830c9d020', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9953d5c96aea8a7081e5f43814635833eb9a37b1cb5644d9f6512e6c02e85861', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/46c452300c288ff5899c399f936a88f19d5a5515cc5dad2e5ef34f81ecfc203a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1c33057359280b58065634986941999b13aed8d699f8acd400c8f7f779e4069a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/59e1918288fbf5eb6325b35e235bf00695c757974906781c3d546119f081165d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/809a14660b35c91107a96ea17b6c2d71bf6544bdb6a324476348efc303dec6f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a559e83c724d5a28dc3b932708b4e102bb1af462f4d39951d43e36a05860fe3a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5c7c3be3ad50aa9494d2edc6986f9ec5a3a4c9c3d2a30bb4fbe9ce5514550c3d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c1e33658d33c9f77787766eb5a57f447abb943eae8519e48fffebb0bf7a98d5e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3e0cd8924e958507926cf5518a04ae3d793b35590c128a1081c679cf398dfe57', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e83edca127782823a4aba71d439ce0519f10cf4e230e5db171c0f7cd887ce1d8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b2fca87c2c24a3f5d87e90300c333dccd7b7c204a1f6527d39eb14b19b3797a4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4d0c818e2ec48d921dee1eab228baed6e3ef66dc036d7db550ab7ef8f4c213f3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/09ac1d8984775a86b72fde88cf56b0bbcae2bcacadbd8e7a4723b042c516127e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1b71f5013717c51af7b02a9c1e853a9054740277867d1822edd12006ea15af85', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/48e23ff3680f2f2e646706fcaf112c7ece4cc7b458c23ddcf7875b3b49c99b8f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7da425a7b73c5aa906717ea4387a9af0715b68db6398026b8b50321449ce8752', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d8ef95de23aa6b0a95c77c5f5970752df38c7662cf94e40beb4e418a1544eed4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/02129bfeccc5a53637fb63487dfdcc1b927d631e42d04b3e85953f378d940521', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/33e202286c5bd6302d69c70fbc2917c83b72ebfefe1fc8009e2c74b1ce570cf8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6eac2f44da25f4c6ab076ba23fd8150f9ba028d1032166156c83a93de39d404f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/36c249992ca5836fd54b456c9d8dc8c2a498270914c01d4c087581c5552d9111', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8fae229928d704540bb68967f8a3b7bc8593541725ccdc65823fa149a45eaae3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d5a1ec9c81060c14e1d0846014ce52c26b259e8d9fff9f2636a704fe6eb1588c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4dcf8882393433040889a59f5e6edd33d5ae401d6170342dde3def362e358701', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3756b1323284b238cdcaad28aff355ddd318c4ffc7dec881dc21ce6f5fef522a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/79ff7e9813df229ae0f932244704602260eaad66befc149688cb2e6b5911e74f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9e6981366763cd5359b74a53b176e8303317610262f13c69914bf4ea874100b2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/45d3b4fffe218e75acc8f44fb49be4baa92e82e258140bccdd9ce3464b9aa7e4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/46964300bbd7d500c9953705b9dfa1d177f34cb2f8baa72952d4ad22840391a4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4cd90b8a3d333a497fc25ec56e608e4a1e758751f878a0d703ef9f6f0a2e50ec', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fc208db55e872e1e7321e893198d442b3ce6c368b3655e1659b5271d27f0e6db', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dd696b2fbc601f134080c8365804705c0720aafb382285dd9ef76cd84f690017', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/02cc1616c7aa323e02dcc940318fdcdc4b5fb9b0ef8581b485d8d4201a4deb94', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5972720421f304ac639a45f7cae6319c595ea09dcce0a5960f52449a4d4c9569', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fab9742aa360ad79ca4cdaed38bccc764d3915b8ef73138a52cc4eb579b21a0a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/68e3f5afb0fdf4f0f0771b5de5d7150fa048173d8211f946ce3c4d2270819d64', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/78af097355677f0700ea3cd1e00e6bc5ca5b3555816374c565e4da9f82c1f0f3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/22a0e2928f8e5d5f1646091501a571f8772126fd106ecf8f6ba50fe0acbf6e6a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8ee2767845639afa73f379501f0427acf748b28f8f8cbbc52e3ea472e58d74f9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e85c59b893724bd073f31d5ec0112a429bcede4b745eb7fbc9b98f053789a58c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/d46bd66b1118fd2b9b164e5f3f982b7ce5ae5f211689411ef326b6e479d47092', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e0ae76c2ed82091d5d915232d82cae65fb2b3b7b3c36ca60afd15f88a2120745', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7872108e6d40356f135516004e67bfa902afe1c8674bf7381e3311554ee48f64', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5de3f4478f6c3527284565e3225ced6390657303314816bc0485b0e15bdab023', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/26e1e76de0219c0c0788cd47c3e7bc32a4904a1860a56a7a39fedd7e9b568704', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c9dc97df4cd08eceb47f0b44e1625ad76940a899e6d4e3b3ffe900098a20ecfa', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/aed3015a03149f7955a2c9a7d6e8a2b1a76db21d08043c43ee1ecdb5a7071af1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3e6105c32bc892044c89f418f4c7c52589983a1ae29ff03df4545333aeb9ad5d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5c2d23d1972594a61a8ccc2bfadf93ee9844a71feb339eb4375507539087358e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ba3a6ee67dcb49d9309cb5ada8c63a60ed6d015ce8ca6e56bc33306e7c1e44ba', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/62a6d3d46979eb389c321b96946906f693d8b7c4b140697b939f5ca8bed4a98f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b99eea473f073a4d848538121c37571c87d385b0432f70ee39f52fd8943cd2a0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3b163e0bc0bc39569174ca62a5e77f53f19652c5769d3b82ae331dae359e3084', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____ar____ray_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cb086ba3c5d11451ae11e2afd65101de352704053c6e77091955d4a26bcd8f98', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: ["ar", "ray"], http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/48048293347e887b19d0c436a49e2d9db5b8c61e87d8d0ec77ca7adda0f0c10a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/224cd60e1e76418073623cf92c883707460589f4f9579eb4aaa88d612265f006', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/af89d876945665fb4abff7573c7a6ad63a396a00482db0b1e9e6bc552cc73780', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3ff2dd7187abc4e31dbae8707b610cdd713060c26e016fc399d8b4d6e9b20972', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1447144eed9ce96fc941180c5210ec86aaa6a55545786a94089851a2a27f3c91', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1ecdd48fe22beb535dbabc97f777fc130d34ccda2be3977248d0e6ded3b718cb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c26ed2164f1ff4f04eebebb7371355fba064e6b29120719b02268562c8f198d3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8482ee69df8f447de6d85bf1b451ce7acfc1408f55b7fdbd947673a0b373086a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5d159dad92911c0df38bfe8c8c266b95f2ff17ccf99638879be2b5771e5dc3d1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2529d64f1d4b49aa874d34c2083a747914612450a2bce4adb83c332957b6e665', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c78d36bb7afe54eb594bff182fee0109721555750c6284ab2e5e45620524733e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a3f3f12137310d13fc8d690c31dd829e828a26c06386c7b76b0c16bc51dfec26', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/abdd545b2e36f92ea50b9ee58edac24f2a70e38dad5e298f517937261055ecf7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c81c0640c91f736513b62072a0ff7322733305d046aebc84e77654faaaa3b238', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/914854c452738ba10e9d32ad52b1dbbf51cf0e94c7e5c6d153f87dc5e2ed6989', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9c9e18d742a29f9342acc70103593d3ea3964b6108e6be9710ffdfd321af714f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1ccf74ee295bea39d47357877070e75aa74013180aae1eaf9eaca042cb7f04e4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a95340fa14613bd826516f2493f079ab8237f3883339bb3c1eb46aef8784b7cc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3f3992c44e72cefc75f8b0018cbef06589e1ae7350ea15c6f4e166a4663161fc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cc16b71300f133f38382c920e66fbdbccf46c8b524c59cf941b6d11ed0a7b46f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a7e7fb8b8fd87ee366a2fb1ff996e0fd68b4a0dfde3545271e3ed63771aafc32', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7cbc92e71774302158e799051f64d84c12d1cf13772dfd1b0353c4da987b6c46', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3920641e99667f0d07010c15d100559be6a6a9945289aa57d4fe7dd526acfdf0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/74a125b25289d522c1827c3f7051c6d647a96c8fb456752ae01c8f58e2112575', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4ae63bcac34132c1d4ba9c3bf5a25e6b409a09064cf8f85e48386af89fd3993f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/189b86baaca72cf236f91b17c93fc26bb79d8f58a034197a85e17b8b3356b8a0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/de14e25cb09a7fb5e37992a359c8fdb34f0599e3ce3af712d0c6e81a372a849e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7660a7132cc897f23f06d6d0ed75b2903b5bd7305f9f3ad62a9a05da7e8857c0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/772b27be6bfa1236b82c10ec4cbfbadf93a6adbfbf5683fd892fe30a5d574758', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c0bd6b24092348d9637306513b83174a222826475897fa09a08af9aa2871d871', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/976938591abc12b6514e114daaf95ce251c041b0b053ced2140cfad12dee6c8e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0bd2ae2fe59c801082fe482fdfe5123fb941b79a3b2d545e99a2b108efb83bf5', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5d0f4993cbdaf40015de05b614d536bbbc14c6aaafd6f47b5215f6371c1a3dd9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/44db8470a379552fbeb3c24a3e8c3ddbb47b17a6b109fffc3e7015187923ce7f', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1a68da3b400dd51d15bc8e22fc4312e8c7aca3c8839328deced37aad4ddcc06d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__true___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/285987f507e3f97f250f8b561569a4a8f9968f9c9db1f04da41d551f54866ce3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/afff4ff7c04aa2995dc4a6d6c79fee89d66e5531047d2e4a4a605b2c6b127530', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/087b7d83a145efab8aed169013331e93df327045babd54cc75702d98db55dfc0', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e3b44208fbda93af07ca3eb79847d6f56347496c7e00f7ea03969962601e4ba9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/9c0153f0a26883617155793a43904db35aba3789038af22131e9af28e5affb7a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e3530fafa7864af8f23f4e5c375987379119ff40ba0d1d9704f4857718097834', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/1200b38ee2d8b7aa8ddcbb897664f388c6d315df161b545eb08e8184ab9eaa5e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/490540b5599b94ac358c010e9d1db5ae1081b8ea298f31e3d0a9025af2e10be8', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/faa872811c568236fd8eabfa9c877660b7c21e4bc5fdda3b96e7b836624f6bab', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/813ebbb9b93253ced685e624fd60c0ad46d94afd3142b1a969fa7c1b6435598e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a81dbeb3f2b4763d22de72fef756d4233c5b7cb32254759b1ecf0594ff7c131e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bfbdfcd8ce1b0e9b54d0477d2797db1f1d5544effa13253a044cdf8b70dcb33e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/db21adc40430aa7329c5528dcd565dec62077772279d313506a64a1353cfbe8a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fcd6a13e20ead128f3f428c3972ac7100eed49ec818cabf249c7ec8e0bf6743e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4947e6c002461dfd8d10a907b73737e52c93f4a6f69679043ba820233d9db358', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/884e4face51bbfc7e3f6435921a0e850fb9077c9730584e37d1126564c70b20e', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/89fb5a9631ac576494df905999fa6276e15a07100744085dfa2639300fc81673', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0d6fecb1885fa8b9e51ef6c4b7f8814a9a9e1e976196a9e5a609d387b7329482', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dab87e05a97fc9823159c60e7877183f89df38fef4463fcfdaa16028501b7788', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ed2939d81a9614604be6ad75efae5178d20a27b4af07a2597f76f9ac09c24156', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/bf3e7ffb8e1c1c2b6737e0842cbb5cb7ae4000db940c60102ea0c77d6e4043af', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/747c460c7468ab3c84cd815b8ee7311c2f61ddb6ea00746c1b1461de4b89d381', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f1acfde4fd110994ddb7d204a07aff97716301d9a2079109123316152da9d92a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/71194c02488a474259dda65cc79e424135a9e0108566438ba1e1f9fff7b85166', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ddd5d0eacd822ae570c5f77cf4ea1e327168ec381888c1e6054d9012600fb536', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3fc3a22d5220c14df852efc702549fd0955b2363ed27f23d1f479b13e7a7a5b3', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/2bc0eb16cf0e97eb33953f5b3369d6cb4ede8b1b8655873dcfe13441efc1d63c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/c976de9013b74198707c11257da415e86c6de9d4433b711505d2386dda48421c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ba9cf4263e2e456f2af42f1f45b7fa6ec27cfe2a50782556dabcf97001222dd4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/91fc1e60a91672c3941ff8c25b8869df2d21bd827496ab6634c42c8969efcd01', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/283d30caa68f0c9c3a8e7a80a44af2ea3abad59c83a6bcd855032dc5f3748f41', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/a85108bc722eac71d559b73258060dbe5fcc88b3cde2b4fd4a841fb343afcab1', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7fee37292b9bc884ef482abf9432b3dab87cf9cb9c16d35154b3e4de2ddc6190', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/021b3ec23d6ac91e8aa4d202958216c73de898bd9fd37b94b49610ecbbc5f224', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/cf202da6575b23e19dbc389a54b34cd25494ae230d8d990033291aa56cb323c2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3d32595afc90ad1b1c0de7fadfeea1600325769547979ae84809231d3de229bb', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__false___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8181af921687b0621cfa8a53f0f3ca1a3bed8799f39aff8f123656a8ddad2abf', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, store: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/4b2730a48d5f064419c08f7c2b4a352012444a4ff711e9ea41433dac868c8d40', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6864ff6c5490d5b9373cf801f44053ccb333f68bfc22236564bcac29197d6d25', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/f69fe2c8dec8b89bf8cf0b67b3af62c426bf228c9df616aa1ba4081a64ab1d03', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8bc72ee0a632f3d26d130bfc5b424b5042d437afaf6925e45e664cac61bc516d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/dde5508e7e8a03a7ca748d8d9d470d3e466ab11b8c629d4617efbf5e88a6c69b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fd90a6d489787e80f27311e94b62363ea565d384ee2a67b35bffb87e451ff7d9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3ed5f36dcb3313cb82e38bfb34c26dd35a746283674e72b535afe9872c277fbd', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b7e9c644fd9b12f44d67f54e8f4770983f079e83ee20f8890e8015f421f36390', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/da82a075f1da4000f5e6c63a014c3a2526c22de37f7bd58418e125d1b663c9c4', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/03ddb0a5a8dd988cbc067c61529fde6a2c8c4aeeb56af5136f6d67925e887dbe', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/806cd1f27251134ab8cfcca64654612be6730993d18970a238f6d34b82b78898', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__true___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/7cea08474442c7aee3acf07f5eccd62f7e083e9b619e66e900bcee1c0bf83f91', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/75d060a8b636458313823fa7c8aed335c01d2864f0afc2fc3547a294a50c2e51', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/845df770ba9953e7002819e43615fd288fe196ceaf8e7515c1e3ae6f3542d8c2', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/69863a327516594f48663e8e39cad990307f0147de1f67be13545b0aee1f5fc6', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/b04c445a2631c0fdfdb6c9279dc61a269ee3b99055bfa3cc2a44976b757006cc', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/6542ff241cb3043e0c85f89304d14204dacb59f9193224023648e7a023514311', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/20c194ab1f17579246f9fd5e7e818054856dd67bbb31f0af9c1bfee376a83953', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/da44f15e3e3dc3754ea59b38cbc6e1eb015c56245d09f93480b210adc50a02ff', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5246060ef22df264f39d30c9e7dbab89f84c58d8cea011dd6b3bb3b4cbd9b4e7', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/e15a4a131cbb5fd64178bb93df7145e7087879560ae595675843c9dc6e4c4190', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/0317efdc32f7617da6165ed62ef6194947aae8d9badaf8ed0265d47e9fcce5de', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3c8bd83273729b3654b479d98fd65999fc6efe2807bcfef9db281dba97101ec9', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__false___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/634f875b786a905cad909c390c63848ab198fcc0ef5a920486e9a4df57a44619', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, compressed: false, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5a2f340eb7807131e59d115ec8dc85fff4133c64e3185d21ac1696b5230a2f90', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3b618aa9f273622094247c9c7713733a8ee1832e30f0faa6388d3fa43da81c49', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/22b3ed246c57580581c3c4749958593210ce9457ce5230f09f8636a679bee02b', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/59bbbd1a103a95573437cd02a3d3c7fcf2b7b813ac072df3a9e76b6b200575ab', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/5f4f7dec90b70206ac18403df265364d4d8e88ac59f7e87b2da990c117e2aa8d', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__true___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/3571bcb8ed6653a0f3bd8243946875708a846eed2b3d8f535a1825f393b26738', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, replicate: true, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8ebcf307fce710dfe39b806170bf5339d6eb05a8ea9b5772cd98ee42e2974b8c', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: true)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/91d12231f63ef63aab4d0a2067d30a08c8cba63e222325a5b4cd598f6b8da09a', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: true, &@callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/8fe6fad9d4dd7fc7de0a6d7530aefe1bdc5b520471da331f172d2cf3fd64a9ef', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: true, callback: @callback)
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/ee1d46a6cc9afd34fea8499b7a1efd53b963272f480113b9c61b551ebb949f16', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: false)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/fc9acd5ccafc78ac6cc16ef1d0b9e09b71c2c1e64e6d8504cce0c7b0403b3f33', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: false, &@callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


it '__channel___demo____message____hash___it_is_____store__nil___compressed__nil___replicate__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key' do
@pubnub = Pubnub.new(
  publish_key: 'pub-c-b42cec2f-f468-4784-8833-dd2b074538c4',
  subscribe_key: 'sub-c-b7fb805a-1777-11e6-be83-0619f8945a4f',
  uuid: 'ruby-test-uuid-client-one',
  auth_key: 'ruby-test-auth-client-one',
cipher_key: 'super-secret-cipher-key')
VCR.use_cassette('examples/publish/66c8456d464b5705e28f480e4dd264029743ee518ba5c7f9afc9371b94203619', record: :none) do
envelope = @pubnub.publish(channel: 'demo', message: {:hash=>"it is"}, http_sync: false, callback: @callback)
envelope = envelope.value
expect(envelope.is_a?(Pubnub::Envelope)).to eq true
expect(envelope.error?).to eq false

expect(envelope.status[:code]).to eq(200)
expect(envelope.status[:operation]).to eq(:publish)
expect(envelope.status[:category]).to eq(:ack)
expect(envelope.status[:config]).to eq({:tls=>false, :uuid=>"ruby-test-uuid-client-one", :auth_key=>"ruby-test-auth-client-one", :origin=>"ps.pndsn.com"})


end
end


end
