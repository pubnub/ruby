require "spec_helper"

describe Pubnub::Revoke do
  around :each do |example|
    @fired = false

    @callback = -> (_envelope) do
      @fired = true
    end

    @pubnub = Pubnub.new(
      publish_key: "pub-a-mock-key",
      subscribe_key: "sub-a-mock-key",
      secret_key: "sec-a-mock-key",
      user_id: "ruby-test-uuid-client-one",
      auth_key: "ruby-test-auth-client-one",
    )

    example.run_with_retry retry: 10
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1913", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192245"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yrnlKAfxg7lwdBsspoczRla4kG_FvWgnoabErwO5xFk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1911", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192246"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "81tB5Q_uWenR0qLv1_hVMqAUvaikcAqJCcOIJelfa7Q="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1912", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192247"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1qfQBQZK3xF1sXkRTYrO0agRVINoN13pkXiqYTUmiW0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1910", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192247"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1qfQBQZK3xF1sXkRTYrO0agRVINoN13pkXiqYTUmiW0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1908", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dfYpcUT9bhwq-S9Bm953P3yvDcT1sych1X14GqUNdbI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1909", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192248"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dfYpcUT9bhwq-S9Bm953P3yvDcT1sych1X14GqUNdbI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1919", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o4scwr2DeTmsisP1ySfawme6yV0ErMOgW33_v34jRmc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1917", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192249"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o4scwr2DeTmsisP1ySfawme6yV0ErMOgW33_v34jRmc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1918", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lEyd7I7RBS8WVltj8CMIISCSkjhKyUTTmWB-AUbRsJs="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1916", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192250"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lEyd7I7RBS8WVltj8CMIISCSkjhKyUTTmWB-AUbRsJs="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1914", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192251"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7i7r4fjTpQNv0PcDjT97IEKtjkth5n6mksOXKTDmwFI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1915", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nBmxYmES0qFbqxsNZJbABYWtfGTHB_JQ7NQATCr7A1Y="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1925", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192252"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oJ6PZlJV4TYRHY3PQSgknKqVVgt3hUA67tCmcfhG0So="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1923", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192253"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tAx02NZbqbA7SOIkVDs8ZPIdAtuMd0SFl1wH_chGnrU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1924", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192253"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tAx02NZbqbA7SOIkVDs8ZPIdAtuMd0SFl1wH_chGnrU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1922", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192254"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lz5KHZgpahuw1yRM8Qv9OJxvEi5x1YfTxTYOcrXOlZQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1920", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192254"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lz5KHZgpahuw1yRM8Qv9OJxvEi5x1YfTxTYOcrXOlZQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1921", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192255"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ypX68jfjs912SIM8c0R_XH3N0xFiMUHOXXwvrX516FI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1931", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192255"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y5ZScVM9jyuG7vMwDOHsOVr1ciphH6OyZYNKVeI19lI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1929", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192256"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0n7qDw3LMfQzJ4mAU6sI5wnbhUOGXL1KDWZOenb_aZU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1930", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192257"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7BkuYUQuRVF7YZC-DSu664V1vqJIwBPDcTIeqGiTFGY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1928", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192257"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7BkuYUQuRVF7YZC-DSu664V1vqJIwBPDcTIeqGiTFGY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1926", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192258"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GJ_TE9Mgkrhh_ZWA-656SNypP9jmD2IlJHOCHqlu9E0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1927", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192258"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GJ_TE9Mgkrhh_ZWA-656SNypP9jmD2IlJHOCHqlu9E0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1937", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192259"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yZCcx96PcL6myp_hHt3UC88ayilu_bJNTbFsnqBoJKM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1935", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192259"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yZCcx96PcL6myp_hHt3UC88ayilu_bJNTbFsnqBoJKM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1936", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192260"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nZ7IAo2HLVrdx-WQh1aZjh0Y0MKes8fDDOn3BWkBI1Q="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1934", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192261"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j-Amo6fE2L9lYKPcb3E2gj36CuMJ52RyHJIY-3kjrwQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1932", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192263"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4-GlMv0lw-mnDv7YoeTEfwANoMB0eHweXLzAwrzSYXg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1933", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192264"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uxCedcH9CdROrL6dOcJ2AKIPw_IZ60rFUk15V2XzEBY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1943", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192265"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9gLreCV5tJX75_ETKSDqOF8R0Jcc4yK4PHDaL1eEoyA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1941", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192265"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9gLreCV5tJX75_ETKSDqOF8R0Jcc4yK4PHDaL1eEoyA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1942", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192266"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nvFkOjrXLB0R_TMVbsl5tVMwSQaa9mHrljqHqyYLrgU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1940", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192266"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nvFkOjrXLB0R_TMVbsl5tVMwSQaa9mHrljqHqyYLrgU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1938", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192267"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uAeRa8CUmkFattSJty4vODa39gNQfJKQGvMXgZ30uyk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1939", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192268"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ukAhH63VKHoJLW11Zwth9kcEoj76cfF0pVj3RQsddXQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1841", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192268"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kQ0aCw4QvN5FBT7q9ePd5fO6vpWgWf2OSxKip78lvjA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1839", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192269"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lWtizMAaKv8MQStSAyN2LEkaLkA4Ysd7lWZmQlmqO2Y="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1840", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192271"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T2-SUpW6fgUL2rUJWUP0DB_FybzzSCRo-OfgpQFW35E="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1838", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192272"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tsrX2OQpjSktqFW-TEiz484wVYOr-9a30DnldqZqUL0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1836", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192272"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tsrX2OQpjSktqFW-TEiz484wVYOr-9a30DnldqZqUL0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1837", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192273"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4X2LA34qoD5F42MKJsV3_COJTCQXwT7NUefsFXnJPi8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1847", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192273"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DEmSKCA4Zl_vpRIG-zDO31rnW8ICcwpf2JbianG9lxI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1845", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192274"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LqZi16dyvdRTI80PzAMBSCjNsSiGRrC6sovsWCDCN5o="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1846", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192274"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LqZi16dyvdRTI80PzAMBSCjNsSiGRrC6sovsWCDCN5o="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1844", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_lAD8x2GQK7WEeO2xhn-FF9R1Ll5Np57peRZJvxZ6OU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1842", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192275"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_lAD8x2GQK7WEeO2xhn-FF9R1Ll5Np57peRZJvxZ6OU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1843", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192276"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0DHlMku0XdIqM1Cr5EsA87Qv8Dq5ZetRrt5i9T9p81c="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1853", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192276"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "43UkcEo9rmlTDgTg9GScWqe5fmnJ6hoGY1-oBKNezxg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1851", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192277"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0mhgjbQZUK0eyME0quPoojfaX9byRfhThmzyuFBa_1s="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1852", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192278"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "32ClFISA9Tw1BovdiyfOucEWwj0pGa6UdD9VE2TT4x0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1850", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192278"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "32ClFISA9Tw1BovdiyfOucEWwj0pGa6UdD9VE2TT4x0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1848", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192279"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DMClQwXCmGyHEhEkNDUHKnLbm94DpzAQViwvAL7FPfQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1849", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192279"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DMClQwXCmGyHEhEkNDUHKnLbm94DpzAQViwvAL7FPfQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1859", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192280"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4L1myTiDU7XC3yiJPU0SR3Rly0MW1zUpiQTUv06a-Pw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1857", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192280"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4L1myTiDU7XC3yiJPU0SR3Rly0MW1zUpiQTUv06a-Pw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1858", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192281"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gvqWARGsIakjjegBYLMu-0IGhHhxOK4J5S5PosjmE4E="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1856", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G_76uPVPJlzxi-QT4fhOkGW6iPm0nugBBaTg61jomQQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1854", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192282"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G_76uPVPJlzxi-QT4fhOkGW6iPm0nugBBaTg61jomQQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1855", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192283"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OsaiIF87DWtiqlL_KENT1anOGQA_tekoEPdz4kZ_4RA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1865", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A4yFKJXeDvOdHGCqbWWu8X7f2RRoy94kA6Xi6ysWxPI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1863", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192284"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A4yFKJXeDvOdHGCqbWWu8X7f2RRoy94kA6Xi6ysWxPI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1864", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lC4gkeCeQDz1LauNEIQqA9Wu4z47NS4hEUAMmYYcnqg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1862", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192285"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lC4gkeCeQDz1LauNEIQqA9Wu4z47NS4hEUAMmYYcnqg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1860", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BnOm_u2E-sc5q8VE4UcfJGfJAH20jC13K0XkDWtwoWY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1861", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192286"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BnOm_u2E-sc5q8VE4UcfJGfJAH20jC13K0XkDWtwoWY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1871", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8TqzuFfqc5Cfzr50pIy35Wdx2Lom2u6wV2ofSWwN138="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1869", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192287"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8TqzuFfqc5Cfzr50pIy35Wdx2Lom2u6wV2ofSWwN138="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1870", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192288"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7ZxwvbI9semz1gn05BQQqUrBI2Ja5Cf7opKuFjNge5c="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1868", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fLs8tfXmhzTcgvy5_eC2kyOE05bThIScbcEp4a_gflM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1866", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192289"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fLs8tfXmhzTcgvy5_eC2kyOE05bThIScbcEp4a_gflM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1867", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DdtsauiIG-e612W1IzFf1ilYFI5-0PCRmKE0HH9VufI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1877", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192290"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "40ZYejj_NZLbotqALXu79PkKsaFIfhTIU5OexMdE5k4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1875", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nm6H4rYI5eROoyxg3chgkSJ0cZf1IZ88Clm7Knz_COQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1876", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192291"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nm6H4rYI5eROoyxg3chgkSJ0cZf1IZ88Clm7Knz_COQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1874", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192292"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NhkybNwt3GYU-WIlGmvmw4xi6XjKqXpGcr-0tSk2pT4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1872", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MaEmqXbG5DayTltedQzyUx1_fVelrESuDxFSfLdG-30="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1873", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192293"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MaEmqXbG5DayTltedQzyUx1_fVelrESuDxFSfLdG-30="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1883", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VFhZDCn7fKS8tgs5FPZbz2Fz5r5--n_VFaBsniUprJc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1881", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192294"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VFhZDCn7fKS8tgs5FPZbz2Fz5r5--n_VFaBsniUprJc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1882", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dDJTWt5YBs_94lZ9de4TkApKHWRAQzz0kzg0PyQe81I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1880", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192295"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dDJTWt5YBs_94lZ9de4TkApKHWRAQzz0kzg0PyQe81I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1878", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3yTlJD7JsANBR5EBrE19hXsMymMMEGZgcvlc1DXMYz0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1879", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192296"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3yTlJD7JsANBR5EBrE19hXsMymMMEGZgcvlc1DXMYz0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1889", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192297"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gjb1wnmDJKbWko2_uS7pU21umUAAjac0W6hLbfMu8-A="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1887", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192298"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LyE5Wd-bwYJmt9DTKnRuI1J6FkMtAOTM3txwIPYNY-0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1888", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192298"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LyE5Wd-bwYJmt9DTKnRuI1J6FkMtAOTM3txwIPYNY-0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1886", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0FHqtRNNr3MpIoMYHghGkfXb8Dps4rKbUv88jc1W_HY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1884", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192299"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0FHqtRNNr3MpIoMYHghGkfXb8Dps4rKbUv88jc1W_HY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1885", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yZRSqOJw-16bsV0IsoacdKsVfTXowbDGK7bGJryfOIs="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1895", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192300"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "s25k9OUVkJ0avQRIlvkOz34WA1FQXI0tDaNhn9q0Esc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1893", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192301"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "An9QuQ5ki_EtT3VcdbdLDmZmb0C3evOTlDSVEwseOxg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1894", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N_kIgb6L_AWPNWHvKgogBHjNhrsMYsGhR5d6W53rMnU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1892", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192302"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N_kIgb6L_AWPNWHvKgogBHjNhrsMYsGhR5d6W53rMnU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1890", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ALW1Z4gExPMw2Y_uQil0RkMliW5J10XqRNgGkX2x7bM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1891", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192303"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ALW1Z4gExPMw2Y_uQil0RkMliW5J10XqRNgGkX2x7bM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1901", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C91kgTrY7ZucJfhkMniuRGSe7TDVdiH_ePrFBnRYYLg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1899", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192304"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C91kgTrY7ZucJfhkMniuRGSe7TDVdiH_ePrFBnRYYLg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1900", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WJmFQE00HVrZLIyaPl44VCBxeJQtl1mhQwe1UwRCeuE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1898", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192305"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WJmFQE00HVrZLIyaPl44VCBxeJQtl1mhQwe1UwRCeuE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1896", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192306"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BLcv9E1BDx2oZP8d2QCqi9Cg39nnbrlYlLDmGGC5_Ao="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1897", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192307"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vrH7aQHP74QgH_UsQwqOwO55dnVuCHmNt7nNQ1imGJc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1907", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192307"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CGcZk6C1piaZoGB3ea8DEjMetsXwoBK4Ijp_jHxFeaE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1905", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192308"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-lmxJr28OQ2NcIfRzdeeNq7qPVKsiIlAn5tBXhY4gJI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1906", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192308"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-lmxJr28OQ2NcIfRzdeeNq7qPVKsiIlAn5tBXhY4gJI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1904", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NO1CEjX3mbIOBp7mJ02YbRk5mpiPQ96BijngkwqxzfA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1902", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192309"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NO1CEjX3mbIOBp7mJ02YbRk5mpiPQ96BijngkwqxzfA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1903", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192310"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uVf6GJoL_xYOVMXJxJH1mXw3XGDoVhU_IonJa1ydoDg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1697", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZiqvFURek1khs6_3a5PgdaV8thMHLjKbVlorMJvSZvQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1695", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192311"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZiqvFURek1khs6_3a5PgdaV8thMHLjKbVlorMJvSZvQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1696", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "i4HA_aNZPP8coDN7mg-93aQSpobPgt3pOzcDSY0g0Dw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1694", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192312"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "i4HA_aNZPP8coDN7mg-93aQSpobPgt3pOzcDSY0g0Dw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1692", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1wJ8JevTAg5L9uNTsagt1vfqWAxQntHrbLlaGly8b9w="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1693", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192313"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1wJ8JevTAg5L9uNTsagt1vfqWAxQntHrbLlaGly8b9w="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1703", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WBs-skrWMcb4B7joi9GICgGygOcbHHJabPrtplvr9JI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1701", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192314"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WBs-skrWMcb4B7joi9GICgGygOcbHHJabPrtplvr9JI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1702", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192315"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "clSp7dfcwcsOCtKvFFhZOj2APQQZVocFfAgSZJvcJpk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1700", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192316"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FHhdiCmiDSkdJ788_a3rvmUkeVPN-RrpN3NBn-j7V_c="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1698", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192316"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FHhdiCmiDSkdJ788_a3rvmUkeVPN-RrpN3NBn-j7V_c="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1699", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NNAQmVV_wqMYuPKwmopVuOTbmDsUPNy2HaKGTqBH_sc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1709", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192317"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QKaqj3pQjiKhVNRvRZO7xooiasgje-rLU1xpAt1BThw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1707", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192318"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hw-GW_Jn_lyJn6M3S9-XbdXKJUFNt86SV0mhn2vKweo="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1708", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g0xfQnCiRnHHSOoJsMqxZQO1WIaHyTcrAyQIcwt2KOI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1706", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192319"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g0xfQnCiRnHHSOoJsMqxZQO1WIaHyTcrAyQIcwt2KOI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1704", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-7p5SbjkdOgido2t0kpnxbLPcUJ6BaOZ-kZ5eAgZ0g8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1705", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192320"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-7p5SbjkdOgido2t0kpnxbLPcUJ6BaOZ-kZ5eAgZ0g8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1715", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "y60BNKAEKmu1rgeomUPWIzMiHaE0gk7gcxuJyRgMyfc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1713", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192321"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "y60BNKAEKmu1rgeomUPWIzMiHaE0gk7gcxuJyRgMyfc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1714", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192322"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tyFpNSeKHWJyO4Pgp5DYKMTnsc1U0UKu2mQxJ_ljEB8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1712", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192322"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tyFpNSeKHWJyO4Pgp5DYKMTnsc1U0UKu2mQxJ_ljEB8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1710", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192323"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lqIOCUFBpS0e5tQ-c5NXbrE2RGVhKDoCEAvCntvpKz0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1711", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yhy0ToDuHYj23AnarSVghELZb0H4NpoOr7iyI7kpETA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1721", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192324"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ly8fV4y2DFIJCpX5cZSSBvrikH-MdQqNw3MDf_61HTc="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1719", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192325"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "esxE-4V0daBH8eIk2hVD89IwOZ5U9GUZV8nh6SyHxRw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1720", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192325"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "esxE-4V0daBH8eIk2hVD89IwOZ5U9GUZV8nh6SyHxRw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1718", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192326"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6xKLHLg5D4RsKnrSGWR5Efk292uTn84BFPhaYTlHBzY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1716", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "06xOcm84Bk0qrHiy5hBVuA34LBPY0wOGKyHAiex33-I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1717", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192327"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "06xOcm84Bk0qrHiy5hBVuA34LBPY0wOGKyHAiex33-I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1727", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192328"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wezAC5iakZ8rFvYjAq4BfruRXXvkBXjYgFi9nOcrqgQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1725", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192329"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pOAm96qOhC1p_YUdVezzaL2boW63cQ-jPUtPZ64bnq4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1726", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192329"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pOAm96qOhC1p_YUdVezzaL2boW63cQ-jPUtPZ64bnq4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1724", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KKsmQLxGAjdG2D9d_rwdU82P6ZEKPNWWuU2a-LoVeN4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1722", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192330"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KKsmQLxGAjdG2D9d_rwdU82P6ZEKPNWWuU2a-LoVeN4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1723", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192331"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oqPoA6t-EA9kc-KX16fFeFWOdaiKsgT1GPPOEST2JhE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1625", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192331"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C1ITgi-PHOPiUqZdtgV4iiQAAgMn3f0bUamXjn_eOFI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1623", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2JW6PSDZHhmoBb92DAGd3gmk5-ZXYXZAbeP4rucgtdk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1624", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192332"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2JW6PSDZHhmoBb92DAGd3gmk5-ZXYXZAbeP4rucgtdk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1622", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192333"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IbmimXVGtxd7vgW5leopMquUmk63PI4jyOQtsKeehwA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1620", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192334"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kqd3xOPeq9duVr_mQDiebVp_mce10cQCeIbKILS3i0Y="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1621", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192334"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kqd3xOPeq9duVr_mQDiebVp_mce10cQCeIbKILS3i0Y="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1631", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192335"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lyPTCrAQbycrmKq0d7fEbqTwGYon1Zc7ZTERZC3JHuo="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1629", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192335"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lyPTCrAQbycrmKq0d7fEbqTwGYon1Zc7ZTERZC3JHuo="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1630", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o20Qdj-u1EONwBNPte5GwL-U6cX5XbRf7O6nAZ6Z06A="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1628", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192336"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o20Qdj-u1EONwBNPte5GwL-U6cX5XbRf7O6nAZ6Z06A="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1626", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192337"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bsSVZ2ojLMBWOXVicAexffQupdods0_zGmFcR2t1IAs="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1627", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X2pEJwQrSxULsomQk94Ry3Fvq8-DzaIrxnl8CVPEZj8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1637", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192338"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2eP2qiIDUOZgVXvdNEC48eOfsMQtHjUTX5P_-M2-_i4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1635", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JbFcar-4xfUan5uWHoV5_aW8BFwKgloaq5cwb7XHnnk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1636", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192339"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JbFcar-4xfUan5uWHoV5_aW8BFwKgloaq5cwb7XHnnk="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1634", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192340"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HN9oEWy8Fy8qzcSNWwfB7FUvXUL-4_ZM9rfJPLT2arM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1632", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192340"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HN9oEWy8Fy8qzcSNWwfB7FUvXUL-4_ZM9rfJPLT2arM="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1633", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192341"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xwh0L8HpXBMtX7BjKQlxgZUxlD8js1k9V5yrKDqF1G8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1643", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "voT1vwJNr31HAdJvKxa8X7ynx2BRde_Sy0DnvXFkO6I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1641", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192342"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "voT1vwJNr31HAdJvKxa8X7ynx2BRde_Sy0DnvXFkO6I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1642", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192343"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FUhV0IjqJ6wUcqE2fTfMuky1HMsLSkH4snxslfX_EWA="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1640", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FnCZauddPpGDSxTqxqQRyS2lEBOCftzH2DQywjPS14g="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1638", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192344"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FnCZauddPpGDSxTqxqQRyS2lEBOCftzH2DQywjPS14g="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1639", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192345"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fDBksvy3M_GVqyiwLFomHruixOB1vuc44j3PQCcxD4U="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1649", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192345"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4jnJOX7frcVVD-FOaiE_7JjNXb9VNbiK6Lo-2KE4tSw="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1647", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FmiaVsyK1BuDBwLYLtCDnDJx-foJAuEGX-1R4cX5Jso="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1648", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192346"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FmiaVsyK1BuDBwLYLtCDnDJx-foJAuEGX-1R4cX5Jso="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1646", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192347"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lzqV9BK03oFZDrJHRZwCN_usgvzujDQegGqTf5car74="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1644", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1CvWVxAkaPKteGeBX8wRp8O_dUXkyGTWUbHwXGdXpO8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1645", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192348"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1CvWVxAkaPKteGeBX8wRp8O_dUXkyGTWUbHwXGdXpO8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1655", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K6TmRajUIr-SKYK76N1CtyPNGEjv0AxPzDT1d14m8Sg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1653", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192349"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K6TmRajUIr-SKYK76N1CtyPNGEjv0AxPzDT1d14m8Sg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1654", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192350"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BNRJeXIezCOjcbO7ORTlbWel2T5QUXy5M2-JPhD5M8I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1652", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192350"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BNRJeXIezCOjcbO7ORTlbWel2T5QUXy5M2-JPhD5M8I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1650", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lp1axpvpXqR7Nrrc67Vt724FJWFH8dClQ-pdgrSK5AQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1651", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192351"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lp1axpvpXqR7Nrrc67Vt724FJWFH8dClQ-pdgrSK5AQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1661", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192352"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2dQSfWmfz4AjJ5elZclGDmTy7piZMRDCAgKjX4iQcCg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1659", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ilAsuik_sUNJxZQ4HtzdR1GszPn1eSo4ET_x6TfWtl4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1660", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192353"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ilAsuik_sUNJxZQ4HtzdR1GszPn1eSo4ET_x6TfWtl4="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1658", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ahtKx2GVUfAOALSUrEj4CxGfkU4E6xGyokVKQ6LgeJY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1656", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192354"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ahtKx2GVUfAOALSUrEj4CxGfkU4E6xGyokVKQ6LgeJY="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1657", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mP1P6qgeAII8KfFmovKkEodGaNwcxKMMhM3Pe3aGZ_I="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1667", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192355"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ctyYuPVelbLJycaWxmSh4E2W4JAW7A90JYImwFIaE9k="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1665", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192356"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ETPlcgEfOkTjh-lOPiqj0L9UN5Nk37zxRbFHiicFeI0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1666", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CqH_OBwmo23Cmx-USKNmN5Q-5v-7CwtXEv4mWIsursg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1664", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192357"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CqH_OBwmo23Cmx-USKNmN5Q-5v-7CwtXEv4mWIsursg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1662", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wv4HeHrELj0GFSYXxoVxX6rYyMotERTjf9Jnc7AE2fI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1663", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192358"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wv4HeHrELj0GFSYXxoVxX6rYyMotERTjf9Jnc7AE2fI="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1673", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ePFM1UqAk1bCbWXrY62IJ9KWdtI2gmK_qsSWD1RQnX8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1671", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192359"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ePFM1UqAk1bCbWXrY62IJ9KWdtI2gmK_qsSWD1RQnX8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1672", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192360"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9XN8ngL6KR7E81XnVvPi__tIC2dmRDqlt7zZNRtvVj0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1670", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192360"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9XN8ngL6KR7E81XnVvPi__tIC2dmRDqlt7zZNRtvVj0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1668", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192361"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UMROkoQRzEhMnfO8C2ZFUkk4TIs9tNwyWTfTgBdlpqQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1669", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192362"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6K6ZilLIAJAgi4Joswv3PeI38wyvYYejVsK3oia7d7k="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1679", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192362"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2juAmIkBw-GLenWyNRsQGds_7YV21jEgwIvbTF3oQtg="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1677", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eOrexj4v_fxsA3oH6qF5Oi2VvumnbUa_i1KohGPm82c="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1678", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192363"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eOrexj4v_fxsA3oH6qF5Oi2VvumnbUa_i1KohGPm82c="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1676", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "d_vSR09EaHBE-Aii6EmrcPeITWIqzMcMWvNbKnrQeK8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1674", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192364"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "d_vSR09EaHBE-Aii6EmrcPeITWIqzMcMWvNbKnrQeK8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1675", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZwolWEgqiuhZAQFIM1rIaI7vfcryNSvQqRa8iYA5dDU="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1685", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192365"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dwJ346UjgpYBfsiB1PGA97NCsqqgqIeYHWUY_ovIEe0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1683", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192366"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hwf7jO7FxWYp_a7kfnywMbiY4_TS940gq63O2FYC6u0="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1684", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XmtGl0M-qa68hjKE8u3c9MO9BIZsOW1ujKIlq31ry4M="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1682", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192367"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XmtGl0M-qa68hjKE8u3c9MO9BIZsOW1ujKIlq31ry4M="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1680", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192368"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YtaR_vSyKAAExGT4Rarc0qf4GOQoeLaD81WojQ3rHH8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1681", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192368"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YtaR_vSyKAAExGT4Rarc0qf4GOQoeLaD81WojQ3rHH8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1691", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3Mod98yNFRJIvhqhgDazfWZZh6NmoswPhp9LsekI4hE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1689", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192369"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3Mod98yNFRJIvhqhgDazfWZZh6NmoswPhp9LsekI4hE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1690", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192370"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EC09svTWCLMNb4cpc8ivDBJSalN5hsTJMrIM16zlmC8="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1688", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yUJA8i7V3zUVeAbLt3VxfDCkoUuGGmN4aHkGYcPfaBE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1686", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192371"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yUJA8i7V3zUVeAbLt3VxfDCkoUuGGmN4aHkGYcPfaBE="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1687", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w3i6sQdCmB_ajS68T6lWhTikEmfFrYn_oQ0MZGTC9Uo="
      envelope = @pubnub.revoke(channel: :demo, read: true, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1805", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192372"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "u9rlnzsOYNWd2y0d93-tWy7Jus9H3Yg8bg21084q5Uo="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1803", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "clKzNpTRQfqvMryL3calbPnMssImMCKMg_0JsuKMH4o="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1804", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192373"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "clKzNpTRQfqvMryL3calbPnMssImMCKMg_0JsuKMH4o="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1802", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ken6vtcfwB55lmcRPCejO0yxrwBIRn56Uz_bmyGUIhk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1800", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192374"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ken6vtcfwB55lmcRPCejO0yxrwBIRn56Uz_bmyGUIhk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1801", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192375"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "10PVU0XKOJ5YGxNfOpUyPcWenD2a8lCVa3F_kqiZXuc="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1811", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RXyGzywBYZuf4Nuaaminw028ilOcHuJSClbwFtS0xUs="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1809", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192376"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RXyGzywBYZuf4Nuaaminw028ilOcHuJSClbwFtS0xUs="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1810", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kOgfTxanqz9xaCVk8cLikKhi6x58BDFS--bnE6770zk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1808", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192377"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kOgfTxanqz9xaCVk8cLikKhi6x58BDFS--bnE6770zk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1806", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192378"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CO0HD0sWvceN5fdmN7NLF8m0W2-5McScZmy_C9Ecfg8="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1807", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D2zWwP1hzMMnaNJ_PEc0mCDylls2PFcWxjVOFwEoIvg="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1817", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192379"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UcG1jKXnD2k4PTvKgwnHSuropq6b8d-BDA1e536sQ4E="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1815", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192380"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kNekHldqUuAD5maBjpcjCFXL-a7qJnPmS-aAnSPgQBk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1816", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192380"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kNekHldqUuAD5maBjpcjCFXL-a7qJnPmS-aAnSPgQBk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1814", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "umE1Z6TVwrL5p-6gbyq2tvbY5qbRb34naogRNC9m0Fw="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1812", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192381"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "umE1Z6TVwrL5p-6gbyq2tvbY5qbRb34naogRNC9m0Fw="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1813", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192382"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Encheqjwrq1NV49a4rpP5yE4vtt3DXLPdRaGdyQyRx0="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1823", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6afBuA1SmC2hR-9YprkPgb9Xfq_Ya0OAXVxsiJ0-gBQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1821", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192383"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6afBuA1SmC2hR-9YprkPgb9Xfq_Ya0OAXVxsiJ0-gBQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1822", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Zo49V-k5Hkec3sKWX5XuNNt41QTNQZSq3O2wB554XI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1820", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192384"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7Zo49V-k5Hkec3sKWX5XuNNt41QTNQZSq3O2wB554XI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1818", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3F2tcz7oke8tyr0LDBLTU-L_WAHqoM1eLcQQ2uomGss="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1819", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192385"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3F2tcz7oke8tyr0LDBLTU-L_WAHqoM1eLcQQ2uomGss="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1829", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R4Wwyh4qWhw-qOFydfSlydzGRdxElhw_xwDqe1JetqI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1827", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192386"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R4Wwyh4qWhw-qOFydfSlydzGRdxElhw_xwDqe1JetqI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1828", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192387"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fMqWxGpxaKMmKPzD6eFm3F44Lw59BLRPe9dd1EruUQI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1826", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XnGzcgfjOzUok4iB3q3XfbFRsE4dBP5j1JWDxdH39s4="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1824", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192388"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XnGzcgfjOzUok4iB3q3XfbFRsE4dBP5j1JWDxdH39s4="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1825", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192389"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m39E3eZfAW-zZbhERimaDwcbVTcwLIZ-RnXdjFvif1g="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1835", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192389"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AbcKF4mPPa-HCc_APNenUpSAoXpz8BmQH62zU2mlasA="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1833", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192390"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "epjlzf-oxkiqzhieKjIuX-W5Qhem_8zyS9J5X878HBo="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1834", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "reXHSr4-zHbf45TPIoTWfwpYMHMwDRilLIJwbnAD4qI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1832", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192391"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "reXHSr4-zHbf45TPIoTWfwpYMHMwDRilLIJwbnAD4qI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1830", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ec1JRVXMNmm91L-kxiXR5pMT13xyclhyc5uozY010QU="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1831", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192392"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ec1JRVXMNmm91L-kxiXR5pMT13xyclhyc5uozY010QU="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1733", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4GchJi-esTO9mdYc8TimWTV5noyXJPyfe2wopOT-YWQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1731", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192393"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4GchJi-esTO9mdYc8TimWTV5noyXJPyfe2wopOT-YWQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1732", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cTIYHTaiClHbQyRUFpSK2ESlbtK5dAxB2DuZJz3w3Bs="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1730", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192394"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cTIYHTaiClHbQyRUFpSK2ESlbtK5dAxB2DuZJz3w3Bs="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1728", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192395"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vL7F2hEKNkMHxNlSZB6m4URaBsuPsXWZJd5FP3rjWJw="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1729", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a9njl1tNVxx5FykaN9T2kqe0g8w5G3Peph3ntDwz_s0="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1739", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192396"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fNc3jKtD-GmL3ZQwWzMAf4ZdQ_RiXs3cCxSvBLyNfQM="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1737", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192397"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fzaFu24ymaZf51ByeoeZci8wt7u0RLmbNbMxwaSU-y4="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1738", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192397"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fzaFu24ymaZf51ByeoeZci8wt7u0RLmbNbMxwaSU-y4="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1736", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192398"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KD6PjOb2mikeLlUirT2FPGd_1eodlaZoKUWPkbGOXDo="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1734", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192398"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KD6PjOb2mikeLlUirT2FPGd_1eodlaZoKUWPkbGOXDo="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1735", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192399"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lkJQBSRBn_O485k7d4iDNdnMjtMgp2IxEjag1LlrCjI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1745", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192401"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "m19UWbrwvTs5IhxPINgnPyeBjVqE8yE_QqxhPc5ZieU="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1743", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192402"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QR8nUDwN40bm-evC7VlzTBmLhXsuBJxiS7JXWqySaXs="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1744", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5_y0XgwSJCSv59JT7Q3sIzn4Cr1M01xnkUOHKxZBmCk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1742", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192403"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5_y0XgwSJCSv59JT7Q3sIzn4Cr1M01xnkUOHKxZBmCk="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1740", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192404"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dLwiOFRPVuT1wyICKWFv8JTFKTPrDfSAA3WGUyTaijI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1741", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tyzda-F2Gz7_lZ8htYpkAMN-e3QI8rI64szwe5UCV6M="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1751", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192405"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MoFf1BoJm1T22TWNih1u-841nbmNvauqwh9vwzfmiWM="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1749", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192406"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CidKqbdUsKRCZ1Jd--sJ7E2LcfI6e6rMhCnh3-dTmDg="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1750", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192406"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CidKqbdUsKRCZ1Jd--sJ7E2LcfI6e6rMhCnh3-dTmDg="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1748", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YLJT4rdAQRFjY9ArOJ_59Z4rGmC2YU2svL2BnJuK97M="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1746", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192407"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YLJT4rdAQRFjY9ArOJ_59Z4rGmC2YU2svL2BnJuK97M="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1747", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZNd5SMsaufGh1mryZicWlG4U-ESrnXo1ybEIYAYEw6g="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1757", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192408"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HaRPDKqfcTNk-Iczz9uthXT8rzf_GZFQ3uJGY04d4N0="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1755", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192409"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "If_uyBl8dMYXohNu5yrrB5wViojbKKZkx3M-KdLgkg4="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1756", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WPXXZknVhX_a7CMibHqR3oR-NAWuCXLVorSvcpAyNBA="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1754", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192410"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WPXXZknVhX_a7CMibHqR3oR-NAWuCXLVorSvcpAyNBA="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1752", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kwR8r1lKHBi44i8ZeudU7eITtD9srayy0XdbSxrdVk0="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1753", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192411"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kwR8r1lKHBi44i8ZeudU7eITtD9srayy0XdbSxrdVk0="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1763", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D-paSZ-gr4inBmHa7-R_9dFud-H-q5h70vfGzzMAKSo="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1761", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192412"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D-paSZ-gr4inBmHa7-R_9dFud-H-q5h70vfGzzMAKSo="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1762", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3leqyMOQBvv6zs4RHpxNdpPxuXLSKuz9JVd44YYzNcU="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1760", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192413"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3leqyMOQBvv6zs4RHpxNdpPxuXLSKuz9JVd44YYzNcU="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1758", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192414"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ssOb3DmueztEl6s0ioNQrZG8pYFxnk4Sh3GJKNcSLEI="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1759", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LJajgiOP-Dg86jbhnEIg2MR-MPHRa2cqmI3QAOtXx74="
      envelope = @pubnub.revoke(channel: :demo, read: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1769", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192415"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PCt-4Aut3e_rUjRqKYDD_he-vgn17blEIIulD9BIEHU="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1767", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192416"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pWiuv_JDOhVHd9VdwNJFY7P-VGAft46EUsr64G9rfbE="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1768", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192416"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pWiuv_JDOhVHd9VdwNJFY7P-VGAft46EUsr64G9rfbE="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1766", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192417"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_96FMY9PO-AvFC8AyiGIlYuTY3z1HwgpsmEF2myRo6s="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1764", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192417"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_96FMY9PO-AvFC8AyiGIlYuTY3z1HwgpsmEF2myRo6s="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1765", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192418"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ULOlZLxQN_DPMHUoJYecmdbWKY1T0U4n9ASpovth8cY="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1775", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192419"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "B4OgucVpENLhhvhD4XJRLamkyc9hEuXPBILJBTkviQc="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1773", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UKWkjgSuA2YhDn9aQH8LBIKX0Y0wB966exhm2XqMMuw="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1774", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192420"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UKWkjgSuA2YhDn9aQH8LBIKX0Y0wB966exhm2XqMMuw="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1772", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ir6J1uBFX2BYnYdFbZpUH0KXdhVEetFDIi-xD_uYzqo="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1770", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192421"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ir6J1uBFX2BYnYdFbZpUH0KXdhVEetFDIi-xD_uYzqo="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1771", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YrjJ_VLEFA-b5ODnbfNfCdE_wVcui9cZ64efax-SHW4="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1781", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192422"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xQKGsY_Fvw8OjyK0VRS0csmShOP4clmIGE8e2oYY26Q="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1779", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192423"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0JZMW7ea6kf_a5fTjyA0J5L88wsYgIBvSGnzaHWPo3E="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1780", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aAjUq2UItBZyNVH1HWuwxhkRl6D7KSvbqaM9xU0X0hg="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1778", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192424"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aAjUq2UItBZyNVH1HWuwxhkRl6D7KSvbqaM9xU0X0hg="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1776", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bAgLoKdXuUHNeKirR475XMKeNAOiPexujBvxoUFirGY="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1777", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192425"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bAgLoKdXuUHNeKirR475XMKeNAOiPexujBvxoUFirGY="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1787", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aAs80YtiT5dPHSwJT4wTXwrOZH4xqw1vd38TUQwOUMA="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1785", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192426"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aAs80YtiT5dPHSwJT4wTXwrOZH4xqw1vd38TUQwOUMA="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1786", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192427"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "txqrl6dpnNI6wl21_RecW5mGnZ9dPuzqRSciEnDBq_8="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1784", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uvc3syECYnErDD-hNqtSJkmF3-fQFWiYxjYs-2KKlE4="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1782", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192428"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uvc3syECYnErDD-hNqtSJkmF3-fQFWiYxjYs-2KKlE4="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1783", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192429"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K3FCO5QpGC0Py8f4JqlJa2HiAk9xI7wBNvgFd5QiQVs="
      envelope = @pubnub.revoke(channel: :demo, read: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1793", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192430"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v-TFx6sjswzH0dhT98oz2b_lRTnNgHDJUiMDFV7kj-4="
      envelope = @pubnub.revoke(channel: :demo, read: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1791", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192430"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v-TFx6sjswzH0dhT98oz2b_lRTnNgHDJUiMDFV7kj-4="
      envelope = @pubnub.revoke(channel: :demo, read: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1792", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XKPsVXFqSfU3SpPnfZSY3kjfePLWlOWK8vgeEu8GxvI="
      envelope = @pubnub.revoke(channel: :demo, read: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1790", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192431"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XKPsVXFqSfU3SpPnfZSY3kjfePLWlOWK8vgeEu8GxvI="
      envelope = @pubnub.revoke(channel: :demo, read: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1788", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "72LvmrOW98FGu5gNTlsezNnt5jQ1z77YLIyMjt57Vs8="
      envelope = @pubnub.revoke(channel: :demo, read: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1789", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192432"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "72LvmrOW98FGu5gNTlsezNnt5jQ1z77YLIyMjt57Vs8="
      envelope = @pubnub.revoke(channel: :demo, read: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1799", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192433"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v9kn4QpEHebJT8YvGqQShO62gl4dGC9an6UBUhmzJLU="
      envelope = @pubnub.revoke(channel: :demo, read: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1797", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192433"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v9kn4QpEHebJT8YvGqQShO62gl4dGC9an6UBUhmzJLU="
      envelope = @pubnub.revoke(channel: :demo, read: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1798", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H4M96HLJJj8WpoYBnF8mizaesfmLrWQG4EuK4ehdayQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1796", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192434"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H4M96HLJJj8WpoYBnF8mizaesfmLrWQG4EuK4ehdayQ="
      envelope = @pubnub.revoke(channel: :demo, read: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1794", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192435"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JTmADaP9W3xJ7uCaiPuVjGF3CoC0VYTo86YUfrXJ9Qw="
      envelope = @pubnub.revoke(channel: :demo, read: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1795", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192435"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JTmADaP9W3xJ7uCaiPuVjGF3CoC0VYTo86YUfrXJ9Qw="
      envelope = @pubnub.revoke(channel: :demo, read: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1265", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6sXkVPImXoFXbSs2WcLZj82k99J1iuxsuRqOzQ4uQPE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1263", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192436"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6sXkVPImXoFXbSs2WcLZj82k99J1iuxsuRqOzQ4uQPE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1264", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iw93b2F4biof36rBFgiSXWmKc-DCazrOscw1X3ALlHA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1262", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192437"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iw93b2F4biof36rBFgiSXWmKc-DCazrOscw1X3ALlHA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1260", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192438"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R8jFOwLCLrZJU1xWbuyjI5hOhYLzonwVBGYnMuK-opo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1261", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r0MEi-niAORynvYUzY1AkYW6JWY89QflvLMPVEbS5TU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1271", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192439"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-eRWKU7jXjBJRWlNRXtUqQJP-yQvS9hHPw5U9kAB_8A="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1269", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RlIpL4UJyM0DjawAmLZbsxYYHxyTUwZTa0LM1SwWK28="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1270", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192440"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RlIpL4UJyM0DjawAmLZbsxYYHxyTUwZTa0LM1SwWK28="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1268", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8jl2IE50c8MKkUQJDrNOjtO8FDNZvgawJ1mWesAeM6o="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1266", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192441"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8jl2IE50c8MKkUQJDrNOjtO8FDNZvgawJ1mWesAeM6o="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1267", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xMxxNCHYAl3v10DQpmBrub8hbOt9SlYhyAQ9anpYEDc="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1277", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192442"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rySe9JijgsgeumaKc7Y0wfNMqrqHwKEeaH_xOXpIAIM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1275", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cgkCnNQIcQF79geJ76rx3LmX3logpD5dTV8SX2cyhXI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1276", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192443"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cgkCnNQIcQF79geJ76rx3LmX3logpD5dTV8SX2cyhXI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1274", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XmPXANAQ_ROBs9jOUzz9uQKG1_EZVraw1NNsDL3e7qA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1272", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192444"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XmPXANAQ_ROBs9jOUzz9uQKG1_EZVraw1NNsDL3e7qA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1273", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192445"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KPQoPH6RQHpWxc8mvrYqsvHDqpDtiqD20aoN8qBLOWc="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1283", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192445"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4bRvf5G9FgIvYrg8VkTpiyuz5Wx3qQzM3oWBvKscAdI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1281", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6wa_blvMsX7CcoyIuenZG8Wv88z2v_jHLF3euBo43m8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1282", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192446"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6wa_blvMsX7CcoyIuenZG8Wv88z2v_jHLF3euBo43m8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1280", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192447"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EbuvQb9ELksVoyzlPvvT10iiaVTOdcKFPkzuYqf52x8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1278", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kNV-ChUQKwnPZjhnvbkbp9aklYy7tNWA7wL37j8KpHw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1279", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192448"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kNV-ChUQKwnPZjhnvbkbp9aklYy7tNWA7wL37j8KpHw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1289", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "muu51uw-g_vH0D_DQQppc2X0LruExznyUxVVKTyaq7Y="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1287", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192449"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "muu51uw-g_vH0D_DQQppc2X0LruExznyUxVVKTyaq7Y="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1288", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ip3stVcG5OeZ9SSZPCZEe5JsgINDJbHQZ9hSiB9dNIk="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1286", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192450"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ip3stVcG5OeZ9SSZPCZEe5JsgINDJbHQZ9hSiB9dNIk="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1284", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192451"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rRudIo9f9En6twj6LOuQNesA4M9TigyHRbKuUNkc2go="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1285", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192451"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rRudIo9f9En6twj6LOuQNesA4M9TigyHRbKuUNkc2go="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1295", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IPGqEuuav668cygleJeOF6SX3rc_AFj_-VhC9TliPJY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1293", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192452"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IPGqEuuav668cygleJeOF6SX3rc_AFj_-VhC9TliPJY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1294", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192453"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c2Y1ahKExyOSjSkm7JEXcC8T1amEiJq4sUsIO-xYS5w="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1292", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192453"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "c2Y1ahKExyOSjSkm7JEXcC8T1amEiJq4sUsIO-xYS5w="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1290", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192454"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z2jY2pceoVafxUwPKotL_wcQPRyRTNblY_WnCMGc-7E="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1291", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oqPZAxAvOh53mRg9bcel2TPJnOKMK_1hHyDn6gbK3KQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1193", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192455"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oRzpbHh4ZBlwahueG1j1VIZUGDbivpzhlA2XIj0_pOY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1191", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NEDMUFM8-2296-clFzeIQ9t_YLk1s_wKumZBZMr1kdE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1192", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192456"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NEDMUFM8-2296-clFzeIQ9t_YLk1s_wKumZBZMr1kdE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1190", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v2KF3HTjwjOaKjcpOrpHCqa_LZPc6CDld0_RN_taOQg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1188", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192457"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v2KF3HTjwjOaKjcpOrpHCqa_LZPc6CDld0_RN_taOQg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1189", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N7y5pFzsmusFVish0PXPeYd7zTegYjgj-5FYJPje6IQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1199", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192458"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6xuzWUNhzmtA9ezpjpEIDrNBMAnx0-TGRICRgyWiGRg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1197", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M6P583T2BIiRLC09Tpeu1noo2Ar07aNrFhfNAJkqtlQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1198", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192459"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M6P583T2BIiRLC09Tpeu1noo2Ar07aNrFhfNAJkqtlQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1196", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192460"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2N-k4VzIfnR2NOCYfzTHnWi-snxfS8etT-NkXEmMgqQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1194", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192460"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2N-k4VzIfnR2NOCYfzTHnWi-snxfS8etT-NkXEmMgqQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1195", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v5R_P2JrnEDF5J72oEOKKedrybawZoNRYLhRqwr00bI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1205", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192461"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YzxRbqpkrrdJo3FQywQJz5l8i3k2KOjFFwxhEdly7K0="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1203", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192462"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TrnjXDOYA1XSptcRSCFIDCV-vjkDZa9mICHT6JdnNpM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1204", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T7dg3mMs-eC0HDGt2CT1PvP_nu--lAxD2pRxVb-7MkQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1202", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192463"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T7dg3mMs-eC0HDGt2CT1PvP_nu--lAxD2pRxVb-7MkQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1200", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192464"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yNcfXtyUeHifNbcam8Pp_IwbBQ4efAFs-kfwXwjJ5x0="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1201", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192465"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CHhqYXJkSGZHDrjcOfHtK-w_dpbGpLvif7TySVlDwhM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1211", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192465"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ch9v923n3FNAVzxnPUyrkbNf7i9Dh9LWGivoMVFmrY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1209", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vV8HJ8axqvJRudXbOZxSmizzBrNkHy8u3YWi1SrjRYQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1210", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192466"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vV8HJ8axqvJRudXbOZxSmizzBrNkHy8u3YWi1SrjRYQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1208", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eQlIbJbXiI0F8ZWtlJdIH8TWUdAqqgfDvKNtS6GBaUU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1206", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192467"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eQlIbJbXiI0F8ZWtlJdIH8TWUdAqqgfDvKNtS6GBaUU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1207", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CGcrNkEy2sXCMhVkPi-hjiUiNHLzdauSt7IXUTP0HCM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1217", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192468"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lw4xrU-RWD5w6EuXxUmqFDKp8zsOY8S0sVRy4hmXKDo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1215", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t6VfENh3xhNbXiqJeEQjXZxU3O34mm5Hz7kBZ0SzWew="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1216", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192469"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t6VfENh3xhNbXiqJeEQjXZxU3O34mm5Hz7kBZ0SzWew="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1214", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7gGLRer2n3KIh5vXQGKDLdOVuRshluFOD9OyQG8m5tk="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1212", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192470"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7gGLRer2n3KIh5vXQGKDLdOVuRshluFOD9OyQG8m5tk="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1213", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192471"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iUHX42uwZIsSVQ6Y2Hjrq26oNcCQsTGc8nCbEMLRrG8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1223", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192472"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RCi2rH7ILHgSUx72bGf_5TCIZvsaoQSv-SP_FpzU1a4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1221", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192472"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RCi2rH7ILHgSUx72bGf_5TCIZvsaoQSv-SP_FpzU1a4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1222", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192473"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nzy3iDv6dg58de-n1DBc9tlp5bzgTRkPO6E0cE9X8ZQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1220", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_mRvEZ8gnw7TUTqAuVTlIg628_Juba79N3g3yUF90ac="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1218", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192474"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_mRvEZ8gnw7TUTqAuVTlIg628_Juba79N3g3yUF90ac="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1219", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jnCW3m6mCOpPzJluUWQmc_btzW3tbNXbSF-HrsXPO1Y="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1229", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192475"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mLuazkQAoMTKAeG4tjrWqcsS1_5Fuca1E6a_G0x6Pak="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1227", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192476"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Lz4hI7G_kpGfLRo44-aGWfOfoyYJy7nDy17JlAt5aBE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1228", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OwhTrCd9baQOBDzxDwGUZpsFl5q8fRs15qRE84C5FkU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1226", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192477"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OwhTrCd9baQOBDzxDwGUZpsFl5q8fRs15qRE84C5FkU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1224", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FDTDQXoGJKYo_4poJOY1maHmUKUnX-tONoaLdzpjIfY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1225", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192478"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FDTDQXoGJKYo_4poJOY1maHmUKUnX-tONoaLdzpjIfY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1235", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AQ2rILJqnS2jU0r6XK_YrMdU-91jKmdPCJjNwEfIgJM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1233", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192479"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AQ2rILJqnS2jU0r6XK_YrMdU-91jKmdPCJjNwEfIgJM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1234", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ihxdQFgnGBNFOxEb845HHw_FQODnCdl8rIhM1iYHl9w="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1232", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192480"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ihxdQFgnGBNFOxEb845HHw_FQODnCdl8rIhM1iYHl9w="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1230", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192481"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P7HtjoUEK6ZRwYCoVPOC9I1n_XNnShM4zV0nT-IgGYE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1231", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192482"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mOsM_CZxAI5Dppu6Qctw1wRB-ODrybyPvrzbeiiEcBE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1241", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192482"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vi0cUXvoDLGeylHsRYnx6dYVdKAyELxXMsvMwIsFAyg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1239", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192483"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2y140qbwDfksE2tsfZnv0VPgdd4pqmXLs43DJ293R6U="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1240", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192483"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2y140qbwDfksE2tsfZnv0VPgdd4pqmXLs43DJ293R6U="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1238", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192484"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vv0kwqhwBsuSUsbx4v_ltvXqtRyQOzig4TQycJjur6g="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1236", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192484"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vv0kwqhwBsuSUsbx4v_ltvXqtRyQOzig4TQycJjur6g="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1237", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192485"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "98EQF8bmZturpkQ-9lESmBddG_Fkxf-5s5m-DZO_IWw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1247", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192485"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-Uq1W6vV6dricc9Q3UD_Zqem6xbuNhphHA71paDHaXo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1245", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192486"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LH91v5EZS8rJpz9wsIPP8mM1_awypA__BZwnKuHCwXE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1246", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O0iOH3V8UYNJ5pEiIKdZ9WP5XC8xtTaXd7wfvFB0TXg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1244", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192487"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O0iOH3V8UYNJ5pEiIKdZ9WP5XC8xtTaXd7wfvFB0TXg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1242", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "py8rjHkUhuZg1pJgDf72nMNoYmTaikilp0K-VNC5D8g="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1243", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192488"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "py8rjHkUhuZg1pJgDf72nMNoYmTaikilp0K-VNC5D8g="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1253", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Gn-_snxDxjWV8pwXkUGOhw_FDH36fsEKg-tK5r6XrGM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1251", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192489"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Gn-_snxDxjWV8pwXkUGOhw_FDH36fsEKg-tK5r6XrGM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1252", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "woStF26JkxhddRkv14RJQepomTWszs6Yfmnn1cPCBpc="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1250", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192490"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "woStF26JkxhddRkv14RJQepomTWszs6Yfmnn1cPCBpc="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1248", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192491"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "No8aoow2H3zWhRo18ibirPY95B4r1MyZeRaHbjmbbDI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1249", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eSFSuZpSQelIXZn6uQn1EY9U-SQEjyh4QiGRowX8qOg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1259", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192492"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7htZpPandJgr_yreg0Tc0Ctk1ymrsO2HevRpoV715kQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1257", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6AWP6bE1gJnUBN3Ldm2F3qoq3k_r1idAxrtyMsf05B4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1258", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192493"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6AWP6bE1gJnUBN3Ldm2F3qoq3k_r1idAxrtyMsf05B4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1256", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192494"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EarbRJfvjF7XRb7NGkTlQIarU_g8F0QIQZEBQN-kz9s="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1254", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192494"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EarbRJfvjF7XRb7NGkTlQIarU_g8F0QIQZEBQN-kz9s="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1255", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192495"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RrCmostOoYEbeVjaV1BXS-AcPz5Z4uQluCQCc99nbWU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1049", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192496"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IrCLMBoWCwGaNb912wz2GTnAemXvGby28r5iw19LIJA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1047", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192496"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IrCLMBoWCwGaNb912wz2GTnAemXvGby28r5iw19LIJA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1048", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192497"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iEO89ita1WZT2vo4ILayqqYxkW-81U_wRBvVOMpfI1k="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1046", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192497"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iEO89ita1WZT2vo4ILayqqYxkW-81U_wRBvVOMpfI1k="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1044", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192498"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-ssYAZqdKGBZxq5qznG6_Lx9m0egwV6wQX_T4GV1Ido="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1045", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192498"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-ssYAZqdKGBZxq5qznG6_Lx9m0egwV6wQX_T4GV1Ido="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1055", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192499"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JUKpceQt45d73z1L8ZV-P9S_BTlgoLXeQWxgDsvrt6w="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1053", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192500"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2NqHIgHEpU-gw-j-xobDOviyQB-lNIlOnah9vX3woPw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1054", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192500"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2NqHIgHEpU-gw-j-xobDOviyQB-lNIlOnah9vX3woPw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1052", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WOj8xAh4sahhHE6mvE8TH3q5UKWX1vDis9y6_F5P9x4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1050", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192501"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WOj8xAh4sahhHE6mvE8TH3q5UKWX1vDis9y6_F5P9x4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1051", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192502"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HZ-NSq06lzqFWHrzV7x4XyI5axbD-EgH0Os1ZX6m53M="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1061", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192502"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZbzNdYf8AqqWhlB5NguX8nWw1bMlr8Dtec-ATXH46RA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1059", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uBQMt7O7OWntc3yqAscoX7E4_31VPyn8iFDBTTkwR7Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1060", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192503"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uBQMt7O7OWntc3yqAscoX7E4_31VPyn8iFDBTTkwR7Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1058", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192504"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q6O3HfA_xwAJ_qN9LkizyUgSlupQt1A_bAY7IQWTyzg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1056", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ng5FlIJ9VyyN7xZ3J40-2TG5rVEv_P0LwAN168t39ig="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1057", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192505"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ng5FlIJ9VyyN7xZ3J40-2TG5rVEv_P0LwAN168t39ig="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1067", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BcxVgotFah0-6vGpwPezQyXkmD2XllUURXR5rkc0X1c="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1065", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192506"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BcxVgotFah0-6vGpwPezQyXkmD2XllUURXR5rkc0X1c="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1066", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M__alJKct1_7Qr3aJU6RUWXmag9p_CLWB2YpCmUla2M="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1064", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192507"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M__alJKct1_7Qr3aJU6RUWXmag9p_CLWB2YpCmUla2M="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1062", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M9mS3ckSOQ-d_Zhrw8DcA_kiBpWU2UhB8iuAabJ5DQM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1063", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192508"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "M9mS3ckSOQ-d_Zhrw8DcA_kiBpWU2UhB8iuAabJ5DQM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1073", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192509"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8X2wr_5Yws2GGrJK6FqMtGlFmTPwHIvDUvf8eRO7sFI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1071", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4TwQ7UFRvTu2UvtZBjBUiyrx5ZgVc3TMilDySiEpnzI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1072", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192510"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4TwQ7UFRvTu2UvtZBjBUiyrx5ZgVc3TMilDySiEpnzI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1070", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SkJKjBfy0JleX6VCBUX9-tgjTZw8xRoQ7F870pKwqPo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1068", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192511"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SkJKjBfy0JleX6VCBUX9-tgjTZw8xRoQ7F870pKwqPo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1069", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qzWPbzxltOAugq2pcwqjUI6o2Crs-my_NtovBzhtqLQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1079", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192512"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qLD5XUNuoAuUS7QBaAdjUvIDPiMpfAccu0A2fC4Dw-o="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1077", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IcR4e-HHqZWd-RQ4Ug8xJC0D1LcurRGI7OnHVEDwz84="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1078", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192513"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IcR4e-HHqZWd-RQ4Ug8xJC0D1LcurRGI7OnHVEDwz84="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1076", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192514"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O1HqdYxj7rvjWqvXK7hVNLKyEgLejkcMHZqht0G6IBo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1074", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192515"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "olc12ByH0txMIVeujWhCvfwyt7dRKeFuqc7_hEb3gyg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1075", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192515"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "olc12ByH0txMIVeujWhCvfwyt7dRKeFuqc7_hEb3gyg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/977", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192516"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DZe6HsKciBw8SJJafQRrt3wUJuxEwt59OA33bUyyfds="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/975", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192516"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DZe6HsKciBw8SJJafQRrt3wUJuxEwt59OA33bUyyfds="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/976", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192517"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4k03aHjlRTNPf55iI8L-RwV6_Uc5HSz-CY6m95GEsE4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/974", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192517"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4k03aHjlRTNPf55iI8L-RwV6_Uc5HSz-CY6m95GEsE4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/972", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192518"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PVrSxpxuXJ4jAg7uYpsXz6UdVNyZR3AyDGHNCFOQJmA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/973", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192518"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PVrSxpxuXJ4jAg7uYpsXz6UdVNyZR3AyDGHNCFOQJmA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/983", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192519"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eyAD8X8JC38n2rkY5w2WwkCRDTx6BBD5VWSH5DvVrzU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/981", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192520"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wW8E3dbwR570rarLayZL5m678-ycwSH9gn7Y9SKpGOg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/982", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192520"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wW8E3dbwR570rarLayZL5m678-ycwSH9gn7Y9SKpGOg="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/980", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192521"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "idmp3TOabQmYb3LaT3w9_UDIs1Yhxyt0dQnV0r53le0="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/978", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192521"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "idmp3TOabQmYb3LaT3w9_UDIs1Yhxyt0dQnV0r53le0="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/979", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192522"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "N-vPa-Vd0KV6gkaXLrn2PIOeIbwuqWEmLDzFwdaRd9o="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/989", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192522"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UD1fLgQfZ109jETeWVIUf5DNqWwwOOPn2IPQBMk123k="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/987", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192523"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PtCXZkkJ4aF0KD4MlrBKlBqkxWHdqECdBHCG8mTaNDM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/988", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192523"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PtCXZkkJ4aF0KD4MlrBKlBqkxWHdqECdBHCG8mTaNDM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/986", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192524"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UHDZXjeZiaT7MzfRasab7Tgqp_ukqt7hknhgkcQTfEQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/984", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192525"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O_8LKSg00HaDpQDKffsC9HwYqe9khh2waAK0WS--BV8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/985", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192525"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O_8LKSg00HaDpQDKffsC9HwYqe9khh2waAK0WS--BV8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/995", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192526"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bLgUje7c940LnutsfHnhLdiQmpJsGG30gSsOfr5zmhs="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/993", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192527"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2BSt6y9lsq8Pfp7RtYp2su9io7qxw26jF5iKi9hUSDo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/994", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192527"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2BSt6y9lsq8Pfp7RtYp2su9io7qxw26jF5iKi9hUSDo="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/992", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192530"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sSzPDrhgrwUSAQTVjN2yX1gmUVHo2lmf8y286K86sko="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/990", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192530"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sSzPDrhgrwUSAQTVjN2yX1gmUVHo2lmf8y286K86sko="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/991", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192531"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NU8INTHu3rzp90ZQ7KQFk7IVQPnsr5xCaHz8FrqKE60="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1001", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192531"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9GsQXfYDM3JpYJ7nsiUNWrxbYT7b4WnTLRhdB6yQ7VU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/999", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192532"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_c0FmhjTxvFGI1DwhTE3PYbnQvFFCWuYlRTkkU421Vs="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1000", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192532"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_c0FmhjTxvFGI1DwhTE3PYbnQvFFCWuYlRTkkU421Vs="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/998", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192533"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_UK3ZQ4W_F7Yeq8RiUtlWRPlr6CGPvwJBaumyJUwocc="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/996", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192534"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_KAlk3DwTLnUKaYyNnq3YnTokvKERJJpzvZjnw8Sl2Y="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/997", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192534"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_KAlk3DwTLnUKaYyNnq3YnTokvKERJJpzvZjnw8Sl2Y="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1007", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192535"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0jBzJGQV1faeZs9dcHQ48842g6RlMqrat0ImTDFnE0Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1005", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192535"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0jBzJGQV1faeZs9dcHQ48842g6RlMqrat0ImTDFnE0Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1006", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192536"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Sul0Hsjlf0P1oePQyUy7EXj90UY-OE-dMpt48sk84zA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1004", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192536"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Sul0Hsjlf0P1oePQyUy7EXj90UY-OE-dMpt48sk84zA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1002", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192537"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lw-uC81mhnXhVXoNsxUAw3uwbBr20UhhJLTWhTUcwz8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1003", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192537"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lw-uC81mhnXhVXoNsxUAw3uwbBr20UhhJLTWhTUcwz8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1013", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192538"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oOkdE6SOTXCbe4_FQWvcqV4BuwGEjxzgInMKSnmlOZY="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1011", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192539"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nw9YXf8FtY42sDIvxsIQrWC-jZEaviZWSxyj8QnFiq4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1012", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192539"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nw9YXf8FtY42sDIvxsIQrWC-jZEaviZWSxyj8QnFiq4="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1010", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192540"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EUXnI_edQ2CL7Hnjk4GXNqpO3yg4H4nOpPM0VCrUYUI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1008", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192540"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EUXnI_edQ2CL7Hnjk4GXNqpO3yg4H4nOpPM0VCrUYUI="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1009", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192541"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_UzD9kfgsUm_HSfjDqkMF858fo8sx_U3egfLedVSEHw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1019", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192541"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uw5mJ40zaQW-nSThY6HYuO_Q75pCA39J9VhjlxtDJCE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1017", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192542"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2046eWZlF_c6nAYLMmDe9oOR4rLeS5DsI_fsMaMJGig="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1018", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192542"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2046eWZlF_c6nAYLMmDe9oOR4rLeS5DsI_fsMaMJGig="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1016", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192543"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ib4tprD8tmyzzEU5qv5mZdalkVufp3Ubg7cR2CdDYLE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1014", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192543"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ib4tprD8tmyzzEU5qv5mZdalkVufp3Ubg7cR2CdDYLE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1015", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192544"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7-CU5pnSSBPoGQkUB1eoldqrMrXpd-Qy7vtZdLCX-R0="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1025", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192544"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sLQ_yqNBU9Cuf7a4jyrmkACdVhJslG3NgQLg0UjDhb8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1023", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192545"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UBED4soQv5TtwxYdPDmNQ5dXAr_4fCONtaQmdqUQAtw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1024", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192545"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UBED4soQv5TtwxYdPDmNQ5dXAr_4fCONtaQmdqUQAtw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1022", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192546"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qAz_eCWVhpICTfFObRUIkMF9SnCqGyxBldL5gZeKVMQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1020", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192547"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U0m3LKYNO_8WR0ZfmZy6GHAa2btJ-y60dBwIFff21yE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1021", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192547"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U0m3LKYNO_8WR0ZfmZy6GHAa2btJ-y60dBwIFff21yE="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1031", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192548"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gGYoa54ZXsoxO3VI054NArKno4EWn3T2HphHB36-QJA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1029", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192548"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gGYoa54ZXsoxO3VI054NArKno4EWn3T2HphHB36-QJA="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1030", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192549"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CNwWP2f3L4tbtVv1w9qOKWCtQTwO9UnrcWl0k3QYK_Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1028", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192549"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CNwWP2f3L4tbtVv1w9qOKWCtQTwO9UnrcWl0k3QYK_Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1026", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192550"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Nzt267pdw-o5gO9mubAFyTtmWp5Dny5zp5QfAuzYfNw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1027", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192550"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Nzt267pdw-o5gO9mubAFyTtmWp5Dny5zp5QfAuzYfNw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1037", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192551"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UkMbQNX7zjymtauPyiGS_JG_0TWa8gtbYhsDszVjygM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1035", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192551"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UkMbQNX7zjymtauPyiGS_JG_0TWa8gtbYhsDszVjygM="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1036", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192552"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FZxDLpt-C_9QYJ2umQtXKcMmJxKLf6AudSyRst4AOqw="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1034", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192553"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e1h9D8p9ufPJPkwRfN1TWUsk8n7wwq2wcrWnRQo-OVk="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1032", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192553"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e1h9D8p9ufPJPkwRfN1TWUsk8n7wwq2wcrWnRQo-OVk="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1033", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192554"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8mBqAdY4M7BSYT-28Zvi8ib0YXEzWzk_M2x9vHQJZN8="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1043", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192554"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "o7wkiDwxI8jQg1XmoJGCpkZ6tnW4X0LKOeU7mGKU_oU="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1041", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192555"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PAgRWD5bCWlqMUGqFb-Iu_tTUjZ9rAa-zFwn0qQlG5M="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1042", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192555"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PAgRWD5bCWlqMUGqFb-Iu_tTUjZ9rAa-zFwn0qQlG5M="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1040", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192556"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gl0_5ml69YNACSCXfCg-c4GOUpl4tgw962GEA25CFQs="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1038", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192556"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gl0_5ml69YNACSCXfCg-c4GOUpl4tgw962GEA25CFQs="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1039", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192557"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "b7n6GpWZGQwgTTiY2o6pw157RylumxlNmcB0L9_400o="
      envelope = @pubnub.revoke(channel: :demo, read: false, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1157", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192557"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C-8ZtKrLwuBJCfzUMDSyErU6isMAO4AWaHYP25Sa9js="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1155", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192558"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vSM3litNMeiEKg09qHchZ7bBnS1KZV4OU-8hiLdoeGY="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1156", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192559"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_6ycVJVa7rKkEszQj0U4OzU8fzZIO5D-JQKIFWyPNVc="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1154", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192559"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_6ycVJVa7rKkEszQj0U4OzU8fzZIO5D-JQKIFWyPNVc="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1152", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192560"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rysJrhXT21wMFCV-X6wsqXyi5_n0swPyapc2d_G1AyM="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1153", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192560"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rysJrhXT21wMFCV-X6wsqXyi5_n0swPyapc2d_G1AyM="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1163", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192561"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wF54skp7hspIbwTWdszI3vCsM1UvUr5AK9zIBIrUJYo="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1161", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192561"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wF54skp7hspIbwTWdszI3vCsM1UvUr5AK9zIBIrUJYo="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1162", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192562"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O8Rai0pzMF2kMp6McdanVN2atpXdBUKuw6_sC_HHMdA="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1160", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192562"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O8Rai0pzMF2kMp6McdanVN2atpXdBUKuw6_sC_HHMdA="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1158", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192563"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UExqfyLEELmmvw4ItZVZbYsLMPcPz0kG8pVhifMNETk="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1159", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192564"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sSlrwWKgtcZ9mQg394ZPHy9HsoqEYIa3o6W5rfmtido="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1169", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192564"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WfnYgK97muENW5WTS6XuCpHsW-MeaXR9RQcfwXXE0-o="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1167", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192565"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nkfzNVImv5NMUZ7XkVyoMcPaxxMiEA243oCeEKF8h8M="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1168", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192566"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "msQrm18-l1EBgGi8YT9HAm-j3_f9OJ9z6Y0JOadQL8M="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1166", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192566"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "msQrm18-l1EBgGi8YT9HAm-j3_f9OJ9z6Y0JOadQL8M="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1164", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192567"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VViisphNNrPp658Xzd4Iiykh1xwWACqKLFDrFPoj5QY="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1165", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192567"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VViisphNNrPp658Xzd4Iiykh1xwWACqKLFDrFPoj5QY="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1175", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192568"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7NJUaN933MHZQ3nKrTr1Rkx5coL0WMUCDOPAiWNkKI4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1173", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192568"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7NJUaN933MHZQ3nKrTr1Rkx5coL0WMUCDOPAiWNkKI4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1174", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192569"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DmGYuCiO_DVF-ZEXJWiw6Vf8q2sL477GoLOLId2EcE4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1172", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192569"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DmGYuCiO_DVF-ZEXJWiw6Vf8q2sL477GoLOLId2EcE4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1170", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192570"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hg-gnEBZGH8nGx3WICxwfWQY4-pqFxXNK0X2JR34-ts="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1171", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192570"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Hg-gnEBZGH8nGx3WICxwfWQY4-pqFxXNK0X2JR34-ts="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1181", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192571"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Prn_taePjx0FfOwWXEk_5qQe8ZiCfxlR_K8rE0n1pLo="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1179", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192572"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PCRSmZMzISDzzj3SWKgTWdEiJx9_ozazjOEbP2fIqHw="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1180", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192572"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PCRSmZMzISDzzj3SWKgTWdEiJx9_ozazjOEbP2fIqHw="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1178", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192573"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V9GE0LWYfniHZlqRBvmGilJbjezpehhJLoZ46OP82PM="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1176", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192573"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V9GE0LWYfniHZlqRBvmGilJbjezpehhJLoZ46OP82PM="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1177", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192574"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zrzbczgfdix47F2Y7h26l6uzfVJczcyxrpGm8g58Ngc="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1187", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192574"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_x7f-87esfkBooeFSlP4ntZUxdr-PVi2TKno5Kfk1Pc="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1185", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192575"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "urR-1UZXbO6oYkEPo0ACPrf299IZG3u5LwC0A6p9qgI="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1186", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192575"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "urR-1UZXbO6oYkEPo0ACPrf299IZG3u5LwC0A6p9qgI="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1184", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192576"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-fXuTV0DR8kTk3yRF9CfBOyoaxh7P0RFD17cyGMtCDU="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1182", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192576"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-fXuTV0DR8kTk3yRF9CfBOyoaxh7P0RFD17cyGMtCDU="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1183", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192577"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dvflRdaZGw68MRusXXuwJ1TYfjaglRMkE6Bu0HBZYbs="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1085", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192577"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a_qQWYb-hW9DBQ0LPixAk0a3JrWJ5ybUJ1DGjlo5T-A="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1083", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192578"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j08QyTDBpgrW4HaZWox8PvTXycZIWbSA57tKSUUQUVw="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1084", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192578"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j08QyTDBpgrW4HaZWox8PvTXycZIWbSA57tKSUUQUVw="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1082", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192579"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0rGQ_BsglbXY4hro59f-V9Zs367fHw8gfptLyYf7qA8="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1080", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192579"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0rGQ_BsglbXY4hro59f-V9Zs367fHw8gfptLyYf7qA8="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1081", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192580"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cnPCyX6lAmsTZofXJP2WSmHEnOUbXcPHyAL3_hVwaac="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1091", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192581"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GxBAKopxOxHoCGghfG79Ei6uTUdCRv1n5XrfpRLSYEQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1089", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192581"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GxBAKopxOxHoCGghfG79Ei6uTUdCRv1n5XrfpRLSYEQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1090", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192582"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ySlwK9CvXfJ9UENtwJPdcYy4C129Cyjh7zE1DqVfNc="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1088", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192582"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ySlwK9CvXfJ9UENtwJPdcYy4C129Cyjh7zE1DqVfNc="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1086", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192583"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lNL2pLvzAWolsg5k14zGKcFhv3WfDjpXZvRZzdb_HJs="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1087", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192583"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lNL2pLvzAWolsg5k14zGKcFhv3WfDjpXZvRZzdb_HJs="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1097", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192584"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mK4m_4hKckQbbJkJkIGbUFKWUYyQqGGosO2z7AZnoK4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1095", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192584"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mK4m_4hKckQbbJkJkIGbUFKWUYyQqGGosO2z7AZnoK4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1096", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192585"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zxNlRgOFksWMe1q1guSdjeMMDLmNxmpAZOplu-Ji04Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1094", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192585"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zxNlRgOFksWMe1q1guSdjeMMDLmNxmpAZOplu-Ji04Q="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1092", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192586"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QXSwDVpGZZzAisr5NSnssLDrrrHqVh_AGT2QZGK-gII="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1093", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192586"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QXSwDVpGZZzAisr5NSnssLDrrrHqVh_AGT2QZGK-gII="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1103", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192587"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j1GiMw3GOP8NPM6PFzX63PW_Xdp93Nkv1VU6m6eQIyE="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1101", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192587"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j1GiMw3GOP8NPM6PFzX63PW_Xdp93Nkv1VU6m6eQIyE="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1102", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192589"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gvKlP_6CuQVXoFGRDLtYkbF-qdiGwFEkxpAJV7BKY-I="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1100", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192590"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8a1mu4j_pB-boPzOvftW9jTHCqHzjOv3HoffcW1CczA="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1098", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192591"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZZOMoHm__f0KJnsKNwo_NMX2W-3Dk8NdZmHBS5beByM="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1099", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192591"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZZOMoHm__f0KJnsKNwo_NMX2W-3Dk8NdZmHBS5beByM="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1109", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192592"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z-KpROktrpx6TtwX2Lmx9406f_HVlFxZ5dUxKzHmfS4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1107", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192592"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z-KpROktrpx6TtwX2Lmx9406f_HVlFxZ5dUxKzHmfS4="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1108", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192593"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wAVhYgJSu4JMMXU-Ck-4rZgckCsbPbobALfJh1-CIXU="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1106", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192593"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wAVhYgJSu4JMMXU-Ck-4rZgckCsbPbobALfJh1-CIXU="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1104", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192594"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wbbtPttDu0nJwg3bfb1RDk3PaZx9JRAAsZiapwRO_qQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1105", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192594"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wbbtPttDu0nJwg3bfb1RDk3PaZx9JRAAsZiapwRO_qQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1115", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192595"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UWYZlvpcwgZZcriLxheFi20jKKTHE_x33tTAD7QCcys="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1113", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192596"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cm4wpje0CZn3PmM84o91NophI6X9vpYpddNMJAznV0s="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1114", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192596"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cm4wpje0CZn3PmM84o91NophI6X9vpYpddNMJAznV0s="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1112", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192597"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8UKs8ilkLy2W63sLP3GAW5QgPkUSBH7Ay18G676a-JQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1110", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192597"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8UKs8ilkLy2W63sLP3GAW5QgPkUSBH7Ay18G676a-JQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1111", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192598"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LXYEUhzOLEIjQLU2Hol1LxkI9lbqxo5J5pKbqRgJcRg="
      envelope = @pubnub.revoke(channel: :demo, read: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1121", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192598"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1Fs4Fyn9XftHk_DiqDq74blru4DigIY_rtwi_MkXF0s="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1119", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192599"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lig87kuLMBgSXNFeg_ptvEBDh2GMgwflEE2pMwuZsCI="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1120", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192600"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VmucXmwxhO8CZ13K3LBRLFwG0gF6qg6G0J2WFo2hHE8="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1118", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192600"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VmucXmwxhO8CZ13K3LBRLFwG0gF6qg6G0J2WFo2hHE8="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1116", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192601"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qiLwMtCmWoNbuugaZMOjPaHmfg5bRKjZiyl8S_4LO7w="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1117", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192601"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qiLwMtCmWoNbuugaZMOjPaHmfg5bRKjZiyl8S_4LO7w="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1127", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192602"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "slQwWk2Jy76IoFAgVx2btArOA8a34cdg2CHHeSwJVZA="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1125", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192603"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W1rCyS99Hm_5E1l-ufdMVHtHKircsEbMTBVWlVg_Fnk="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1126", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192603"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W1rCyS99Hm_5E1l-ufdMVHtHKircsEbMTBVWlVg_Fnk="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1124", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192604"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AjN0oUHrMNOECtYdGzdrk3TJN2wbJ4YYr0_NAtZW_sM="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1122", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192604"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AjN0oUHrMNOECtYdGzdrk3TJN2wbJ4YYr0_NAtZW_sM="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1123", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192605"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5S_BDm0CNoXZ2jSNoYY6P7FIRjU8pIGMr7dFU4d2swo="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1133", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192605"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tsQ4M9kGaLK20MGcHIxa-c6OFw0JloLo2aMsVkw7H6o="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1131", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192606"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y3uyzuOVjFGw3OHXCNRu4nk0PFvIVQIgnOt9BW1hVXo="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1132", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192607"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YWLj-KdxsO6SUb-yrNmtfdC3sT64Q9sW9EtxfHPJp-c"
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)

      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1130", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192607"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YWLj-KdxsO6SUb-yrNmtfdC3sT64Q9sW9EtxfHPJp-c"
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1128", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192608"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CmRTH8tps0pkZj21hmGseeZuOkc2RfuHZaxon-NJUZQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1129", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192608"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CmRTH8tps0pkZj21hmGseeZuOkc2RfuHZaxon-NJUZQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1139", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192609"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZaPYzGsm0fTApk-p4iwnntahxfcDXZTXlEir3mewpro="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1137", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192609"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZaPYzGsm0fTApk-p4iwnntahxfcDXZTXlEir3mewpro="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1138", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192610"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "meZo_wM3T74uICxPeK8xry9m4lGnQdKSepQaQ2fAeBU="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1136", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192610"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "meZo_wM3T74uICxPeK8xry9m4lGnQdKSepQaQ2fAeBU="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1134", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192611"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "82AHh4WCIPm0sjMc-Qg2gVysAy0HsKxiOz_t1eC4LAE="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1135", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192612"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Z-uDUSVcR88OelbO5ZMcWKv_xgAQ6BZVAH2eI9vhW08="
      envelope = @pubnub.revoke(channel: :demo, read: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1145", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192612"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TaQ_py1IssD2dd35C_drsJui7c54_g6ggQkCad1QZOE="
      envelope = @pubnub.revoke(channel: :demo, read: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1143", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192613"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bPTzeOT1ZJxAxbSYBjIM1CnfQnrGftgF7C9Npn7suMo="
      envelope = @pubnub.revoke(channel: :demo, read: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1144", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192613"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bPTzeOT1ZJxAxbSYBjIM1CnfQnrGftgF7C9Npn7suMo="
      envelope = @pubnub.revoke(channel: :demo, read: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1142", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192614"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IB4IWwHOPcpQqVnWSzOo-vgaXBkx71hzRnfAedaInK8="
      envelope = @pubnub.revoke(channel: :demo, read: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1140", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192614"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IB4IWwHOPcpQqVnWSzOo-vgaXBkx71hzRnfAedaInK8="
      envelope = @pubnub.revoke(channel: :demo, read: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1141", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192615"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WeR-FrE64WcUrzRIXmeEJQCJvAZmEr0gLY_vNvPmrAQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1151", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192615"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iRh9xb5JKyE3WUe_1mzOD1Vv-N3fqtLq-ACYukiLgiY="
      envelope = @pubnub.revoke(channel: :demo, read: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1149", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192616"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P4mYmWw7UH2Do4hgcVbwfy2SpY4KvryGCKxHbF5VImI="
      envelope = @pubnub.revoke(channel: :demo, read: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1150", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192617"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O-bMPEDAMYGOSBNIeu9pcd8pgdfuMoOYMnXBNmjC66g="
      envelope = @pubnub.revoke(channel: :demo, read: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1148", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192617"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O-bMPEDAMYGOSBNIeu9pcd8pgdfuMoOYMnXBNmjC66g="
      envelope = @pubnub.revoke(channel: :demo, read: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1146", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192618"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ceONsJF8sJ89VO7mAT2UHZAYv4cK10b8MxBfUSOJ3nQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__false___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1147", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192618"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ceONsJF8sJ89VO7mAT2UHZAYv4cK10b8MxBfUSOJ3nQ="
      envelope = @pubnub.revoke(channel: :demo, read: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1589", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192619"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DRP5YolNkcnRk1h8G1FRE9zy9iKCB8_yMKcpkSfETN0="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1587", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192619"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DRP5YolNkcnRk1h8G1FRE9zy9iKCB8_yMKcpkSfETN0="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1588", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192620"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eHgBCq_n4XwEWczrWTvPw2DdcQbAa_FrfeyHXF46RmA="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1586", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192621"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kK34dOpntuJ1RgqOEwRKMdraYMz5pEVFoLw_Z-63GZI="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1584", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192621"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kK34dOpntuJ1RgqOEwRKMdraYMz5pEVFoLw_Z-63GZI="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1585", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192622"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GwupGZb1685rko6QrGQp4-ZrCqRKMFKmbO2CBtT3KEM="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1595", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192622"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RbHxWspoGmbtp_PwMrQgNah8-4fn4al4pDjbzWZH23Y="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1593", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192623"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x7ZnaeP3e5L-pJGrbwKWgoQ5yyFDUqrNr06y2-bNt3U="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1594", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192623"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x7ZnaeP3e5L-pJGrbwKWgoQ5yyFDUqrNr06y2-bNt3U="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1592", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192624"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iaF6SqFb9A7hG_1eik-a4iV3Sr1rnb3MQLgmzwMPW6Y="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1590", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192625"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kOq22i4NE7l2jG1-d9vIou7VBo6D-33WXC_ZPu4gY2A="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1591", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192625"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kOq22i4NE7l2jG1-d9vIou7VBo6D-33WXC_ZPu4gY2A="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1601", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192626"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cDksixcHwcSi8pyNPwSZ_pZOuJnVZapu39HOnhJwGHs="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1599", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192626"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cDksixcHwcSi8pyNPwSZ_pZOuJnVZapu39HOnhJwGHs="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1600", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192627"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GKP9ZeLGdGWKOA34qt4XHS0BtPi-eUNSTZ58858KB44="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1598", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192627"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GKP9ZeLGdGWKOA34qt4XHS0BtPi-eUNSTZ58858KB44="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1596", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192628"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G1EBMr9L5qlXiqD5S3UfZwqvlDgULzXvw8bcgeOGFfY="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1597", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192629"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6_Mus00l4-RETrPH2U_mtUfj41cWFlfvwqisKTjVOi4="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1607", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192629"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L_MQ_zQfRKFk66HNyQUatULxKNAQfA_vHC1gygRH5lc="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1605", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192630"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CgfRpji-s03Nz1kdXozzBtn4JJo1P0a-3JOw-0IZoLI="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1606", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192630"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CgfRpji-s03Nz1kdXozzBtn4JJo1P0a-3JOw-0IZoLI="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1604", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192631"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Uk-FdyKsfSuWI50Ru3008z9WImDiGae72W0NzWA2HJk="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1602", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192631"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Uk-FdyKsfSuWI50Ru3008z9WImDiGae72W0NzWA2HJk="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1603", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192632"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_WrhiCzH1bKI5TWndwBdNLwe81A_ljs8ewAaUhyt_Pc="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1613", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192633"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mV6YX5km73tz9qMB5-SMdN1YheYLqg-2ur9zM6_qjj4="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1611", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192634"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TmRKB70lyilKeAizDknVaX30TDO_VofFAXk_WKT1ip4="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1612", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192634"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TmRKB70lyilKeAizDknVaX30TDO_VofFAXk_WKT1ip4="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1610", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192635"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g3-RwZvy5NCkz2nXDTZxF4DqAw44USDueVzjGfO4SMM="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1608", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192635"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g3-RwZvy5NCkz2nXDTZxF4DqAw44USDueVzjGfO4SMM="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1609", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192636"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jZeD5I40sFaeB_e0L5E8I1Y2HK0bznSSzM9pjePqxDg="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1619", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192636"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Zu2j5E4wy0SnIH51z5QmucC9K68_pKSRgmfsYm99l1k="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1617", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192637"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tS3ZEL7zdOS6LJJTxRlxh_-ApduwScoY74tm84BIFlY="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1618", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192637"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tS3ZEL7zdOS6LJJTxRlxh_-ApduwScoY74tm84BIFlY="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1616", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192638"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r7_vroxm3vIqwjj0e91a-zmW0hN_rq3d9WHuKdyNgAc="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1614", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192638"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r7_vroxm3vIqwjj0e91a-zmW0hN_rq3d9WHuKdyNgAc="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1615", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192639"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h1N_0K5zbLak6z8tA5aOLHh91AxiBDb1iq6_PNnlpSE="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1517", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192639"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xMqABLGsxidvqx5BN-PCBY_UNx6ns0hdJTmZjmJ3urU="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1515", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192640"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Uphuqtq6FCZAuGAdJwlfvofsaybhVDTnV_gmpWUv-wY="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1516", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192640"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Uphuqtq6FCZAuGAdJwlfvofsaybhVDTnV_gmpWUv-wY="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1514", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192641"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T1W5wzK38C_3ScnCSse-eBD64WyQ5nmlDIYo1RBW-l4="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1512", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192641"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T1W5wzK38C_3ScnCSse-eBD64WyQ5nmlDIYo1RBW-l4="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1513", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192642"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WIHYkhW6ezHE3Z3pC7VdCx1G_VIOoLUC2kmop1rdbrs="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1523", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192643"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RsSmMRhbKm7IW_qCkQeOU1_5vdfRoLsi1CfetVa7iHk="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1521", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192643"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RsSmMRhbKm7IW_qCkQeOU1_5vdfRoLsi1CfetVa7iHk="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1522", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192644"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HE7wlVkKnzjdCLRLJq0DnflIM9w8R4So4M1PPb2NbA8="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1520", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192645"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z76quQLglZz0Qtvmx0kMeB_MS7aorNEG01mS7xnYqKw="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1518", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192645"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z76quQLglZz0Qtvmx0kMeB_MS7aorNEG01mS7xnYqKw="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1519", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192646"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IvE3uDfkJ24ntUjvo4xHxRB_jaNoAEmq0Nr1cO2rr1w="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1529", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192647"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fOEaTCclh-eO7kxAvG5PLoryjzALYbudFlc2x0ixbXo="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1527", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192647"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fOEaTCclh-eO7kxAvG5PLoryjzALYbudFlc2x0ixbXo="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1528", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192648"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W5eMAe4rmQAp5QVAY_ygaQKlLwsipACekNFtEH0rkmE="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1526", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192648"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W5eMAe4rmQAp5QVAY_ygaQKlLwsipACekNFtEH0rkmE="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1524", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192649"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aMaurlXRi1uPw3pC7mutcEOoxf_6EH4gOewydQvolNM="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1525", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192649"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aMaurlXRi1uPw3pC7mutcEOoxf_6EH4gOewydQvolNM="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1535", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192650"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZTCFWVLeHc1Pzy1V3FTLsnITAJ8esaAUvvShT5sih6w="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1533", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192651"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YFGhePFzTmL9UHlpYDJBxus-4gOnlW0FtKmjUqrVQ8I="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1534", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192651"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YFGhePFzTmL9UHlpYDJBxus-4gOnlW0FtKmjUqrVQ8I="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1532", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192652"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yC1poOjIydFcdZf_YZ_1PuCbPiDRFK9-_LpCg5A5-mk="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1530", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192652"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yC1poOjIydFcdZf_YZ_1PuCbPiDRFK9-_LpCg5A5-mk="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1531", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192653"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2_2TLfr_rFv95EkQNBViOz3Kh_31gxaPWhgNsKHwf1I="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1541", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192653"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jLPacY1I4WpVsETnQPoKJgvn_60SvchTz17O6rbWOGM="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1539", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192654"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "87vXdcUSANrI4aWSR5Zgl3E7zXI7YMpsONs68ZtenVQ="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1540", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192655"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O_bwxZliwRvZ2VOVfA797Im94dO8iGI4zz1U1ucSMww="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1538", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192655"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O_bwxZliwRvZ2VOVfA797Im94dO8iGI4zz1U1ucSMww="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1536", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192656"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V-IJAuYjVD3BGCspnBn-PpMMLs4MsFe8AJONfN7Ix64="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1537", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192656"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "V-IJAuYjVD3BGCspnBn-PpMMLs4MsFe8AJONfN7Ix64="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1547", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192657"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jLzucWqq24sQd3YSp2_M8hAOQQwkn2mKlwLb63t9Px8="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1545", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192659"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EpoVQ5RmhtsVI-XalMTuOU3EOgrQ0UaxEJ9XpclqPs8="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1546", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192660"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "I0NT6qjlkwxH-5Idt6e6O5G2kBfQgILBSsfIeJOCXCE="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1544", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192660"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "I0NT6qjlkwxH-5Idt6e6O5G2kBfQgILBSsfIeJOCXCE="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1542", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192661"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6_dnKTnzDjfotdxfEMYsdiG1Fg42flBnxHZ_TcfhOug="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1543", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192661"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6_dnKTnzDjfotdxfEMYsdiG1Fg42flBnxHZ_TcfhOug="
      envelope = @pubnub.revoke(channel: :demo, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1553", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192662"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "89FLXVsn_BI7Nu63RsusRm4_gLgDObMSwItv48oVGUE="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1551", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192663"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ide3ISmZjb7z57kXrkRiy22u9athD6MTE_1D3HnxcVE="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1552", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192663"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ide3ISmZjb7z57kXrkRiy22u9athD6MTE_1D3HnxcVE="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1550", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192664"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1HelFAl8YrHB7xa4RDH84cDZQsa0u-f9ktF6dJ8tA0o="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1548", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192664"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1HelFAl8YrHB7xa4RDH84cDZQsa0u-f9ktF6dJ8tA0o="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1549", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192665"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O0qNHK4flDakPmbIwVYUAp6RKvMBQBuhH6gV4yaPSCw="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1559", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192665"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H1zV3Z-Ma3Zlg00YDHJQm0kYbOFr1FABKHoXJ4AYkNU="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1557", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192666"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FT8qoHvg4cG48XhcFbV88rqLrlcwrTAfJqkEhKk5V9w="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1558", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192666"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FT8qoHvg4cG48XhcFbV88rqLrlcwrTAfJqkEhKk5V9w="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1556", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192667"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9jnRXvO1OtOnHyNE8VBFltaW4R6Dk5SbrSqhdJKwV7Y="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1554", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192668"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vhPHIstDanUy9Lwo-3EIotUKkLG6AJAWP9FGTUdZaVI="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1555", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192668"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vhPHIstDanUy9Lwo-3EIotUKkLG6AJAWP9FGTUdZaVI="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1565", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192669"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IUJ86Nh6AnmaASs7S_quKcxyQ4XIzy09W0HpfQ4Aqy8="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1563", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192669"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IUJ86Nh6AnmaASs7S_quKcxyQ4XIzy09W0HpfQ4Aqy8="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1564", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192670"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XL_NyzWvAasLuXjcN8ETLUTtSnL6HVYlzeVheiU82GM="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1562", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192670"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XL_NyzWvAasLuXjcN8ETLUTtSnL6HVYlzeVheiU82GM="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1560", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192671"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0HsoF9_BqZDgRI3J0cf8Nnfbe_p4eftwRy8G5YG4X5k="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1561", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192672"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "daDi7L-_FsC1hBBj-bBthedzsTuAzGwDmeXcnob91_0="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1571", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192672"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RqL3SjC4cD06yEkqPr7Rz9LpLHRQcs9BhwwpuUtmbKw="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1569", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192673"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jFMgP3snTEX2Yuzg7NWdui8Gmsv0ToVgd2LbAcjIDMs="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1570", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192673"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jFMgP3snTEX2Yuzg7NWdui8Gmsv0ToVgd2LbAcjIDMs="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1568", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192674"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kKqtPTki7aEM1ftUh27zpgRnBp-il2Ol-v3JNDnue20="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1566", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192674"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kKqtPTki7aEM1ftUh27zpgRnBp-il2Ol-v3JNDnue20="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1567", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192675"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EDQW64Wel1647PYBHC7IxcTRY2x0nil-KuamCdAiB2c="
      envelope = @pubnub.revoke(channel: :demo, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1577", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192675"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ngZshxilh6CwLk3iNyif-IxAp6A5ty-IgORsTW59QBs="
      envelope = @pubnub.revoke(channel: :demo, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1575", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192676"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qRDBEMuEgUcU4imi1qm61NaC16GL9G0pfeNmOIihZ1A="
      envelope = @pubnub.revoke(channel: :demo, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1576", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192677"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uUy6G_IrXZ5O9YEbqhDK8aQA1GlnuRhIkr5Bw8LUdpQ="
      envelope = @pubnub.revoke(channel: :demo, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1574", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192677"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uUy6G_IrXZ5O9YEbqhDK8aQA1GlnuRhIkr5Bw8LUdpQ="
      envelope = @pubnub.revoke(channel: :demo, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1572", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192678"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4mt_Ao5F_f2Df5sqaGt1YKQKPUwmGmKq0fXYI8xiEYc="
      envelope = @pubnub.revoke(channel: :demo, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1573", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192678"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4mt_Ao5F_f2Df5sqaGt1YKQKPUwmGmKq0fXYI8xiEYc="
      envelope = @pubnub.revoke(channel: :demo, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1583", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192679"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1EnhfMMQL8vd5AM4tWrCk1bBcVGEy28O7AvpyQ9dDNM="
      envelope = @pubnub.revoke(channel: :demo, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1581", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192679"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1EnhfMMQL8vd5AM4tWrCk1bBcVGEy28O7AvpyQ9dDNM="
      envelope = @pubnub.revoke(channel: :demo, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1582", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192680"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A-wEZUbkogwXQsF6u2IyHCt0oikFZaJS-Fe70OJWCeI="
      envelope = @pubnub.revoke(channel: :demo, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1580", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192681"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bdxgUcy-w66KfeO7v9LZE1bFGq5UM5toevPyHAe-_Ok="
      envelope = @pubnub.revoke(channel: :demo, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1578", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192681"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "bdxgUcy-w66KfeO7v9LZE1bFGq5UM5toevPyHAe-_Ok="
      envelope = @pubnub.revoke(channel: :demo, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1579", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192682"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9k6O1dC79-D5lEMeZBRgvBaWu01hyGDBA3AA8JFXJIo="
      envelope = @pubnub.revoke(channel: :demo, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1373", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192682"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WZX7bPbOwxQzs5Owu7EyKWQoSLaSU74wR2DnlalERT8="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1371", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192683"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "87hr0pNMdyQxNwof-6s_BWTJuojCopAcXxUMz_psmUE="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1372", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192683"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "87hr0pNMdyQxNwof-6s_BWTJuojCopAcXxUMz_psmUE="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1370", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192684"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ohArj-pEchjePJatsGalezI_i6F-XNW_Qk953i8sih4="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1368", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192684"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ohArj-pEchjePJatsGalezI_i6F-XNW_Qk953i8sih4="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1369", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192685"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2Z-1f37wdvjGUwsQXEC_bV7wUX1olJop24beo7yYlUU="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1379", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192686"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KNmCb88eWMe5hoQRvYH4NfyBM3E4f11yDTVHakwO5K8="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1377", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192686"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KNmCb88eWMe5hoQRvYH4NfyBM3E4f11yDTVHakwO5K8="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1378", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192687"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Bfyy1GsOw7GwO-jkAGG7Ydw75YvJxLShWbdTBdu22Ns="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1376", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192687"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Bfyy1GsOw7GwO-jkAGG7Ydw75YvJxLShWbdTBdu22Ns="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1374", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192688"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t6JCWWNe76MCpCjKMYw3mMYdLRiY3pkp_5FkQwyUnjQ="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1375", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192688"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "t6JCWWNe76MCpCjKMYw3mMYdLRiY3pkp_5FkQwyUnjQ="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1385", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192689"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sHik_E7s-p0rKdWnj7C77iWDi2CaTTcCR6egnuHS_Fg="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1383", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192690"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1-ne1WX7nKOcwjnENMIDmQwiu3FixtQ6q_xpHO9shUo="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1384", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192690"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1-ne1WX7nKOcwjnENMIDmQwiu3FixtQ6q_xpHO9shUo="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1382", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192691"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_QvbtlyPDCSl17QStJWPy-A6YCVdVmrfM9_JqTG0Dms="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1380", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192692"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r10SZa-63PqwtbjKCs-1M08mP66lNXI7cU64PiTZLio="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1381", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192692"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r10SZa-63PqwtbjKCs-1M08mP66lNXI7cU64PiTZLio="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1391", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192693"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CcUZKRF-UE_tUiIfqNYTu8HojWAnVwXr-Kc-eHd4nlo="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1389", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192693"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CcUZKRF-UE_tUiIfqNYTu8HojWAnVwXr-Kc-eHd4nlo="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1390", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192694"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VxQk3i6U8rxb-enaalFSnEIo451A-8AhkNmEq7nrt30="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1388", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192694"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VxQk3i6U8rxb-enaalFSnEIo451A-8AhkNmEq7nrt30="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1386", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192695"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sp63IIQsqslFowF0sPbu_fqa_0jq0GgY6R6Dtz5HgWQ="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1387", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192695"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sp63IIQsqslFowF0sPbu_fqa_0jq0GgY6R6Dtz5HgWQ="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1397", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192696"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6z7NhSrKhSZG1aJX2nZTCua7oZGAmsNBkPJSkAYxpX4="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1395", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192696"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6z7NhSrKhSZG1aJX2nZTCua7oZGAmsNBkPJSkAYxpX4="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1396", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192697"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Seh_2LudM3bT7kRMoE313Ih-6D9aXzyu0aLyt2E01BY="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1394", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192697"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Seh_2LudM3bT7kRMoE313Ih-6D9aXzyu0aLyt2E01BY="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1392", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192698"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PI15cvtIS45dYAoantb7BuAFLGYrn6mVLeEKKV_MCak="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1393", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192698"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PI15cvtIS45dYAoantb7BuAFLGYrn6mVLeEKKV_MCak="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1403", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192699"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ng8VSE1HJAq_Q9MwrjLfDHo81_OYlIvar60_BKF-E8A="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1401", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192699"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ng8VSE1HJAq_Q9MwrjLfDHo81_OYlIvar60_BKF-E8A="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1402", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192700"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NAvFriToAlKBDh3_cM2gK3Wj9TOt9nRCukyR2eWvukQ="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1400", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192701"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6-AxyW2rH3Ghr65ukb4Eumeu6lMnXIvKcf38nJRjzdo="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1398", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192701"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6-AxyW2rH3Ghr65ukb4Eumeu6lMnXIvKcf38nJRjzdo="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1399", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192702"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R9BgkO6hm_6mkx6k-DQMeI_Bxud9rt9SjcNx5KxnQ44="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1301", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192702"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AceifrvTxKt40g1IuXT0pQhhfS0bryuIBR2Plmy-NTw="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1299", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192703"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zKOlNUR-Ob7ip63lUBIyzG4ykGPUzuivoJbJCrx5a9g="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1300", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192703"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zKOlNUR-Ob7ip63lUBIyzG4ykGPUzuivoJbJCrx5a9g="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1298", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192704"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KHqCcAdwFQQeF67rpkehFhVe4dkMm18vi5_XSVVhbLU="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1296", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192704"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KHqCcAdwFQQeF67rpkehFhVe4dkMm18vi5_XSVVhbLU="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1297", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192705"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3irhp0RdxMHcdmkS0o5DCrdfv_nIJ3WhRPNxhzg2InM="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1307", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192706"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VxGkIfdnbMCtWcDVdQ-7ZX1HfBYmo46Bu4-ijOuh16Y="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1305", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192707"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IUjSlXm7rvDK7j1m5knR1A-LL6kRqKpfJr8jrvpZzMs="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1306", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192707"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IUjSlXm7rvDK7j1m5knR1A-LL6kRqKpfJr8jrvpZzMs="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1304", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192708"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L_FaJGJ7n-El2cj7tJAfWo645qNWtb5Knt9MEptDpBc="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1302", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192708"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L_FaJGJ7n-El2cj7tJAfWo645qNWtb5Knt9MEptDpBc="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1303", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192709"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "scxQW8AOHDroIcx7LRNMh8jHwZjlFFW9JZ9z7z7i3P0="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1313", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192709"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h1JKNPFxDrqKgwsGMyNTPhjzkrxMOfYSjXVHWkUG0dE="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1311", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192710"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9vo7l8n7lE9eXcszB8f3msJBWfM0KGh0Fqwzc_GDfo4="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1312", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192710"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9vo7l8n7lE9eXcszB8f3msJBWfM0KGh0Fqwzc_GDfo4="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1310", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192711"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8-gzCCacbJAN8tnMsciIPuHUg4ixEImmGzbU5q9AC_8="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1308", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192711"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8-gzCCacbJAN8tnMsciIPuHUg4ixEImmGzbU5q9AC_8="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1309", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192712"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "20nhaTy-2ytrhdGKA6hFP-_CfQMgE_-Qnu_7pBm3kGQ="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1319", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192713"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fcQpe7U9vstfvWvsRkk--e9q1NzFJIlfTfEEY5xmX_w="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1317", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192713"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fcQpe7U9vstfvWvsRkk--e9q1NzFJIlfTfEEY5xmX_w="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1318", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192714"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mCTLjwbQAJCRVlBr4509F3zcyf1IbUS-b_978b-ewdI="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1316", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192714"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mCTLjwbQAJCRVlBr4509F3zcyf1IbUS-b_978b-ewdI="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1314", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192715"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U9AxRZoMsjMiM2PT0AkTKTOnt5QmsXtrp7kTLcZew98="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1315", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192715"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U9AxRZoMsjMiM2PT0AkTKTOnt5QmsXtrp7kTLcZew98="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1325", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192716"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8RbOsJbIWhpoqMXOcm3be8bLli4CjHNVQYVM7Cth7TU="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1323", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192716"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8RbOsJbIWhpoqMXOcm3be8bLli4CjHNVQYVM7Cth7TU="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1324", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192717"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FxCHgx8Ra_853OI0oi_MTlmhQ6WDOiaIJxBlbtVg76s="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1322", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192717"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FxCHgx8Ra_853OI0oi_MTlmhQ6WDOiaIJxBlbtVg76s="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1320", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192718"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y2Qbsi0FGJ-W3FFUD2HYkzdzWPUhP4ysklol4ZPk5YE="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1321", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192718"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Y2Qbsi0FGJ-W3FFUD2HYkzdzWPUhP4ysklol4ZPk5YE="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1331", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192719"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wRw9nSo9UEx_zO4AlaIqHUEDV3pUHRf3rLfk3ATh2zY="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1329", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192719"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wRw9nSo9UEx_zO4AlaIqHUEDV3pUHRf3rLfk3ATh2zY="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1330", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192720"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "brcq63r4LpVfnJqNI-5A_NsHfKuxKFT8AnOcwU8Lw4A="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1328", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192721"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ddw-Gh8sQSzuueCvFLcm9ccgK_ZHlvmMQGhszMV2CJA="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1326", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192721"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ddw-Gh8sQSzuueCvFLcm9ccgK_ZHlvmMQGhszMV2CJA="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1327", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192722"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nUxKEvo2ZdCYpY-dx7rt7jMOJZenMf1EiMiUGBQi4Rw="
      envelope = @pubnub.revoke(channel: :demo, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1337", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192722"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HBRZgsGaW75jbiIQ3c1zTqUV6X38moCl9wVVqfHDGC8="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1335", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192723"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BHK2-hdxQ80CIj8pkFSsIZL7sIua5YrV4AtMxkDwftM="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1336", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192723"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BHK2-hdxQ80CIj8pkFSsIZL7sIua5YrV4AtMxkDwftM="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1334", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192724"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WmmmhNV4-sqJTjGwNK8mmKkdYBRhIFc2Aaypud-xlPI="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1332", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192724"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WmmmhNV4-sqJTjGwNK8mmKkdYBRhIFc2Aaypud-xlPI="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1333", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192725"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9NsbcEiSzqvMYBRh0QedUsRFgFetIrC0gB0NhJH9QR0="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1343", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192725"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x-IJILXhnWEpQLNoJb2_kDv_xai_lQuLUfmSF2niOr0="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1341", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192726"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FthfHXaXLX_cDKrxKd0vPKvh_VvZDxjRowI6-tI948A="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1342", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192726"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FthfHXaXLX_cDKrxKd0vPKvh_VvZDxjRowI6-tI948A="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1340", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192727"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ca89NEEmpDptvqpBOSgtqH8h2EBy8A1GIBv-Kn7wrlA="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1338", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192727"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ca89NEEmpDptvqpBOSgtqH8h2EBy8A1GIBv-Kn7wrlA="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1339", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192728"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TUrFXn_HddeHwTd5BXPwBddR5TrATBPDCZyEXIzWv6U="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1349", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192729"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yJx5U_pH63MTcjTAS89VXweKMc06VWT_Ywb6vivi534="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1347", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192729"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yJx5U_pH63MTcjTAS89VXweKMc06VWT_Ywb6vivi534="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1348", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192730"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ojkz2L3Yz46wSk40k1Y3KddSP8xGM78JfAYVrdR_ZZM="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1346", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192730"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ojkz2L3Yz46wSk40k1Y3KddSP8xGM78JfAYVrdR_ZZM="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1344", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192731"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BNruycVbRzdyLAF-wLPz9QtJEbMjBJ_n4WMMnToDGPc="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1345", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192731"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BNruycVbRzdyLAF-wLPz9QtJEbMjBJ_n4WMMnToDGPc="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1355", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192732"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5f9MS8lDPh2eUWX4Qmpzb-luVGSBeu7kcq5LlOA75yU="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1353", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192733"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mqJAQ9DVsAqFYwERen0YedR5ZIfVNZYQGeHLHv_dOj0="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1354", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192733"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mqJAQ9DVsAqFYwERen0YedR5ZIfVNZYQGeHLHv_dOj0="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1352", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192734"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DuYzYHHDT4MAtfAZwCH9MlBiBdCnuJLkN-5orUlRCc8="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1350", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192735"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-y3QE017bkBAN2I6c10WI5Clj_DGZHKBHDs-uJ3weQs="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1351", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192735"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-y3QE017bkBAN2I6c10WI5Clj_DGZHKBHDs-uJ3weQs="
      envelope = @pubnub.revoke(channel: :demo, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1361", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192736"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fN5263WekiI1KeKE4r23OHch4M5ZsPhHxECHC-DoN5o="
      envelope = @pubnub.revoke(channel: :demo, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1359", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192736"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fN5263WekiI1KeKE4r23OHch4M5ZsPhHxECHC-DoN5o="
      envelope = @pubnub.revoke(channel: :demo, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1360", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192737"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j-6SQUoyFMsmW8rkHU7WOGp1dg-ZQnH-QGi4f3VvUWo="
      envelope = @pubnub.revoke(channel: :demo, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1358", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192737"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "j-6SQUoyFMsmW8rkHU7WOGp1dg-ZQnH-QGi4f3VvUWo="
      envelope = @pubnub.revoke(channel: :demo, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1356", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192738"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wGFu6vLKoQBdkpdc4hCD-fytEA1sY7QR0DGmha3wGas="
      envelope = @pubnub.revoke(channel: :demo, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1357", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192738"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wGFu6vLKoQBdkpdc4hCD-fytEA1sY7QR0DGmha3wGas="
      envelope = @pubnub.revoke(channel: :demo, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1367", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192739"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7bo7gNJTsIZ_hIo8DSQm5dqi0SGVs1Ba6PGJaclbLIs="
      envelope = @pubnub.revoke(channel: :demo, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1365", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192739"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7bo7gNJTsIZ_hIo8DSQm5dqi0SGVs1Ba6PGJaclbLIs="
      envelope = @pubnub.revoke(channel: :demo, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1366", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192740"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EZ9eE20CVwGWNWcQS_eB5--W8WTbZ49rjuQuftJ0kMc="
      envelope = @pubnub.revoke(channel: :demo, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1364", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192740"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EZ9eE20CVwGWNWcQS_eB5--W8WTbZ49rjuQuftJ0kMc="
      envelope = @pubnub.revoke(channel: :demo, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1362", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192741"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xTcss3f_csycv7w0ToQ8T6RfdcxMJ6Vawadeir-EOh4="
      envelope = @pubnub.revoke(channel: :demo, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1363", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192741"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xTcss3f_csycv7w0ToQ8T6RfdcxMJ6Vawadeir-EOh4="
      envelope = @pubnub.revoke(channel: :demo, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1481", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192742"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3B-riU-Xr5OF-WcBdndpWAv_elmxxzoIJPWONQzENPw="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1479", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192743"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MSbHgh3vNl5C-yCdOH7N4YECSg4IApIADal78hGxD-U="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1480", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192743"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MSbHgh3vNl5C-yCdOH7N4YECSg4IApIADal78hGxD-U="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1478", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192744"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QboQPRK9RLkqnJNQPQzqZn_sZMvmvHgtq1qy7py6Y5s="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1476", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192745"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zVSJcGgsXzePO99VVoGs0j1vD0_Ih9zpG6g-jf_5nSs="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1477", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192745"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zVSJcGgsXzePO99VVoGs0j1vD0_Ih9zpG6g-jf_5nSs="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1487", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192746"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0cmxajfwAMtWgWaz2jeyW7ewmFKA3iJY2vcxRfO9IZk="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1485", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192746"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0cmxajfwAMtWgWaz2jeyW7ewmFKA3iJY2vcxRfO9IZk="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1486", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192747"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HqJmjD-vXxQnd4dnbxHHT42bn1KtjI3vk7gTSZno6Es="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1484", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192748"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sBqmmEa1w-UjDQvuYiMBfi_IuMSWQxzijMGBVy7rCr0="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1482", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192749"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PKvUTBOOr6lO2FLb0-Azir09B0pEWcwpKafbd3x0Ho4="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1483", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192749"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PKvUTBOOr6lO2FLb0-Azir09B0pEWcwpKafbd3x0Ho4="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1493", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192750"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8iKj-xI_37cVcswWqXat_9jxhD_eMpSvd5bPKw9-5rI="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1491", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192750"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8iKj-xI_37cVcswWqXat_9jxhD_eMpSvd5bPKw9-5rI="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1492", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192751"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "elONqW0N7NdWvkw0tis6NAtS1GUODdOIU_wCIVbiHt8="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1490", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192752"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EXpwe5wZ9nrRsOM6jGQSqJumP03_96UbTh-Uc9mPF_w="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1488", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192752"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EXpwe5wZ9nrRsOM6jGQSqJumP03_96UbTh-Uc9mPF_w="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1489", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192753"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FFcEfvueRQdGeurJQThAA_uaRLyx5Er_Ldt39P2rhi8="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1499", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192753"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fT-_KfFgr3oWDcB_Ma8Zx1DdnRVaQ6T52WbA7jpD7ZA="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1497", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192754"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xqzCL2jIXuPrGvJknVsr4fVgGHgbxBOxY06lRO9cFkI="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1498", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192754"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xqzCL2jIXuPrGvJknVsr4fVgGHgbxBOxY06lRO9cFkI="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1496", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192755"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gNGZcSL2UNsehOoccc4KtA8HJoBP373NIttdiG6HhF8="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1494", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192755"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gNGZcSL2UNsehOoccc4KtA8HJoBP373NIttdiG6HhF8="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1495", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192756"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "z92FTrb104zyeJlvwB2FFUgkuwbgOu8deX6OOVC_3sw="
      envelope = @pubnub.revoke(channel: :demo, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1505", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192756"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qeBw9zK5Y4sVgM8x5BGh1S2L80lQZOxFkdi-JsUDeBA="
      envelope = @pubnub.revoke(channel: :demo, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1503", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192757"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "74w6Na0Wy7IsU2lNymiMvHbtVDVIgXjuJqw22VWOfFU="
      envelope = @pubnub.revoke(channel: :demo, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1504", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192758"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wj9igwsBrL72amSjp91lZHoPzHO5X0RTQgx4TuJ5uZg="
      envelope = @pubnub.revoke(channel: :demo, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1502", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192758"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Wj9igwsBrL72amSjp91lZHoPzHO5X0RTQgx4TuJ5uZg="
      envelope = @pubnub.revoke(channel: :demo, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1500", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192759"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Oam0QBb6Fy6ZGZns_embtH9d41TXla_QrLnpCgnPV3g="
      envelope = @pubnub.revoke(channel: :demo, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1501", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192759"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Oam0QBb6Fy6ZGZns_embtH9d41TXla_QrLnpCgnPV3g="
      envelope = @pubnub.revoke(channel: :demo, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1511", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192760"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EEbv1xjmA5cRb-UVFqcpIVVI5UHHMjmor26WOAUeTlc="
      envelope = @pubnub.revoke(channel: :demo, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1509", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192760"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EEbv1xjmA5cRb-UVFqcpIVVI5UHHMjmor26WOAUeTlc="
      envelope = @pubnub.revoke(channel: :demo, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1510", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192761"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YzfNfgfcHK1xl_8fhjdFCxHcqwmv3r9gAonbJHIdBHk="
      envelope = @pubnub.revoke(channel: :demo, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1508", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192762"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iXTWEW-2oSsEc28ZBr1FouDqWKLYpPtwiEUhT1EauCI="
      envelope = @pubnub.revoke(channel: :demo, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1506", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192762"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iXTWEW-2oSsEc28ZBr1FouDqWKLYpPtwiEUhT1EauCI="
      envelope = @pubnub.revoke(channel: :demo, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1507", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192763"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wFqq-7cpSx7Hgy3cEavdjgFS5QaR7ABwowjfOy65Sv0="
      envelope = @pubnub.revoke(channel: :demo, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1409", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192763"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2V8cUAaKIYrGZ3TKJnt7uge_wlQBHA3pRtEwQnjoAa0="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1407", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192764"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5Lp4ERAweaaoEE_y833BQTAtJZa6n7R73QpbssnC2rM="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1408", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192765"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2xUXAc0t7Q6-EygZduvdweIsW1vKW5yJydcANTqDSrc="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1406", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192765"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2xUXAc0t7Q6-EygZduvdweIsW1vKW5yJydcANTqDSrc="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1404", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192766"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hQbPQAJN8DdAU6fFyoZWeGt-f9OX9mZ8i2A4WwRgZYE="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1405", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192766"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hQbPQAJN8DdAU6fFyoZWeGt-f9OX9mZ8i2A4WwRgZYE="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1415", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192767"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r_D1cd0gijkzpfXmHyFmaqofeY8k-PtDecApbSFIbDg="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1413", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192767"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "r_D1cd0gijkzpfXmHyFmaqofeY8k-PtDecApbSFIbDg="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1414", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192768"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mnG484T-jtKRCKXQV75RENi8Gnu87QVNJ9CJnv8Mi1g="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1412", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192769"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0qKUNaP_RLdr53_kp6wzplTWT7sUS9gsUTEmjNe0pvw="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1410", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192769"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0qKUNaP_RLdr53_kp6wzplTWT7sUS9gsUTEmjNe0pvw="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1411", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192770"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nBlBVSrDytWr4mzrFd51AP1bfRcTPI-baGZr1VQog4I="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1421", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192770"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4mZxOebgzDpZYkKCK_ZALUbC4r4lQOQkzV-Y3fXWZUQ="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1419", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192771"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6ScBzt8wWF1mRe7D2wWqglj1MIMu1b-DdMREv4XVI1o="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1420", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192771"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6ScBzt8wWF1mRe7D2wWqglj1MIMu1b-DdMREv4XVI1o="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1418", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192772"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rrdRpDuMWNmiDPWIj_unGkG6UnOC80oh6JETOoOpjvo="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1416", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192773"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TjpHtupjPplSGaH8b4fYqWPtGiSjScB-H809QZ_Df6E="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1417", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192773"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TjpHtupjPplSGaH8b4fYqWPtGiSjScB-H809QZ_Df6E="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1427", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192774"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J9SADrkG4OU32qJvizjay6-WCOodWiQbJq85idLI3u4="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1425", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192774"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J9SADrkG4OU32qJvizjay6-WCOodWiQbJq85idLI3u4="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1426", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192775"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mUE7dGeYjTInbm3olZTLwJbweave3sSdz00woH4vAcA="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1424", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192775"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mUE7dGeYjTInbm3olZTLwJbweave3sSdz00woH4vAcA="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1422", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192776"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-3qd8U2F4Sv6Kj5Mw1LJwNVtY7k5R8cWDkQ5J7u0mtY="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1423", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192777"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LpHmiA1ImcGQwrL8VTz5EPxd0Lwj26u21lWeiV7QLaY="
      envelope = @pubnub.revoke(channel: :demo, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1433", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192777"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_dApcMjp3TztawXLiOFSRIJE2GNqopd9DE3dcAjZH-4="
      envelope = @pubnub.revoke(channel: :demo, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1431", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192778"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2yiC1fDhCEbaoOI1s-b9Xl_7LO23uFfpDrd_I31gDS8="
      envelope = @pubnub.revoke(channel: :demo, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1432", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192778"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2yiC1fDhCEbaoOI1s-b9Xl_7LO23uFfpDrd_I31gDS8="
      envelope = @pubnub.revoke(channel: :demo, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1430", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192779"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5xHdFopqDIJty4SoLjvH-X5hQryM5oHPhTqAsw1Nnuc="
      envelope = @pubnub.revoke(channel: :demo, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1428", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192779"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5xHdFopqDIJty4SoLjvH-X5hQryM5oHPhTqAsw1Nnuc="
      envelope = @pubnub.revoke(channel: :demo, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1429", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192780"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1LjbJzL_yOnyC9Kb6I7bQxsU3UGHpC0E1KSLgJWK8n8="
      envelope = @pubnub.revoke(channel: :demo, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1439", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192780"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tImsbk35TtFzZgSDoNhcWfFyKktkbWlbLw3Pg0Zwh2U="
      envelope = @pubnub.revoke(channel: :demo, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1437", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192781"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kt6NVLCLbPGMw2OUfr6DdKYDNFpbiRp6Jz9mnkTfVzk="
      envelope = @pubnub.revoke(channel: :demo, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1438", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192782"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9Q9umLZoZ2VCZix2h5mkT86l8aC36VAPL6nsBEaifP8="
      envelope = @pubnub.revoke(channel: :demo, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1436", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192782"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9Q9umLZoZ2VCZix2h5mkT86l8aC36VAPL6nsBEaifP8="
      envelope = @pubnub.revoke(channel: :demo, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1434", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192783"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hg1c4guvMum-ikgr7v_2Ev0DYK9STL4e20EAugFVQNI="
      envelope = @pubnub.revoke(channel: :demo, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1435", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192783"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hg1c4guvMum-ikgr7v_2Ev0DYK9STL4e20EAugFVQNI="
      envelope = @pubnub.revoke(channel: :demo, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1445", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192784"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l7aWwglR3B2ifAM29T2eBw96IEZSIOkr2BdQAgMAQmY="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1443", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192784"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l7aWwglR3B2ifAM29T2eBw96IEZSIOkr2BdQAgMAQmY="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1444", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192785"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zJWSb-89JEAj0IhZzVhsIuonRNxDDX18CLPBG7sraHY="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1442", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192786"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ace7r2oiCB0iqkufBeW_efhyCZVyNSGJ94CV1tvE3wc="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1440", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192786"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ace7r2oiCB0iqkufBeW_efhyCZVyNSGJ94CV1tvE3wc="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1441", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192788"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JRwWrDpdKmqSyAAqmow1-vLJ3BP2IPkCFQ9-2wScYio="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1451", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192789"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YqCsDLeTNW2d3uLH1cec6xfdMCTQ6GLUTWy0msD_-JI="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1449", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192790"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cFqekgJtfeIE2xer3Hy5gDW6iTBxzRR7TRFBELqsY-g="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1450", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192790"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cFqekgJtfeIE2xer3Hy5gDW6iTBxzRR7TRFBELqsY-g="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1448", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192791"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7m7CFMOhENRyYUQZpW74qT0QsMx3cHTTEYijVVAmmMQ="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1446", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192791"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7m7CFMOhENRyYUQZpW74qT0QsMx3cHTTEYijVVAmmMQ="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1447", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192792"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oF81VyrEfEPATINjYkjewR6kD8BkXYrYpgLL0qdOfjA="
      envelope = @pubnub.revoke(channel: :demo, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1457", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192792"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wETm0HXjO0ywosrSXd0wUQZx0xB8wKFZDSI8_GpKckQ="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1455", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192793"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SaPF4BlqVPvUrYi6-nxpKTJag5b1Usd0d_PDc54e9lQ="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1456", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192794"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AwY5ciqkWZS7tnKb52lj6rj9IDS6d3tevr5uExp3RoE="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1454", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192794"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AwY5ciqkWZS7tnKb52lj6rj9IDS6d3tevr5uExp3RoE="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1452", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192795"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Bp9UR5MEyZ-zXEXHVCPqPhzq1rMRZ9mrzad9HhUvhfc="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1453", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192795"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Bp9UR5MEyZ-zXEXHVCPqPhzq1rMRZ9mrzad9HhUvhfc="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1463", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192796"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ImTKx8OVnFNN30eEbCGhFPh8iZkLvUqvWojHQF-_FB4="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1461", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192796"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ImTKx8OVnFNN30eEbCGhFPh8iZkLvUqvWojHQF-_FB4="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1462", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192797"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UcnzYZbxKk3rVRPkDSGy08QjhATC9C4TXSB7i2cnH_Y="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1460", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192798"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xa9ditd2P9HRH8akqDWnXQWrG8lbqMPE5ajKb4KkyJg="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1458", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192798"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xa9ditd2P9HRH8akqDWnXQWrG8lbqMPE5ajKb4KkyJg="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1459", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192799"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1I7WpU2BcPIAoTOEb0H_H-H92ReoFoD0VS6N6e9nEjw="
      envelope = @pubnub.revoke(channel: :demo, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1469", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192799"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BlWGgHU--u_Qn9Qjl6YhVSfbt3lJSnhAOkkBr3thvW4="
      envelope = @pubnub.revoke(channel: :demo, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1467", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192800"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xq-j51q7sa1PlbdqkXc8qn0x8h0ZIXKEwX4pW41g1XQ="
      envelope = @pubnub.revoke(channel: :demo, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1468", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192800"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Xq-j51q7sa1PlbdqkXc8qn0x8h0ZIXKEwX4pW41g1XQ="
      envelope = @pubnub.revoke(channel: :demo, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1466", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192801"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SeqgqMkFX7wnuJuCW7pMlpnwaQXJXh04J1sDbUo88go="
      envelope = @pubnub.revoke(channel: :demo, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1464", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192801"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SeqgqMkFX7wnuJuCW7pMlpnwaQXJXh04J1sDbUo88go="
      envelope = @pubnub.revoke(channel: :demo, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1465", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192802"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4Occusm5SAty0K20YMC8dg4blLVcBkqdHwyAGr2klPw="
      envelope = @pubnub.revoke(channel: :demo, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/1475", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192803"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KzJKxXf2HS4f5ZVhzerrdFpLX4Vr8ZhkK6T7OwUkE1w="
      envelope = @pubnub.revoke(channel: :demo, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/1473", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192803"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KzJKxXf2HS4f5ZVhzerrdFpLX4Vr8ZhkK6T7OwUkE1w="
      envelope = @pubnub.revoke(channel: :demo, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1474", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192804"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rKhk-6DK3bjadFVXz7Ct8ayXJI15UHyoenBHptRyOIY="
      envelope = @pubnub.revoke(channel: :demo, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/1472", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192804"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rKhk-6DK3bjadFVXz7Ct8ayXJI15UHyoenBHptRyOIY="
      envelope = @pubnub.revoke(channel: :demo, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/1470", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192805"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wB3wOfCuswMQhHEo_0Vju7QqLjAtWOGlbEXr_SFSdY0="
      envelope = @pubnub.revoke(channel: :demo, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo___group__nil___read__nil___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1471", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192805"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wB3wOfCuswMQhHEo_0Vju7QqLjAtWOGlbEXr_SFSdY0="
      envelope = @pubnub.revoke(channel: :demo, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/941", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192806"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ijz39Y339iHvTUoKP8nUNI7LVeMl9nxuFgUIW63CmY4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/939", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192807"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_yCfmNjgPy-ihQmxxrNYW0uCROwMbMUvmRPasyUJ2Jg="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/940", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192807"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_yCfmNjgPy-ihQmxxrNYW0uCROwMbMUvmRPasyUJ2Jg="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/938", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192808"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0X0mgAVhZhTKxfSZ4cOhoPEWNgcmlHqcErMKe0PuoE4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/936", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192808"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0X0mgAVhZhTKxfSZ4cOhoPEWNgcmlHqcErMKe0PuoE4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/937", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192809"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_VjsbwRkWN9LJ9egtF4AwPcmi_xgSQSUz72VWjPkefU="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/947", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192809"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NQF6PXq81NDX2p_ELIzZ2vt6Cd_N-fI8xOyq2Hit6X4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/945", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192810"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wAndBfR58pekDzJV-wophLYcNpX4gk9fM-mk4N4NQ2A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/946", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192810"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wAndBfR58pekDzJV-wophLYcNpX4gk9fM-mk4N4NQ2A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/944", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192811"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R_gElbjdIctaq_5fmX5rHTjMZ1C4oCnOBRyziboQwU0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/942", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192812"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "swbOTXs0SdmGlk1FzuKcdU9sdxgDJ5tE7_ZcM4WC0So="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/943", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192812"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "swbOTXs0SdmGlk1FzuKcdU9sdxgDJ5tE7_ZcM4WC0So="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/953", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192813"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UqntyJXgG_7MTVWiawhYX6AuCMyKz2PJDsjSx6VxiDc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/951", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192813"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UqntyJXgG_7MTVWiawhYX6AuCMyKz2PJDsjSx6VxiDc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/952", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192814"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EelRNHPtYT_suoe9xG24lO3I3DVGUEm5GT_DSvstcuY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/950", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192815"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KxFOMhmG_EagR2ZD7sBTuD-jnXURqmlHhjV_MAu9rdE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/948", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192816"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T5IZWAYM3ct9kVvgArZfaDIrV111nYyphkYJQZnCiKQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/949", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192816"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T5IZWAYM3ct9kVvgArZfaDIrV111nYyphkYJQZnCiKQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/959", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192817"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q5ckBGBxt3gPIE6-lr55tzhQw00YHNxjczHhf1_ZrG4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/957", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192817"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "q5ckBGBxt3gPIE6-lr55tzhQw00YHNxjczHhf1_ZrG4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/958", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192818"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mwuYpyuaKLKFTQz-tn3tzbs5BlEji6W0-QWbG6KnQB0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/956", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192818"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mwuYpyuaKLKFTQz-tn3tzbs5BlEji6W0-QWbG6KnQB0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/954", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192819"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iDDojrT00-GHNZV7Cag6MnyJYPMguS5uSk8ZreUM0Qk="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/955", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192820"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SCBg3Jl7f-LyxQG86IwCenVn0kwkJCILXEltNZ8Nt7Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/965", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192820"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NmZ5Yx-m6Z1g96owcaD7SXBPvD53Qz17FxsvD5t8LxE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/963", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192821"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qzqFrKgImAqaVvsuu117J9kuB-w9u-aDh08Fd8ZKnCo="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/964", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192821"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qzqFrKgImAqaVvsuu117J9kuB-w9u-aDh08Fd8ZKnCo="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/962", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192822"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vqHolordllb5IadtDVRqp3hfbs5v5KIBut1uVwJSgjk="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/960", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192823"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kpa7P-L70seummgP1Ly8HgMYDMkBVnALI7XmESAX3gY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/961", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192823"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kpa7P-L70seummgP1Ly8HgMYDMkBVnALI7XmESAX3gY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/971", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192824"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w4plhF2qwu28cXXgoJP5i1UitV_79B3WYHUm1HMHz-0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/969", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192824"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "w4plhF2qwu28cXXgoJP5i1UitV_79B3WYHUm1HMHz-0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/970", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192825"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k7xpMKWfKCc5K72NE1G0VL74wHzAVW1_Qt8QWLQZsp4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/968", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192825"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "k7xpMKWfKCc5K72NE1G0VL74wHzAVW1_Qt8QWLQZsp4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/966", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192826"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "29BPIOaqjcRIXa1oO_FOn_budOTOlXLapSh8sYVD91Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/967", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192826"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "29BPIOaqjcRIXa1oO_FOn_budOTOlXLapSh8sYVD91Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/869", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192827"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XXFa2JsSpNPzk4vYTsaRxBrWxHbvlhd5yQnomSX7kc0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/867", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192828"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ssZZJCHHnRXV9RlOoF-Oy2dNeSCa-wrylHm_TdgIT50="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/868", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192828"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ssZZJCHHnRXV9RlOoF-Oy2dNeSCa-wrylHm_TdgIT50="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/866", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192829"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BC22rPw51zxmeoKPyqdwCmjHEL7yI0EHwuP7k2rVhf4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/864", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192829"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BC22rPw51zxmeoKPyqdwCmjHEL7yI0EHwuP7k2rVhf4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/865", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192830"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JfTWPRHosN71w276XBUOUAURt4imOxOES1FyjvBmVDM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/875", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192831"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1TGdjXI6Tk4X0d9TV4lk2ShqCjNfBxUiWbhuBHTjp34="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/873", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192831"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1TGdjXI6Tk4X0d9TV4lk2ShqCjNfBxUiWbhuBHTjp34="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/874", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192832"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n3ngWDE1WFRp15T0ddiuZ5B4hwwIYmGiDbsoLWDnK0I="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/872", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192832"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n3ngWDE1WFRp15T0ddiuZ5B4hwwIYmGiDbsoLWDnK0I="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/870", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192833"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jf7fvFXQNgvcdD6tCHE1klmic1JMErG8hSVtp4iiFNc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/871", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192833"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jf7fvFXQNgvcdD6tCHE1klmic1JMErG8hSVtp4iiFNc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/881", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192834"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KDTELe__ykDXkI8uUgUnOUQz1eo0iu7Q0T8-h-KU9Vs="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/879", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192834"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KDTELe__ykDXkI8uUgUnOUQz1eo0iu7Q0T8-h-KU9Vs="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/880", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192835"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P3hPS5J5XoW2AmUQnsQVEn7hHzjq0Zz3g5vpp6PbPMY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/878", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192835"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "P3hPS5J5XoW2AmUQnsQVEn7hHzjq0Zz3g5vpp6PbPMY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/876", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192836"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3JTJLQs_uPPzMocg3EQX2a8US__AbyS-ydrlDu1lb3c="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/877", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192837"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kZDaKWt9_kpN-nVk-3SIDBNxglbL0vYJkfxMJXhljn8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/887", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192837"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ODftZLcQVes2eH7rVf98F168vS6TvVAl4OVAsbs0JO0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/885", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192838"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U4SS3W_KyzaZsuSMh5XXt9qFPsHNc96Ds-9-OLXLl9Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/886", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192838"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "U4SS3W_KyzaZsuSMh5XXt9qFPsHNc96Ds-9-OLXLl9Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/884", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192839"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "agin_5Y5LxQTlO29rYZ-YBis5zKdLjUmCK0LAyKlPJY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/882", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192840"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tw7SyF-a_YLXL9VBL4DQLHqFUadbKtm9biNDkesjIq8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/883", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192841"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zIGN36bzCJDw8DgovQpIeNzB2L9koD9y7Sep7COTtR4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/893", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192841"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pUiO2a12zIO9BBvE1uGVT_Tz-p8JYw27nq54gZV0F0o="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/891", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192842"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OkxFYCf8ms_G_jRWGhD6TEjwBRWJMSuG7dajcsxGmv4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/892", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192842"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OkxFYCf8ms_G_jRWGhD6TEjwBRWJMSuG7dajcsxGmv4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/890", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192843"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6LnhIEHSXkbKLNq_WRPaPL6-nCkIjHgV9TSp8HEwAKs="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/888", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192843"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6LnhIEHSXkbKLNq_WRPaPL6-nCkIjHgV9TSp8HEwAKs="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/889", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192844"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tkzmR3nx0YvJxza_WlNy5HBF1rSeSaCOL0aybF0wlcc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/899", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192845"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BP79np4sDjuoXJAzHM5ZFUL7fADK7F9Mlro246C55NM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/897", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192845"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BP79np4sDjuoXJAzHM5ZFUL7fADK7F9Mlro246C55NM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/898", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192846"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8HLvaYhqQ4Gjt3DG4bi_Sx5xaN9za7XjIu1yklVz5oM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/896", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192846"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8HLvaYhqQ4Gjt3DG4bi_Sx5xaN9za7XjIu1yklVz5oM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/894", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192847"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "B47K0pYwA6AaiiWb577iL0oXeRH-iKCi_zgOriLcB6w="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/895", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192847"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "B47K0pYwA6AaiiWb577iL0oXeRH-iKCi_zgOriLcB6w="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/905", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192848"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BNruReo54NhdEjx5pQFUpIRIm6HnqxQ6C8Hkbrw2EtY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/903", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192848"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BNruReo54NhdEjx5pQFUpIRIm6HnqxQ6C8Hkbrw2EtY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/904", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192849"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "l_zYuJNISnkzTl_bIF4_vaFeas7rCLXd-Ivg4ux6w3U="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/902", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192850"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DQiCVAVV0uq5doLZVJMO11T33D8N1TLkCSdKpHgVf8A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/900", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192850"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DQiCVAVV0uq5doLZVJMO11T33D8N1TLkCSdKpHgVf8A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/901", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192851"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Rhlu8-obk7obOWHPQeQz8GlTX1an01KcL0FJiszRhxo="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/911", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192851"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MNqlTeGBu4fQ5OXQMpDwlLcYSChB4_bDfYjcbJe7i4c="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/909", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192852"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dZC0C-TuUfiYbnZWZ4o8TrqdHENzqh_4mRwoQJJ-AZk="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/910", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192852"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dZC0C-TuUfiYbnZWZ4o8TrqdHENzqh_4mRwoQJJ-AZk="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/908", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192853"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "13Dou9RMnkKblb-jDkrUmggfgzrGJREUzXTvVN7EmPE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/906", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192854"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Cl-R_ZugnaS_TJy9Empyrs9RalTB0OO5tHWT6EJkrv4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/907", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192854"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Cl-R_ZugnaS_TJy9Empyrs9RalTB0OO5tHWT6EJkrv4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/917", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192855"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VDJ66B9AI3GRvGbdggxxugTP3WKCEaSGCJUx8Ca7r20="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/915", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192855"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VDJ66B9AI3GRvGbdggxxugTP3WKCEaSGCJUx8Ca7r20="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/916", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192856"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q1qhjSJ1HPAUNGMwKS-CYmErekKUUCc3zizBtwmKbFM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/914", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192856"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q1qhjSJ1HPAUNGMwKS-CYmErekKUUCc3zizBtwmKbFM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/912", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192857"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VcOabjAvYNEGvFEzyJaYKV1HtVQDyNyux_x88QGT4Us="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/913", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192857"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VcOabjAvYNEGvFEzyJaYKV1HtVQDyNyux_x88QGT4Us="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/923", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192858"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "avuWIWBziioRqhs5CjNDY-MyXxmjnhYf7-bPXv9SB5w="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/921", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192859"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gBysrwrsl7b7fRTUYqrJnMESAStc4K7Y1F4oIYAvZ5A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/922", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192859"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gBysrwrsl7b7fRTUYqrJnMESAStc4K7Y1F4oIYAvZ5A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/920", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192860"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sEzEZ5xWuXMDnPdFCLqyTsVUkOl0EUzNJj_USnkGGWQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/918", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192860"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sEzEZ5xWuXMDnPdFCLqyTsVUkOl0EUzNJj_USnkGGWQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/919", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192861"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Csj0VQQIuOb8FtlylOR2azc8hr81QaBIsFL6xrY5IA8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/929", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192861"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qGttVM3UJN3yB1LpeBsZKQSLguDxRx7EYn0qGgy_AA4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/927", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192862"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NwVuGqDYwQ9XmcxkSw3BHE1D1w0jAXswiLl2vEq8IQM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/928", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192862"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NwVuGqDYwQ9XmcxkSw3BHE1D1w0jAXswiLl2vEq8IQM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/926", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192863"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jW7wn_22rYWrbjSOSXF-yeSellrM1rtN9-MmRPXLG5s="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/924", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192864"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UyhRYrH0HuXC1nqs-sOM8OvGEQvX18VtETNXUGlDS8E="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/925", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192864"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UyhRYrH0HuXC1nqs-sOM8OvGEQvX18VtETNXUGlDS8E="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/935", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192865"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6rGS5sJFTOS1ld9VM24LABi2EJyg9Na2OvLXdL4jcUE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/933", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192865"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6rGS5sJFTOS1ld9VM24LABi2EJyg9Na2OvLXdL4jcUE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/934", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192866"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DeSLvQHGwTslDEjxqMFFB_hyr0ZN2rFv9W21atLYtvw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/932", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192866"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DeSLvQHGwTslDEjxqMFFB_hyr0ZN2rFv9W21atLYtvw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/930", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192867"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3ubLDrHxPkwF9k6tQfyEV0z6p6dAI1lbFM0aMxrNsgE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/931", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192868"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hUfy4rNGn-NhN-GC9Kursyczu-Yw_EQiVaQhzSP_MvE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/725", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192868"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S4w5mQZ4JzvAE30-z4eB9RDA4nytukMDTAfjZ5ub2mc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/723", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192869"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XtdoWd87BXKHYuTOv7Qdqbdgw9uCIPPISsylH5iheGA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/724", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192869"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XtdoWd87BXKHYuTOv7Qdqbdgw9uCIPPISsylH5iheGA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/722", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192870"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3uKw2-kWUtd-tUmDfKzqhjZBcICKwE6U-vK8dn2HyT8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/720", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192870"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "3uKw2-kWUtd-tUmDfKzqhjZBcICKwE6U-vK8dn2HyT8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/721", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192871"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wOhlGvMrvnKuRNRe3bajYiD8qe_vBOLRndi_xWzTIUA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/731", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192871"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VfE0a8Ox5rXWl2i2YWiSDNji_-GodjdxeV403Ir105Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/729", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192872"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SCOBpeTyi9tUC2cgHQub7-h9ZOq0xIVUSTaGXbHWQU4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/730", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192872"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SCOBpeTyi9tUC2cgHQub7-h9ZOq0xIVUSTaGXbHWQU4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/728", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192873"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MTRMrO_tGB-IkcdQXoGBwFGCoKpfr3nZhaSz0MTTNeY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/726", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192874"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6vtRdDBNRzzLqqZQol9dFyw1U8ytrZqSLp0xSHMnV0A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/727", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192874"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6vtRdDBNRzzLqqZQol9dFyw1U8ytrZqSLp0xSHMnV0A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/737", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192875"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hSSAKbJfy1echCrZJI6r8Iq644D9HvQlebBFqWNShzQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/735", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192875"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hSSAKbJfy1echCrZJI6r8Iq644D9HvQlebBFqWNShzQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/736", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192876"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yMN0V-BioFNi8YktXwmevWuAl1gTRCiQLQINZRRx2U8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/734", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192876"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yMN0V-BioFNi8YktXwmevWuAl1gTRCiQLQINZRRx2U8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/732", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192877"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BsC-CdN-ykea8skwdkamv9HsuJ_AEK21D-VS9QZZvgY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/733", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192878"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RTw6fYt6CbuaRafOncVppf-DD0bCiWtrlU-b6VlPDmc="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/743", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192878"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "aC8izxrR9nmZrpUXtyPZiVaoHSD8O4Hyl1O0tCVnTqA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/741", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192879"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lwli1f6AmGaA8DElUHIliP8VqXhbx0YAR3w-WCyMU2Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/742", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192879"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lwli1f6AmGaA8DElUHIliP8VqXhbx0YAR3w-WCyMU2Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/740", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192880"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5tljCfqA0OWQ964iIqnywOg7Iw_a7klvPWGj0ubBnT8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/738", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192880"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5tljCfqA0OWQ964iIqnywOg7Iw_a7klvPWGj0ubBnT8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/739", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192881"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fEGvHpuwCOB0VVy3BbRG68J_gKyrNUCR6GkIpAy-Zeo="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/749", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192881"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knZw3ruYhf935EaeHmbVpFzVJsmey1ATS25PM-dMn-E="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/747", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192882"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KN-6UG6aY3yv6odNWPqiJkfvGWY_XtvKELfHAT_6VQg="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/748", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192883"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zjw4kdl2sZfO2eNeaRTnNV6FyLGCCeh_s_p-NZmzG5U="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/746", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192883"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zjw4kdl2sZfO2eNeaRTnNV6FyLGCCeh_s_p-NZmzG5U="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/744", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192884"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F-XAWFzn-yUw6RBAKArs2kUT756axd48rQ3-bUvW6GQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/745", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192884"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "F-XAWFzn-yUw6RBAKArs2kUT756axd48rQ3-bUvW6GQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/755", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192885"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "icjDNvu5K4jk0ZVidpRELYq-Nve3JBXH9DZTkx7U7ik="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/753", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192885"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "icjDNvu5K4jk0ZVidpRELYq-Nve3JBXH9DZTkx7U7ik="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/754", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192886"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "havnwtjofqTmu3GHgV9X2-v6nH_Oat7LiMG3j4C8_1s="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/752", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192886"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "havnwtjofqTmu3GHgV9X2-v6nH_Oat7LiMG3j4C8_1s="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/750", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192887"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gErJNP2dPxxkddrX-6JGGwoAuFJwG4QWHgP0G1w5EDU="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/751", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192888"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MjNyjIv-cNww81XsQ9gcMuAg17eso_yTTGCwlzPTj5o="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/653", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192888"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QYVS3PeKvso4Q5i6DZspL7WciAss4kYTlt8EFdtt5gA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/651", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192889"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "93XCxdG2YqS66oEK2gyhkTONNsWmgBhWxiMEZn7DOpI="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/652", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192889"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "93XCxdG2YqS66oEK2gyhkTONNsWmgBhWxiMEZn7DOpI="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/650", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192890"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IBsy-ZZOHtm94DHxZ4o0B1V1ow4FfDuXwCmTHCCrLo0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/648", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192890"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IBsy-ZZOHtm94DHxZ4o0B1V1ow4FfDuXwCmTHCCrLo0="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/649", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192891"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ILR2AXgAWxwRMnozWsS8aNYIA_8K5kovxoG3SCBEe-c="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/659", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192892"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_AQNvZmxRbLopNe-kgS38WyIddoC0GJBXobC33ociUY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/657", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192892"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_AQNvZmxRbLopNe-kgS38WyIddoC0GJBXobC33ociUY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/658", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192893"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gR2y_sTylUrU9eS56WnqvgRK3zNeowjw_bAgJJ4rrqA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/656", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192893"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gR2y_sTylUrU9eS56WnqvgRK3zNeowjw_bAgJJ4rrqA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/654", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192894"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sqxkbt9OlahQaJUkrrjuuxXZ-4WwIAS4Dzn2vyOg98A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/655", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192894"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sqxkbt9OlahQaJUkrrjuuxXZ-4WwIAS4Dzn2vyOg98A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/665", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192895"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_Bylv22C7qwCXtwyMk-D_jqzPGRo6eFSFqm4Fqv3lHU="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/663", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192895"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_Bylv22C7qwCXtwyMk-D_jqzPGRo6eFSFqm4Fqv3lHU="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/664", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192896"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7dkedyeBvZAVVT-Fnw9qULQVeVn3iodhm11D_5Giq8E="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/662", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192897"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2EF6C9NNQL2rsUdeG0wjsCfx3FRwDeFi-bL3FTIIF5Y="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/660", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192897"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2EF6C9NNQL2rsUdeG0wjsCfx3FRwDeFi-bL3FTIIF5Y="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/661", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192898"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7V6y2-QOXgmwcO3mG3iL03fLERZiWFK0BFGzGtwkW1c="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/671", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192898"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FFJbRKrQKoI4rKS0Bhrrc-g_CigIZODK5SeKtTliNfI="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/669", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192899"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "847onmu4u3yE9cNn7oo4OeUfgT_9JGubkkZjUtmlTpw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/670", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192899"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "847onmu4u3yE9cNn7oo4OeUfgT_9JGubkkZjUtmlTpw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/668", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192900"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WqGGQZWDHYBqXw3VTTPOaRGqOZKJXGga7ZIaVU16JD4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/666", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192900"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WqGGQZWDHYBqXw3VTTPOaRGqOZKJXGga7ZIaVU16JD4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/667", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192901"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Daf5TFbydvL4i7iUOKP7MM37lmkcKfKW6k2NKhjXo2A="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/677", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192902"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LbOkAgO6KnVgkJ7jXe1r3R3wxpVzIKLILjunPVrV94Y="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/675", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192902"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LbOkAgO6KnVgkJ7jXe1r3R3wxpVzIKLILjunPVrV94Y="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/676", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192903"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x_kMVLgQlbdmsMuJcr_OEaWSk0RbxCcO0YxgVPwsOwY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/674", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192903"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x_kMVLgQlbdmsMuJcr_OEaWSk0RbxCcO0YxgVPwsOwY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/672", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192904"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D1PLHDl9NuQ8saV3-RtJ9OAzblA7pjRjBRH1M5lIMB8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/673", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192904"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D1PLHDl9NuQ8saV3-RtJ9OAzblA7pjRjBRH1M5lIMB8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/683", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192905"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "gVd-nGgF2bI6Vlf2YF5vOznx9VkPns5T1PTVNzE6Mnw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/681", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192906"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ff1kLp7_Ppj3By3TjY7Cd-ziQURr2HPPD79Z3KG7uBg="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/682", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192906"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ff1kLp7_Ppj3By3TjY7Cd-ziQURr2HPPD79Z3KG7uBg="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/680", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192907"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1jpNvG2hgZf0LcSLb-IZNz0IGbySa1vF2ST3veXFwO8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/678", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192907"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1jpNvG2hgZf0LcSLb-IZNz0IGbySa1vF2ST3veXFwO8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/679", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192908"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "W8oDO1nU7fU1a9jKVzwEI-Rjv3E_lSvjyjvHB9wtqmQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/689", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192909"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nt9Kc1jy2LTMMQuAydBbZQQ_RvLsIjf8u-bg5aT3Iv4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/687", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192909"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "nt9Kc1jy2LTMMQuAydBbZQQ_RvLsIjf8u-bg5aT3Iv4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/688", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192910"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wxlLltUPPTwtByuUsLNV5Rpi-QPrs9CbI9MitKWzGrk="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/686", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192910"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wxlLltUPPTwtByuUsLNV5Rpi-QPrs9CbI9MitKWzGrk="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/684", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192911"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MZ91Oc_StMIJpAOGfQo9OrXNs8VJ7cDEjTDgwMjM4yU="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/685", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192911"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MZ91Oc_StMIJpAOGfQo9OrXNs8VJ7cDEjTDgwMjM4yU="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/695", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192912"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RIkPC25H6qDp3XSGpyU0OhvJyLK1yMkJDHocsmav9ko="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/693", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192913"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lAoRw3epH5ty6yAGhq1YCTN9mEykCNF8TZ7baNNjztQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/694", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192913"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lAoRw3epH5ty6yAGhq1YCTN9mEykCNF8TZ7baNNjztQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/692", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192914"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1YERJCdQbNavs_5fd2Szj7mZQITQIe_7dTf30wWgbY4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/690", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192914"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1YERJCdQbNavs_5fd2Szj7mZQITQIe_7dTf30wWgbY4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/691", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192915"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZnRJNVrHxVg9cmzzruF7ykw_12eNdItdPE572QSIMqY="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/701", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192915"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OLpC8drUaDqhzk0ZUtiAhpzFLTT54z9hTfRBpr6nKNA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/699", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192916"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mS-wKgr22loCC9P_cliPMp6KJqTWJeGjc0a06cShACQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/700", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192917"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UwvkAUf3CbcWj7YkvHhuu2BaxiAwz_tIfOIEjGRVfi8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/698", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192919"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BRm9JtILBXNwlTkWZLoe8g9BCsSGGpx-gWGMMnYiH60="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/696", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192920"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1YyImFPiSJjJTuOc7HKkh_uNPZgLppGQaRYR4kOeQoM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/697", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192921"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Tbp5zXw3jKT5RB9XNHu-4c16hGb39ugL900j7Rsu17g="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/707", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192921"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G42LefLQDaYZXQhzoobse0QQbcmDAaEAPS3O3wfHnMI="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/705", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192922"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CQUenAA8CfWOpvEUqJSBw5qfeTXdR4evUeR2K0mcNow="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/706", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192923"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "71IX5tf5AtfLix74_fKUi8ZslSCx0dBZt9OY8DwEUPw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/704", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192923"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "71IX5tf5AtfLix74_fKUi8ZslSCx0dBZt9OY8DwEUPw="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/702", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192924"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "llk0y0iNzpbxVTeJAig2CXwjGD7BpDSNHo8I9i38EJQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/703", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192924"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "llk0y0iNzpbxVTeJAig2CXwjGD7BpDSNHo8I9i38EJQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/713", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192925"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PnXOBb36LjHw3S8b7Q5NjeXJwroqFMfE2v0cUuFNnmM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/711", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192925"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PnXOBb36LjHw3S8b7Q5NjeXJwroqFMfE2v0cUuFNnmM="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/712", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192926"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Qn6xe80J0xx52MFMZD46Mrrnq95HnqeN2D7h_gxFpS8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/710", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192926"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Qn6xe80J0xx52MFMZD46Mrrnq95HnqeN2D7h_gxFpS8="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/708", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192927"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vdk6zqKARHRlxJX1aLV9Zj1QNFwGTBFgfolFWwyD_mA="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/709", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192928"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Q7MRovUOiFHS61TOu9gmMpe8zBT9EymUHLvgdTdFiIo="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/719", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192928"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RR0HTHfpj_omRUuGD3a0NiZzJsjoW84HCJ3jJ7RjpkE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/717", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192929"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L5QscvbhgY77dQuglAlRLQKxww86vAFY1zjUl3V7TmE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/718", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192929"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "L5QscvbhgY77dQuglAlRLQKxww86vAFY1zjUl3V7TmE="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/716", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192930"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "77QHo-KkVkMk3S44XFZgr-XLqvnhrLniFDXask6-E-c="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/714", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192930"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "77QHo-KkVkMk3S44XFZgr-XLqvnhrLniFDXask6-E-c="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__false___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/715", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192931"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MpCq-gDwVKSzrg2Il5aDOl927IxkISEAGZCYByLKII4="
      envelope = @pubnub.revoke(channel: "demo", read: true, write: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 0, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/833", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192932"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X-RJHfL3LmlwQqIWN-VHn_mYiYicXHOXOAylVaL1ZJs="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/831", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192932"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "X-RJHfL3LmlwQqIWN-VHn_mYiYicXHOXOAylVaL1ZJs="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/832", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192933"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lD2jH2fFc62MZtxopnfEIOvs1C5b1OSYqkH9kCqX6K8="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/830", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192933"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "lD2jH2fFc62MZtxopnfEIOvs1C5b1OSYqkH9kCqX6K8="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/828", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192934"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IGDn9Z3JBSYRyrI_A671smtwHh-MQFy07L9wZUp_d-A="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/829", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192934"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "IGDn9Z3JBSYRyrI_A671smtwHh-MQFy07L9wZUp_d-A="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/839", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192935"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2_8mJFJRaBNCuJp6482vg2m3ksQkOi5JO7IwvfdfJ0o="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/837", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192935"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2_8mJFJRaBNCuJp6482vg2m3ksQkOi5JO7IwvfdfJ0o="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/838", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192936"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YcuSk5ZqAuspmw6zDkv_ux8MuQtzF4XPmaV9iXLbVkg="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/836", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192937"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DTcrlJa4z54XQFkqQJgH1d-7yRNCr5EA4aICYE1-EVs="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/834", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192937"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "DTcrlJa4z54XQFkqQJgH1d-7yRNCr5EA4aICYE1-EVs="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/835", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192938"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "GJz3SIq14UYN-zme6p3GALMu4y0XFyvxBly2fD29em4="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/845", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192938"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9kPmpCVRGr2DGTw2YpTgvrmi0ZNj7dOvqJksymoOzKQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/843", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192939"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "StFFSFphs8Xzwx2RznttpXfsGVxml9zfMzIXQKCyeoo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/844", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192939"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "StFFSFphs8Xzwx2RznttpXfsGVxml9zfMzIXQKCyeoo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/842", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192940"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Fo6ck_oI6i7g7SMd1gRbjZgOqUKtK54SQBEPdQH3m7o="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/840", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192941"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h41H8PXOXQckqCcrxDWlrZbxI6HcNM61RQCW6lArJEA="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/841", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192941"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h41H8PXOXQckqCcrxDWlrZbxI6HcNM61RQCW6lArJEA="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/851", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192942"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JkrsQzXIYNWxDkk17C4Bbm_i3WXr7prI_q7FAuoMzX8="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/849", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192943"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZvlsfG-r0bmlnLkUcYA5P9p0zY3rv1npED-XZc338tU="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/850", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192943"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ZvlsfG-r0bmlnLkUcYA5P9p0zY3rv1npED-XZc338tU="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/848", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192944"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JPpUvXuhr_MNPnzfJL2Sr6NLAL4sbD0igsmBH06v45Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/846", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192944"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "JPpUvXuhr_MNPnzfJL2Sr6NLAL4sbD0igsmBH06v45Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/847", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192945"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "G0lPB--vh4tr0op67jIRqdAPzwP2OrRFN2zMpAIfkeU="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/857", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192946"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-UM5dN6z14jZyeAwdv1Lkn2B9k-ICvHPRlmaZ3YOOxw="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/855", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192946"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-UM5dN6z14jZyeAwdv1Lkn2B9k-ICvHPRlmaZ3YOOxw="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/856", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192947"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VS7cPbefVB56U27XuZJfw726oaqj6uP48xqSiFVIuaY="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/854", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192947"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VS7cPbefVB56U27XuZJfw726oaqj6uP48xqSiFVIuaY="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/852", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192948"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pI7AJeTEaktRzT1KBiCIeYpkB3xyvCB-n__YbN9hxfo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/853", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192948"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pI7AJeTEaktRzT1KBiCIeYpkB3xyvCB-n__YbN9hxfo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/863", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192949"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tyjKTaWpZGEMZ33OPI-WfrMgMG9SDSfON0IBSNf3OTo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/861", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192949"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "tyjKTaWpZGEMZ33OPI-WfrMgMG9SDSfON0IBSNf3OTo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/862", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192950"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vuEIhluEAcEKXqzC3Wb_xndPvKuPGJ-TnT89m54Docc="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/860", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192951"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OzAwKJDL4JtWbEYCybkhAbiRRb0SrYS50W9DTnef_ro="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/858", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192951"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "OzAwKJDL4JtWbEYCybkhAbiRRb0SrYS50W9DTnef_ro="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/859", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192952"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "61HAGL_cmz10BorQ1TGcpmMf01ZIptEt-se-NVBEYzY="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/761", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192952"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XKh1KRYAzjaANOJznO7bsEQ0h8CBVC0N2nRepDfHI1E="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/759", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192953"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XbRUAa5T0MKJ0vn6ndJinzEkofHAj0CKiUUsC-qmIf8="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/760", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192953"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XbRUAa5T0MKJ0vn6ndJinzEkofHAj0CKiUUsC-qmIf8="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/758", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192954"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "68CTjYooOQ2UPweToowvs4dgftFY9mtmjO_IlYnloB0="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/756", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192954"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "68CTjYooOQ2UPweToowvs4dgftFY9mtmjO_IlYnloB0="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/757", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192955"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qskDkJ7aHOnf_eM0wue5ebbNUIDeQTNsJ8tsffto3i4="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/767", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192956"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iz6TwFyjGujgDiyFkiztJHzBKuLm_Fp5S2vxOx5LIKI="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/765", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192956"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iz6TwFyjGujgDiyFkiztJHzBKuLm_Fp5S2vxOx5LIKI="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/766", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192957"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ni424YDv_0tyNTisona4f6vrUn5IQlQm7JzsweZGWi4="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/764", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192957"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ni424YDv_0tyNTisona4f6vrUn5IQlQm7JzsweZGWi4="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/762", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192958"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kQg5WKNvbue1lIhHIRc8i-ouLWu23St7oIhnBqtW730="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/763", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192958"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "kQg5WKNvbue1lIhHIRc8i-ouLWu23St7oIhnBqtW730="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/773", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192959"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "41Lcz56ETK8Gjnq0ZAcqMnLcRbD9nb8QFNsPh5MuhOM="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/771", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192960"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x1ltWVetkjC1kTuDCUGWAmt7mda5LsnrmQATvqP6LWA="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/772", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192960"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x1ltWVetkjC1kTuDCUGWAmt7mda5LsnrmQATvqP6LWA="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/770", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192961"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dpMIji9eRnIPHm_A1wKtWMDtn_0JcE9CJUq3l2i9epI="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/768", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192961"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dpMIji9eRnIPHm_A1wKtWMDtn_0JcE9CJUq3l2i9epI="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/769", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192962"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-ReDK7qvlrK7Sb2tGX2C2b9AI15EBsJ8IbcUoA9Ggx4="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/779", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192962"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dzil8-THamyqNvfWkSj92BLg0neHEsCj6IAItEd1DDY="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/777", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192963"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VV0ezx3iCjXqITXvW0Gi0uviNbtvwsEwidud-tNdnnE="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/778", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192964"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7158SEl7sHCkgVubr3ld89RqUMu30i4D7Bn5qfLCl80="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/776", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192964"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7158SEl7sHCkgVubr3ld89RqUMu30i4D7Bn5qfLCl80="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/774", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192965"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EnEeiffwMHCBlHLHEvket_9PU8GNkhyXDyhsVPmSKSY="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/775", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192965"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EnEeiffwMHCBlHLHEvket_9PU8GNkhyXDyhsVPmSKSY="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/785", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192966"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zvDyqs7ZSIhQ6xLsE-JPWszzNQBvZ5zHWWVFgOL-9pg="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/783", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192966"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zvDyqs7ZSIhQ6xLsE-JPWszzNQBvZ5zHWWVFgOL-9pg="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/784", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192967"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wskYgDzH5TknP1qEizOmcQO5ljmVigjqmcQ3B26Y65g="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/782", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192967"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wskYgDzH5TknP1qEizOmcQO5ljmVigjqmcQ3B26Y65g="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/780", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192968"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oZ3FvMUhQeOsJUq_6D4KkQhp1zaHvm2K8vOiGSQ1JLM="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/781", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192969"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qwLRmaJG4daSzZY9vkbKmWrrkeznIdzd33hyzlGI5tw="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/791", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192969"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-B75zjjjU1h2OILokLXWTv5XcD5Dg0CDHOCHpk1ANpI="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/789", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192970"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EV8deMkbEhhLj9DkgUpYOBX-_28i7MLA3iJ7GZyd_go="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/790", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192970"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "EV8deMkbEhhLj9DkgUpYOBX-_28i7MLA3iJ7GZyd_go="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/788", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192971"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cSm9a6_4UxPBN6ELaaqdrIcm437C1LOaFVdMAdG8_Jo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/786", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192971"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "cSm9a6_4UxPBN6ELaaqdrIcm437C1LOaFVdMAdG8_Jo="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/787", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192972"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "9xvpHxQccQ6iW4YBepb-52YoHAogL7rH3NNO5KWL55A="
      envelope = @pubnub.revoke(channel: "demo", read: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/797", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192973"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "08MjqKh1stkhCNECFn8pd2KPLDd4w5dCNywmCfbf6Fk="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/795", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192973"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "08MjqKh1stkhCNECFn8pd2KPLDd4w5dCNywmCfbf6Fk="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/796", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192974"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "smB9OQ7eUB38GjgvDdHd9IbNuzH6ZSBZrSc8ln3YdSc="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/794", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192975"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0CEX2RJssyKrmpA-G-bUu9rdMA8IigZpecPEsjla-L4="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/792", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192975"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "0CEX2RJssyKrmpA-G-bUu9rdMA8IigZpecPEsjla-L4="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/793", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192976"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_w2AvavGaOPi8WwYN4XLZ_39rEzW3HAZH0lnEJgG11Q="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/803", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192976"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "D-nuI5cVDhM3Mg3zkgHh-JI1a8Aem-1_vRcyaML-z3g="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/801", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192977"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g4G63oHicMuzErZMKJHobNH_RJ6Mw4VY1EkNi4Tb9DM="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/802", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192977"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "g4G63oHicMuzErZMKJHobNH_RJ6Mw4VY1EkNi4Tb9DM="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/800", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192978"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dTDPEe8Ci-varRUB2KJO8vOgK5oPfyp03Ij9RXwRym8="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/798", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192978"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dTDPEe8Ci-varRUB2KJO8vOgK5oPfyp03Ij9RXwRym8="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/799", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192979"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PfkSa28F3KGO0K_8NuOXrrpX2SD3N2-DU27qVr8BECc="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/809", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192979"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "2iw77Zf_eQrzNZLe60P9oVMmEBVUHVnhZ0tfYAfm_2w="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/807", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192980"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "e6ohhmOq_220aHjQ2-ljRewcTowUGwtLGfe7V2-xiyM="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/808", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192981"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S5_VcHLR0f93Ecg2sUP7Ak7hja4FJA-D0VbSQMXVhCM="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/806", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192981"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "S5_VcHLR0f93Ecg2sUP7Ak7hja4FJA-D0VbSQMXVhCM="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/804", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192982"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jIdMpscZrqirTqP5oIWQYZjOJbj7OdYlQqFDvllcFcA="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/805", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192983"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yCpLz0RxCVo8oioURqf7Cp8H4qgYY-5UVJMP7I7QhnI="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/815", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192983"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "C7F_WN9bf16y10T6xVfKV2UvHPz1uU80lNW8QUiLmPM="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/813", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192984"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sscdzkrxi5Xo023nayAMdJbEumM8EhHt4DvtIAonzxA="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/814", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192984"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sscdzkrxi5Xo023nayAMdJbEumM8EhHt4DvtIAonzxA="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/812", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192985"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MEA_Cjr5_AKnSwNEX7PbYefzYdMIfb5Cr9Yv3mkVEYo="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/810", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192985"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MEA_Cjr5_AKnSwNEX7PbYefzYdMIfb5Cr9Yv3mkVEYo="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/811", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192986"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8i8-eXS7gx5l4HFlGlfTg4WGvzJJq09TWpPel99KvJk="
      envelope = @pubnub.revoke(channel: "demo", read: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/821", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192986"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rB7iguQhfBNwf3Z2pUCFySgIxHTG4s6anjCIPqKC6q4="
      envelope = @pubnub.revoke(channel: "demo", read: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/819", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192987"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p0WY32XHCqLc4l8W1sv-pJF1MFSLKgSS0bkolQppLOM="
      envelope = @pubnub.revoke(channel: "demo", read: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/820", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192987"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "p0WY32XHCqLc4l8W1sv-pJF1MFSLKgSS0bkolQppLOM="
      envelope = @pubnub.revoke(channel: "demo", read: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/818", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192988"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PpnU54aEeOgoyUVrq4uTc8oCGLZdzEFpZiuqqB-0owE="
      envelope = @pubnub.revoke(channel: "demo", read: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/816", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192988"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PpnU54aEeOgoyUVrq4uTc8oCGLZdzEFpZiuqqB-0owE="
      envelope = @pubnub.revoke(channel: "demo", read: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/817", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192989"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iXw9fFT-Zs1nDkda6UZPpctAxriNNg2nwtRfZLhRU8w="
      envelope = @pubnub.revoke(channel: "demo", read: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/827", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192989"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pmLsS7j1Sd7928H6mS1Iq3lWtf2E8tSz_jChPDDLnhw="
      envelope = @pubnub.revoke(channel: "demo", read: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/825", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192990"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hWMv-qTy8cI86Vl6kIlqEyf1KlvlMSpfaYwu3JxXxEM="
      envelope = @pubnub.revoke(channel: "demo", read: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/826", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192990"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "hWMv-qTy8cI86Vl6kIlqEyf1KlvlMSpfaYwu3JxXxEM="
      envelope = @pubnub.revoke(channel: "demo", read: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/824", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192991"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "I9l4tyQCwIFO4RreyRjJFm1W0OcKvTqZQU_eyyd6wmw="
      envelope = @pubnub.revoke(channel: "demo", read: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/822", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192992"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kw1x3m5T4fwpuSv0LpfteXgxoQ_DMJWYsuFiM2HNqXQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__true___write__nil___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/823", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192992"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Kw1x3m5T4fwpuSv0LpfteXgxoQ_DMJWYsuFiM2HNqXQ="
      envelope = @pubnub.revoke(channel: "demo", read: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1, "channels" => {"demo" => {"r" => 0, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/293", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192993"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wHacAPWkbjjlWL1XJcsLGi5AZQR9Ls9XiLMltxgoB2c="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/291", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192994"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ieblVxE4EIjRQ6vPtlQMCymSyCSAyA_l7Mbqrsf_zsY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/292", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192994"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ieblVxE4EIjRQ6vPtlQMCymSyCSAyA_l7Mbqrsf_zsY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/290", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192995"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TeowNaa4WISwweINtCeXXE-hSBqBNWjCH3iOlbphLVg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/288", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192995"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TeowNaa4WISwweINtCeXXE-hSBqBNWjCH3iOlbphLVg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/289", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192996"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "teE2UcKarZdu5qS_x0d3a_mxyMhnWu5J_2W1T918FGg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/299", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192996"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UC6xMTVtpeF_nPO7Fl_Z9Ki3RlAdPtt-lQZybI9nQu4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/297", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192997"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xTUxDbeqc8BuDeZHWlHJ-KnO30hQf6nbrQMMdEd60V4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/298", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192997"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "xTUxDbeqc8BuDeZHWlHJ-KnO30hQf6nbrQMMdEd60V4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/296", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192998"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CCHZWhZdhdo9RJQsX0izsxb8XQxARXW9IxLmgNFOJ6c="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/294", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192998"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CCHZWhZdhdo9RJQsX0izsxb8XQxARXW9IxLmgNFOJ6c="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/295", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192999"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WIoxQjPMawJiJF33VWS2hcwGn9baYsKk8324AiuzAq0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/305", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464192999"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "v9fiQYNQ4pAF7LJ84lrqxzaJyGPKFXSPpukt4BFW6hs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/303", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193000"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "d2bTj3n7YasQA3V6bnAR477XgAz7ENnze4XH2_sf1uE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/304", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193001"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ux-_cH4aqfLF77JYXi-m6oOR4MDlXaX2cJc9mx90GaY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/302", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193001"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Ux-_cH4aqfLF77JYXi-m6oOR4MDlXaX2cJc9mx90GaY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/300", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193002"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5Ij7WuO6S5Qqi22P413hCZ1n_LPYCJ_Uj_kChzZhfKs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/301", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193002"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "5Ij7WuO6S5Qqi22P413hCZ1n_LPYCJ_Uj_kChzZhfKs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/311", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193003"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oOt2EfokxEBT1jYKhWygS14u8fqAEDPPjEr92t0fmV8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/309", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193004"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6JJXRoTkzAgInBBdUPhKCbNy2_3VkPTxGWCj9xOYJqU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/310", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193004"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6JJXRoTkzAgInBBdUPhKCbNy2_3VkPTxGWCj9xOYJqU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/308", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193005"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "8VuZnMnJDUy_W21ROwcnOopP_abGsE3TyZ7xhSVUzaQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/306", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193006"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A_HQfQOwUi3ro7s09JaTcSOVnt2Vbw93bNJLqk6k4cs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/307", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193006"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "A_HQfQOwUi3ro7s09JaTcSOVnt2Vbw93bNJLqk6k4cs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/317", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193007"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J9pkG5ufj7oKjVY_aNNi-4na_zmsICFSIAgJ9HCJb2w="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/315", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193007"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "J9pkG5ufj7oKjVY_aNNi-4na_zmsICFSIAgJ9HCJb2w="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/316", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193008"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RW1CIJSylKzXHXTfHNZf8iC_FpZga8lJH2iVwSqYi1o="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/314", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193008"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "RW1CIJSylKzXHXTfHNZf8iC_FpZga8lJH2iVwSqYi1o="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/312", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193009"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wn7iYrSG8axBvuufVYJZTnaDY2n45XqAtdF8oBFHCn8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/313", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193009"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wn7iYrSG8axBvuufVYJZTnaDY2n45XqAtdF8oBFHCn8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/323", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193010"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ccaGBh-7qsiFXlPokmdZ_X1co-aKD9YvGueOmXuqMvQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/321", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193010"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ccaGBh-7qsiFXlPokmdZ_X1co-aKD9YvGueOmXuqMvQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/322", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193011"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QqokRbf5H2qR3IwAZDIVaikUk53jJAbUN03ZJuqIetg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/320", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193011"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "QqokRbf5H2qR3IwAZDIVaikUk53jJAbUN03ZJuqIetg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/318", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193012"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rHi5-iO7272_GNA7ufn9uIRXkI9mfhYh52VG02u1swU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/319", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193012"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "rHi5-iO7272_GNA7ufn9uIRXkI9mfhYh52VG02u1swU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/221", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193013"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YYW7NI5nm1qyBREA6oUPP-mobjSc053UQg6P3-Peq1s="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/219", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193013"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "YYW7NI5nm1qyBREA6oUPP-mobjSc053UQg6P3-Peq1s="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/220", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193014"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uoVOfiajeB2-QJNd_hOrDfG6ZmYb-Fv6L04_M-eo3Ac="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/218", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193014"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uoVOfiajeB2-QJNd_hOrDfG6ZmYb-Fv6L04_M-eo3Ac="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/216", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193015"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "a-Hkz5Musbj2wR7D2nPuxHZPGJdEViQWtN8YW0073BA="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/217", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193016"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "KECHqeymNKQkpdPh_j9jaDVqRy4X5yCDgw2ea4VBI2M="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/227", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193016"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FPLfRgmRoA92JzBDEbeUaN_ediYZcve2x8pl5jVAih8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/225", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193017"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-Edsq0TnsAF3_D7RUb1zPW2xDFznjUmsOJq7hQNxmpE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/226", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193017"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-Edsq0TnsAF3_D7RUb1zPW2xDFznjUmsOJq7hQNxmpE="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/224", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193018"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1eLJSMjCP1uKLVeKQJwd6Z6a02UncILwQi04N3eR-lk="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/222", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193018"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1eLJSMjCP1uKLVeKQJwd6Z6a02UncILwQi04N3eR-lk="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/223", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193019"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "BTYnMWlQnuc2qP5zuIFnJ4dZ3Ol4TvG5nWLP9ZXM3AQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/233", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193020"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fQ0Xb8n1VUJAPg6KvRmQ1SueH831zNZIspzs22S6SmY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/231", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193020"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fQ0Xb8n1VUJAPg6KvRmQ1SueH831zNZIspzs22S6SmY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/232", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193021"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PSofxOADrUbqTWyVRxuNdkH3GOmnFHtZcH1w2WnkhGM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/230", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193021"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PSofxOADrUbqTWyVRxuNdkH3GOmnFHtZcH1w2WnkhGM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/228", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193022"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H97ycOWbfavj5rpab-77Ci3G7VvF_z0VM9walyjCO1s="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/229", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193022"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "H97ycOWbfavj5rpab-77Ci3G7VvF_z0VM9walyjCO1s="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/239", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193023"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FXJOQKZkMUbnPJ1ulqb1w83b1VLSqvGbZx38EE9nDvI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/237", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193023"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FXJOQKZkMUbnPJ1ulqb1w83b1VLSqvGbZx38EE9nDvI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/238", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193024"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VwWgQmWOYEE4_lm-elImLcZqHXrVOF6K4HIJpGKAOMU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/236", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193024"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "VwWgQmWOYEE4_lm-elImLcZqHXrVOF6K4HIJpGKAOMU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/234", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193025"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FmT11RN0gpXqiLHBcaIHrJN_75RgGyyq6gRjKWgV5RM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/235", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193025"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "FmT11RN0gpXqiLHBcaIHrJN_75RgGyyq6gRjKWgV5RM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/245", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193026"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "iRIqyeK8Hhs_LYg5V3nYd5bpwoLZy1xu2IHfl0n3ugs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/243", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193027"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ItKdCIDCMvBuDLWFntCvrI1qAP9uzXfBz550HsiqaOc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/244", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193027"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ItKdCIDCMvBuDLWFntCvrI1qAP9uzXfBz550HsiqaOc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/242", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193028"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x0M1v7VS5bJubVWdqng0wQ-shdd0scSzajcqd-4Ei4M="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/240", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193028"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "x0M1v7VS5bJubVWdqng0wQ-shdd0scSzajcqd-4Ei4M="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/241", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193029"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vXULCO0quluwApAJS_L5P-XIOkS_wTyraXcIl_HG1kw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/251", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193030"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TjEfBSeHCJ323gD27K-3ahb-0lan3PqQLrixKqusWGg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/249", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193030"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TjEfBSeHCJ323gD27K-3ahb-0lan3PqQLrixKqusWGg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/250", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193031"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pFZ2h4JaFfi-C5ky0Y65P_3iR8fzMVrpxHtowljMgQw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/248", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193031"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pFZ2h4JaFfi-C5ky0Y65P_3iR8fzMVrpxHtowljMgQw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/246", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193032"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6_jMxWduFV0M7fkW6CxvTINo8LULuXIeO7BreLUrtbU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__false___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/247", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193032"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "6_jMxWduFV0M7fkW6CxvTINo8LULuXIeO7BreLUrtbU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, manage: false, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/257", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193033"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ANEmLcQiaoXexIGOvK0mtBxr-Lvi0glhziyAD3eIYq4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/255", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193033"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ANEmLcQiaoXexIGOvK0mtBxr-Lvi0glhziyAD3eIYq4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/256", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193034"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "Rg69q8hMuBPiiVgCzYvVtePCyDaAkPDnQy1yMAOZiS0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/254", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193035"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dIh93CIZWiQZJRoyhZT4NCS0twHD01eNyPwwWrHxWxY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/252", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193035"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dIh93CIZWiQZJRoyhZT4NCS0twHD01eNyPwwWrHxWxY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/253", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193036"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "zrAUt35PF2iEou4Hs9CecUc8YW6-OfCUvVH4UoDxTV4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/263", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193036"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "uRFkbvLRYh6QdgivJOaVWfZkdPKp9XSTQEmEMMcLpjU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/261", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193037"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T9DjM6KGGNYKg-3VYdJ6MphsEWp_a5ccqkGdL1dHWDM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/262", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193037"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "T9DjM6KGGNYKg-3VYdJ6MphsEWp_a5ccqkGdL1dHWDM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/260", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193038"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CwWR7t8fceJXOEebrD3Xu_afR6TnfYuXbwnnyj2n-JY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/258", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193038"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CwWR7t8fceJXOEebrD3Xu_afR6TnfYuXbwnnyj2n-JY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/259", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193039"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K3VLwuPXgQvvTP8nSgpUT8oYpSt4w-r1aRqVVIP_ri0="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/269", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193039"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "COwDng3RFtV0epqe5k7LV4QAGpeTk9Ri7yH_MtoCo2c="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/267", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193040"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wMTdwVVoG75vzKseZa7Wt4gqkbAbOElA9cPC_esbhrU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/268", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193040"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wMTdwVVoG75vzKseZa7Wt4gqkbAbOElA9cPC_esbhrU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/266", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193041"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-lqMs_kHD_cl4xkK4i8CvrklxvEGVAVn2NSPfORIcaw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/264", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193042"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SEt5mNMkdIB7WSqAjttd_ATdqV64LWRsuB8J7iG4PTk="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/265", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193042"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SEt5mNMkdIB7WSqAjttd_ATdqV64LWRsuB8J7iG4PTk="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/275", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193043"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ptP49wGBAPOzb68beaG7txY-W6QxgTGWbET8S8CsQvI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/273", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193043"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "ptP49wGBAPOzb68beaG7txY-W6QxgTGWbET8S8CsQvI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/274", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193044"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WJGwdW_4Vb_jirGwWP4Ji3h0eEccEPZZmzeGQJRsVmU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/272", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193044"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "WJGwdW_4Vb_jirGwWP4Ji3h0eEccEPZZmzeGQJRsVmU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/270", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193045"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oCse8UTCPZkIkoz3NihE8ySu7zAXyrX5jeS5Pw3azSs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/271", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193045"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "oCse8UTCPZkIkoz3NihE8ySu7zAXyrX5jeS5Pw3azSs="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/281", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193048"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "_qtRLm17edRBTnQguzZWgLD052bp9ggNFiVuiHDo1k8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/279", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193049"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1f_Gs6iPSgKsTtUBniNtcBRt_T3XNU8LRw4dMCHJfEc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/280", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193049"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "1f_Gs6iPSgKsTtUBniNtcBRt_T3XNU8LRw4dMCHJfEc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/278", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193050"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eJHTKODMF5-QaeClgnZXQjJfUM7wjKg0CON9GNa8Vfg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/276", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193050"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "eJHTKODMF5-QaeClgnZXQjJfUM7wjKg0CON9GNa8Vfg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/277", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193051"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "O_G-KNzZX_OUM7N0S7vwqaSyET_ODaU8m1NEq7tF23k="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/287", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193051"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "-rBEIHdwVb7ONaniW6PmDPqTaaJxb2mkpSC_FE9g4Kc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/285", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193052"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "UvMsvaXaaYOasRobildhzbIT5xpa6ngkM2u_DPrJaxQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/286", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193053"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "spM1O03Ui5jbNj8AskvgwXLTd8nawLI2e851BJHynOI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/284", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193053"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "spM1O03Ui5jbNj8AskvgwXLTd8nawLI2e851BJHynOI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/282", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193054"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qrkevxW-ILthByKcepjO8PyqbMcatZVLoiAluYJjK-A="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__true___manage__nil___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/283", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193054"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "qrkevxW-ILthByKcepjO8PyqbMcatZVLoiAluYJjK-A="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 0, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/77", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193055"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TI63Sz261TPnXk4Uy_Fif33pTTqRG_ucSVlV9fidubc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/75", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193055"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TI63Sz261TPnXk4Uy_Fif33pTTqRG_ucSVlV9fidubc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/76", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193056"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "prJOjmB5fLDcD4SJaVfpco8ahxkzg_lZV2yIu5Jqd6Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/74", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193056"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "prJOjmB5fLDcD4SJaVfpco8ahxkzg_lZV2yIu5Jqd6Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/72", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193057"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "izVvn97G4tbYwSKsGhDXSeGhB_sWYnxjobV6A_9RznI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/73", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193058"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "pofDsu_17BjemTCe-nNlbsjzYSyWcjZtdBrQ4ou7Leg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/83", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193058"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4N4Rpq_g07cPE1BXzvbtufTysvUYOcz0oVhcaBgOhwg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/81", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193059"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h98w-uqk45j2p4Q7cWogkUWz8RQVhxTxOnyLSvUAjWc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/82", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193059"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "h98w-uqk45j2p4Q7cWogkUWz8RQVhxTxOnyLSvUAjWc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/80", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193060"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4MZD5E57DjV-W2yCnlJ6VT_gccVdm9H3fUXGV1AMzU4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/78", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193060"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "4MZD5E57DjV-W2yCnlJ6VT_gccVdm9H3fUXGV1AMzU4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/79", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193061"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "sM8zherB12omFTmCSCrA3gidDtYPvUXJ8tVhhtKeq8Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/89", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193062"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NOl-e-aWU55t5eWkcANo6dozPC-ZXpmc7mL1SXvrWoo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/87", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193062"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "NOl-e-aWU55t5eWkcANo6dozPC-ZXpmc7mL1SXvrWoo="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/88", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193063"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XT2cvM2oiFcNvFOvrPHDk0G9eBsLIeEvL8nJgqmMO_8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/86", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193063"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "XT2cvM2oiFcNvFOvrPHDk0G9eBsLIeEvL8nJgqmMO_8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/84", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193064"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yJEhUlvf_RnDafQsw51zqPvUeO1F08J-7T8IeQO5F1A="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/85", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193064"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "yJEhUlvf_RnDafQsw51zqPvUeO1F08J-7T8IeQO5F1A="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/95", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193065"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LBfCHgKJwNVL2xRsLAo2vbXcBMEvlLxdHbwHIhR36zQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/93", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193065"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "LBfCHgKJwNVL2xRsLAo2vbXcBMEvlLxdHbwHIhR36zQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/94", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193066"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vHCoskaNk7m_zXg7cbq3zTkKlBtk9oFSvSV9lMJSnkM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/92", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193067"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wQMS501UBJBDTeenyweztaZB9yjHsHY3c8sga3pOlOc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/90", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193067"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "wQMS501UBJBDTeenyweztaZB9yjHsHY3c8sga3pOlOc="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__300___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/91", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193068"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n4cQUQWraP8WarB6gTRJc8aW610hp1FGp4_Yrmp7WcU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, ttl: 300, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/101", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193068"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "CJoppA7a7_4LSyLWXWJyVYI84ZwNWTGTtpW2rFzYJRg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/99", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193069"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "i3LMIileMZnh873XFyg9xcRukKWpLDV6SXqfItlIQZU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/100", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193069"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "i3LMIileMZnh873XFyg9xcRukKWpLDV6SXqfItlIQZU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/98", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193070"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "taHXUggD9yGsuPxKFG6Tv5p6ysyyQ3AbcB4EklciYaQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/96", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193071"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knDdeLuVmTbLw0Uhg-3dSDr9rMyuo7j6Q9FBgnrpd9Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/97", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193071"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "knDdeLuVmTbLw0Uhg-3dSDr9rMyuo7j6Q9FBgnrpd9Y="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/107", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193072"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PxR_PlOou4SnTG0JQMKGHSmgCnXPaG7RFy4R0OqV6tU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/105", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193072"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "PxR_PlOou4SnTG0JQMKGHSmgCnXPaG7RFy4R0OqV6tU="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/106", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193073"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fl3qy-MD1gsL1e_qR0A1838OmvWf0D7oHBC8Janvw4g="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/104", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193073"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "fl3qy-MD1gsL1e_qR0A1838OmvWf0D7oHBC8Janvw4g="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/102", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193074"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "TTK3eXcljhFJrLOsq1kCeGmbdR3zunhKwa8fxhgGSVg="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__true___ttl__nil___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/103", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193075"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "7DN5lwioZt3lZTtBX-v5nIaH8CVFVnglyMU5xzzEup8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: true, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 1440, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/5", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193075"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "mWFJ4wKvmF2fSeugBjYLYDdZwcp_uWm53ui9pkP-BWM="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/3", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193076"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SckSX81KWe12lCQqAm1To9Ccn56hRRKKEFr28K8sX3A="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/4", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193076"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "SckSX81KWe12lCQqAm1To9Ccn56hRRKKEFr28K8sX3A="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/2", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193077"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n3Rz1Q5YklmGfkc47xvSp6RvxfnPPYswEBWVG5A7hTA="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/0", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193077"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "n3Rz1Q5YklmGfkc47xvSp6RvxfnPPYswEBWVG5A7hTA="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/1", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193078"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "R0PGhp4gvWP5zEeSovlqMvNb6RwfhxAplqBFxaztLPI="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/11", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193079"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "f8gYhdqR4wB04CcPOwHIOhjjR_iNzKaT8Y8HAL7tW_8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/9", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193079"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "f8gYhdqR4wB04CcPOwHIOhjjR_iNzKaT8Y8HAL7tW_8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/10", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193080"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MJRH7plQm2_qF0v7ebGJSVTTPHJ0Y-qxFXDOo-x-WDY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/8", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193080"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "MJRH7plQm2_qF0v7ebGJSVTTPHJ0Y-qxFXDOo-x-WDY="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/6", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193081"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vJ8ruJVSWMV9T8llLXPXdpMXeGmX5zTX3Uv90rxeq60="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__0___auth_key__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/7", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193081"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "vJ8ruJVSWMV9T8llLXPXdpMXeGmX5zTX3Uv90rxeq60="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 0, http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 0, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/17", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193082"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "HgRI08kXivvBpUhD0T-yEUyODVALIP39JeizSLDyoB8="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/revoke/15", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193083"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jbKwAeIkL9S-WI72eLg9BkAd3RGycd-mSF7a5Hq0C1Q="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, &@callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/revoke/16", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193083"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "jbKwAeIkL9S-WI72eLg9BkAd3RGycd-mSF7a5Hq0C1Q="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: true, callback: @callback)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/revoke/14", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193084"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K5-lupsTt8l94fpEkirXX1eYyaErk6i5-3Ymf7YZtw4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/revoke/12", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193084"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "K5-lupsTt8l94fpEkirXX1eYyaErk6i5-3Ymf7YZtw4="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, &@callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key___ruby-authkey____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/revoke/13", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193085"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "AGKCScXlui7B12X6HX3cbUdqVdxD6k8Z8xJCWQ2qYFQ="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, auth_key: "ruby-authkey", http_sync: false, callback: @callback)
      envelope = envelope.value
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "user", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channel" => "demo", "auths" => {"ruby-authkey" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end

  it "__channel___demo____group__nil___read__false___write__false___manage__false___ttl__300___auth_key__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/revoke/23", record: :none) do
      Pubnub::Revoke.any_instance.stub(:current_time).and_return "1464193085"
      Pubnub::Revoke.any_instance.stub(:signature).and_return "dZy43whctt7oOB5m9E9N3WjadHqrn7mlxTzEGM5M1Lw="
      envelope = @pubnub.revoke(channel: "demo", read: false, write: false, manage: false, ttl: 300, http_sync: true)
      expect(envelope.is_a?(Pubnub::Envelope)).to eq true
      expect(envelope.error?).to eq false

      expect(envelope.status[:code]).to eq(200)
      expect(envelope.status[:category]).to eq(:ack)
      expect(envelope.status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelope.result[:code]).to eq(200)
      expect(envelope.result[:operation]).to eq(:revoke)
      expect(envelope.result[:data]).to eq({"level" => "channel", "subscribe_key" => "sub-a-mock-key", "ttl" => 300, "channels" => {"demo" => {"r" => 1, "w" => 1, "m" => 0}}})
    end
  end
end
