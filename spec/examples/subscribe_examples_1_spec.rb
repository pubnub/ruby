require "spec_helper"

describe Pubnub::Subscribe do

  let(:pubnub_params) do
    {
      publish_key: "pub-a-mock-key",
      subscribe_key: "sub-a-mock-key",
      user_id: "ruby-test-uuid-client-one",
      auth_key: "ruby-test-auth-client-one",
      max_retries: 2,
      reconnect_interval: 0
    }
  end

  let(:pubnub_cipher_params) do
    pubnub_params.merge({cipher_key: "super-secret-cipher-key", random_iv: false})
  end

  let(:pubnub) { Pubnub.new(**pubnub_params) }
  around :each do |example|
    @fired = false

    @callback = -> (_envelope) do
      @fired = true
    end

    example.run_with_retry retry: 10
  end

  it "__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/226", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 1, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001190542500", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001191474214", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[0].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001191474214", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 1, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001190542500", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001191474214", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[1].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001191474214", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 3, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001191756650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001192088353", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[2].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001192088353", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 3, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001191756650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001192088353", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[3].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001192088353", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400119, "uuid" => "ruby-test-uuid-client-one", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001197078636", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[4].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400119, "uuid" => "ruby-test-uuid-client-one", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001197078636", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-one", :timestamp => 1465400119, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400119, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001199512992", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[5].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400119, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001199512992", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400119, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001204237539", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654001205115313)
      expect(envelopes[6].status[:last_timetoken]).to eq(14653998788230215)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400120, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001204237539", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400120, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/222", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 5, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001222686012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001223019766", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001233778443)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001205115313)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001223019766", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 5, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001222686012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001223019766", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001233778443)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001205115313)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001223019766", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 7, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001223294790", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001223624852", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001233778443)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001205115313)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001223624852", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 7, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001223294790", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001223624852", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001233778443)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001205115313)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001223624852", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400123, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001232208777", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001233778443)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001205115313)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400123, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001232208777", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400123, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/224", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 9, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001254851170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001255180181", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001268949943)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001233778443)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001255180181", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 9, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001254851170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001255180181", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001268949943)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001233778443)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001255180181", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 11, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001255461550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001255780885", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001268949943)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001233778443)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001255780885", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 11, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001255461550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001255780885", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001268949943)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001233778443)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001255780885", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400126, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001268081911", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001268949943)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001233778443)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400126, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001268081911", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400126, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/220", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 13, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001286945018", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001287268475", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001301002950)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001268949943)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001287268475", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 13, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001286945018", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001287268475", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001301002950)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001268949943)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001287268475", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 15, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001287570838", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001287892588", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001301002950)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001268949943)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001287892588", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 15, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001287570838", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001287892588", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001301002950)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001268949943)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001287892588", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400129, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001293633096", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001301002950)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001268949943)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400129, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001293633096", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400129, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400130, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001300165034", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001301002950)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001268949943)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400130, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001300165034", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400130, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/216", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 17, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001319124430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001319442645", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001333822137)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001301002950)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001319442645", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 17, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001319124430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001319442645", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001333822137)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001301002950)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001319442645", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 19, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001319726300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001320048093", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001333822137)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001301002950)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001320048093", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 19, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001319726300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001320048093", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001333822137)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001301002950)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001320048093", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400132, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001326142867", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001333822137)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001301002950)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400132, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001326142867", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400132, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400133, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001332344536", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001333822137)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001301002950)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400133, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001332344536", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400133, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/218", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 21, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001351317460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001351637859", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001358990861)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001333822137)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001351637859", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 21, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001351317460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001351637859", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001358990861)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001333822137)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001351637859", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 23, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001351939818", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001352263357", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001358990861)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001333822137)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001352263357", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 23, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001351939818", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001352263357", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001358990861)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001333822137)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001352263357", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400135, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001356603751", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001358990861)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001333822137)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400135, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001356603751", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400135, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/232", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 25, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001383457100", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001383775393", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001396079218)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001358990861)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001383775393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400139, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001395009455", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001396079218)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001358990861)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400139, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001395009455", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400139, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/228", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 27, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001416988148", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001417310265", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001428988608)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001396079218)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001417310265", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400142, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001423812365", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001428988608)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001396079218)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400142, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001423812365", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400142, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400142, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001428464580", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001428988608)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001396079218)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400142, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001428464580", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400142, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/230", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 29, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001449119670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001449438049", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001461073709)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001428988608)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001449438049", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400145, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001455035084", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001461073709)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001428988608)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400145, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001455035084", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400145, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400146, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001460610279", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001461073709)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001428988608)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400146, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001460610279", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400146, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/208", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 31, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001481248168", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001481572362", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001493794312)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001449443038)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001481572362", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 31, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001481248168", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001481572362", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001493794312)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001449443038)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001481572362", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 33, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001481848042", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001482163661", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001493794312)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001449443038)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001482163661", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 33, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001481848042", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001482163661", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001493794312)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001449443038)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001482163661", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400148, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001489007895", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001493794312)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001449443038)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400148, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001489007895", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400148, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400149, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001493312243", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001493794312)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001449443038)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400149, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001493312243", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400149, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/204", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 35, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001513434792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001513759183", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001528524072)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001493794312)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001513759183", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 35, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001513434792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001513759183", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001528524072)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001493794312)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001513759183", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 37, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001514041012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001514366041", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001528524072)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001493794312)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001514366041", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 37, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001514041012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001514366041", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001528524072)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001493794312)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001514366041", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400152, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001524061616", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001528524072)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001493794312)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400152, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001524061616", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400152, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400152, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001526555026", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001528524072)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001493794312)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400152, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001526555026", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400152, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/206", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 39, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001545628622", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001545949979", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001545949979", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 39, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001545628622", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001545949979", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001545949979", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 41, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001546224110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001546554790", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001546554790", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 41, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001546224110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001546554790", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001546554790", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400155, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001551805146", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400155, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001551805146", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400155, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400155, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001558781308", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400155, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001558781308", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400155, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400155, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001558846878", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654001560175487)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654001528524072)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400155, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001558846878", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400155, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/202", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 43, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001582713680", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001583031743", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001596599290)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001581318663)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001583031743", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 45, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001583313570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001583634957", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001596599290)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001581318663)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001583634957", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400159, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001595845765", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001596599290)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001581318663)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400159, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001595845765", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400159, :state => nil, :occupancy => 0}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 43, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001582713680", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001583031743", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001596599290)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001581318663)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001583031743", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 45, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001583313570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001583634957", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001596599290)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001581318663)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001583634957", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/198", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 47, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001615137160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001615461168", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001627626116)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001596599290)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001615461168", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 47, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001615137160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001615461168", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001627626116)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001596599290)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001615461168", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 49, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001615738890", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001616061670", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001627626116)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001596599290)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001616061670", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 49, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001615738890", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001616061670", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001627626116)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001596599290)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001616061670", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400161, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001619985847", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001627626116)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001596599290)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400161, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001619985847", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400161, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400162, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001627239499", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001627626116)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001596599290)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400162, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001627239499", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400162, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/200", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 51, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001647491560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001647813111", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001647813111", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 51, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001647491560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001647813111", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001647813111", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 53, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001648092280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001648414217", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001648414217", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 53, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001648092280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001648414217", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001648414217", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400165, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001654399530", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400165, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001654399530", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400165, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400165, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001659558360", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400165, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001659558360", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400165, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400166, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001660243847", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654001661158464)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654001627626116)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400166, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001660243847", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400166, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/214", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 55, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001679865260", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001680187182", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001691759089)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001678508744)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001680187182", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400169, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001691363857", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001691759089)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001678508744)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400169, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001691363857", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400169, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/210", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 57, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001712184992", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001712505130", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001725551947)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001691759089)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001712505130", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400171, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001716009938", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001725551947)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001691759089)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400171, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001716009938", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400171, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400172, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001724775074", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001725551947)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001691759089)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400172, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001724775074", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400172, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/212", record: :none) do
      pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 59, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001744535920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001744858223", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001758549914)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001725551947)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001744858223", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400175, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001751902106", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001758549914)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001725551947)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400175, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001751902106", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400175, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400175, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001757095054", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001758549914)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001725551947)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400175, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654001757095054", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400175, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/244", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 61, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001776874040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001777194291", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001789929019)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001775510359)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001777194291", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 63, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001777466480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001777783403", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001789929019)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001775510359)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001777783403", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400178, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001788994250", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001789929019)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001775510359)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400178, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001788994250", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400178, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 61, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001776874040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001777194291", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001789929019)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001775510359)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001777194291", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 63, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001777466480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001777783403", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001789929019)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001775510359)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001777783403", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/240", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 65, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001810550232", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001810869150", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001824563958)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001789929019)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001810869150", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 65, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001810550232", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001810869150", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001824563958)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001789929019)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001810869150", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 67, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001811160400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001811481585", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001824563958)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001789929019)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001811481585", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 67, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001811160400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001811481585", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001824563958)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001789929019)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001811481585", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400181, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001817075592", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001824563958)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001789929019)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400181, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001817075592", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400181, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400182, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001823787047", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001824563958)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001789929019)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400182, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001823787047", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400182, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/242", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 69, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001843456928", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001843783083", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001852770873)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001824563958)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001843783083", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 69, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001843456928", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001843783083", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001852770873)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001824563958)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001843783083", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 71, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001844066648", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001844383376", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001852770873)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001824563958)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001844383376", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 71, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001844066648", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001844383376", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001852770873)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001824563958)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001844383376", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400185, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001851342588", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001852770873)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001824563958)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400185, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001851342588", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400185, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/238", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 73, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001875823988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001876147104", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001888307575)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001852770873)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001876147104", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 73, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001875823988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001876147104", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001888307575)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001852770873)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001876147104", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 75, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001876437140", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001876763834", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001888307575)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001852770873)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001876763834", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 75, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001876437140", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001876763834", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001888307575)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001852770873)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001876763834", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400188, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001887913276", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001888307575)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001852770873)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400188, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001887913276", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400188, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/234", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 77, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001908280650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001908601721", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001922259584)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001888307575)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001908601721", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 77, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001908280650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001908601721", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001922259584)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001888307575)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001908601721", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 79, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001908895428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001909218801", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001922259584)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001888307575)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001909218801", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 79, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001908895428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001909218801", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001922259584)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001888307575)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001909218801", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400191, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001913076305", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001922259584)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001888307575)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400191, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001913076305", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400191, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400192, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001921551792", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654001922259584)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654001888307575)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400192, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001921551792", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400192, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/236", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 81, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001940725792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001941042920", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001947218048)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001922259584)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001941042920", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 81, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001940725792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001941042920", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001947218048)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001922259584)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001941042920", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 83, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001941336030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001941654771", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654001947218048)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001922259584)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001941654771", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 83, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001941336030", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001941654771", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654001947218048)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654001922259584)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001941654771", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400194, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001946464360", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654001947218048)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654001922259584)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400194, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001946464360", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400194, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/250", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 85, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654001973120050", :region_code => nil}, :publish_timetoken => {:timetoken => "14654001973439599", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654001984991760)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001971749625)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654001973439599", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400198, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654001984601076", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654001984991760)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001971749625)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400198, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654001984601076", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400198, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/246", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 87, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002005486400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002005806447", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002018913697)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654001984991760)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002005806447", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400201, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002013495670", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002018913697)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654001984991760)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400201, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002013495670", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400201, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400201, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002018136887", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002018913697)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654001984991760)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400201, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002018136887", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400201, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/248", record: :none) do
      pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 89, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002037880160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002038205512", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002042688184)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002018913697)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002038205512", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400204, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002042302073", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002042688184)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002018913697)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400204, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002042302073", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400204, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/190", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 91, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002070348712", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002070673691", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002070673691", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 91, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002070348712", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002070673691", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002070673691", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 93, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002070966552", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002071288060", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002071288060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 93, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002070966552", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002071288060", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002071288060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400207, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002078047164", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400207, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002078047164", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400207, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400207, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002078637616", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400207, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002078637616", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400207, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400207, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002078870925", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400207, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002078870925", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400207, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002083464140", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002083464140", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400208, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002083687893", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002083687893", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400208, :state => nil, :occupancy => 0}})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002086288787", :region_code => 2}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:presence)
      expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400208, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002086288787", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400208, :state => nil, :occupancy => 0}})

      expect(envelopes[10].status[:code]).to eq(200)
      expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400209, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002091133364", :region_code => 1}})
      expect(envelopes[10].status[:category]).to eq(:ack)
      expect(envelopes[10].status[:auto_retried]).to eq(true)
      expect(envelopes[10].status[:current_timetoken]).to eq(14654002093235999)
      expect(envelopes[10].status[:last_timetoken]).to eq(14654002038292026)
      expect(envelopes[10].status[:subscribed_channels]).to eq([])
      expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[10].result[:code]).to eq(200)
      expect(envelopes[10].result[:operation]).to eq(:presence)
      expect(envelopes[10].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400209, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002091133364", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400209, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/186", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 95, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002102848800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002103168155", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002103168155", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 95, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002102848800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002103168155", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002103168155", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 97, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002103450460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002103773891", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002103773891", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 97, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002103450460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002103773891", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002103773891", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400210, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002109416058", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400210, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002109416058", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400210, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400211, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002110264139", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400211, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002110264139", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400211, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400211, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002116329532", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400211, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002116329532", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400211, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400211, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002116796379", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654002117569264)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654002093235999)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400211, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002116796379", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400211, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/188", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 99, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002135451742", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002135771831", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002135771831", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 99, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002135451742", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002135771831", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002135771831", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 101, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002136054380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002136573589", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002136573589", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 101, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002136054380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002136573589", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002136573589", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400214, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002147770752", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400214, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002147770752", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400214, :state => nil, :occupancy => 0}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002150856603", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002150856603", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400215, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002155681749", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400215, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002155681749", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400215, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400216, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002164228736", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654002164906267)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654002117569264)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400216, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002164228736", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400216, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/184", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 103, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002167833460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002168154272", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002168154272", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 103, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002167833460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002168154272", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002168154272", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 105, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002168440408", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002168766077", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002168766077", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 105, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002168440408", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002168766077", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002168766077", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400217, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002174580283", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400217, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002174580283", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400217, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400217, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002175212078", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400217, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002175212078", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400217, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400218, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002181159076", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654002181546944)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654002164906267)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400218, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002181159076", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400218, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/180", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 107, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002200433778", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002200783102", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002200783102", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 107, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002200433778", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002200783102", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002200783102", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 109, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002201063490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002201388070", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002201388070", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 109, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002201063490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002201388070", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002201388070", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400220, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002209501220", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400220, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002209501220", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400220, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002213689127", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002213689127", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400221, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002215203727", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002215203727", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400221, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002217633659", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400221, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002217633659", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400221, :state => nil, :occupancy => 0}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400222, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002220611850", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654002222644789)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654002181546944)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400222, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002220611850", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400222, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/182", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 111, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002234062610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002234383172", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002234383172", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 111, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002234062610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002234383172", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002234383172", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 113, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002234660812", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002234978803", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002234978803", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 113, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002234660812", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002234978803", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002234978803", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400223, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002239060994", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400223, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002239060994", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400223, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400223, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002239718796", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400223, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002239718796", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400223, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400224, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002246236320", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400224, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002246236320", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400224, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400225, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002250253255", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654002251241892)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654002222644789)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400225, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002250253255", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400225, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/196", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 115, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002266448340", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002266765925", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002287274160)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002251241892)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002266765925", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400227, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002271681302", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002287274160)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002251241892)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400227, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002271681302", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400227, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400227, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002272326697", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002287274160)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002251241892)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400227, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002272326697", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400227, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400227, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002279082951", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002287274160)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002251241892)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400227, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002279082951", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400227, :state => nil, :occupancy => 0}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002281715832", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002287274160)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002251241892)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002281715832", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400228, :state => nil, :occupancy => 0}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002286495714", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002287274160)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002251241892)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400228, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002286495714", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400228, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/192", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 117, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002298851662", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002299172163", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002312864945)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002287274160)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002299172163", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400230, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002307048606", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002312864945)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002287274160)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400230, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002307048606", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400230, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400230, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002307051582", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002312864945)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002287274160)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400230, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002307051582", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400230, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400230, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002307862991", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002312864945)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002287274160)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400230, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002307862991", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400230, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400231, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002312083835", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002312864945)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002287274160)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400231, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002312083835", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400231, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400231, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002312088004", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654002312864945)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002287274160)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400231, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002312088004", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400231, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/194", record: :none) do
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 119, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002331259200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002331584842", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002349857437)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002312864945)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002331584842", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002343785875", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002349857437)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002312864945)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654002343785875", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400234, :state => nil, :occupancy => 0}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002347479585", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002349857437)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002312864945)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002347479585", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400234, :state => nil, :occupancy => 0}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002348181280", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002349857437)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002312864945)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654002348181280", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400234, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002349470210", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654002349857437)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002312864945)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400234, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002349470210", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400234, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/262", record: :none) do
      pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 121, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002363645630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002363967684", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002364663995)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002331645945)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002363967684", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 121, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002363645630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002363967684", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002364663995)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002331645945)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002363967684", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 123, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002364251700", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002364582193", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002364663995)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002331645945)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002364582193", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 123, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002364251700", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002364582193", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002364663995)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002331645945)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002364582193", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/258", record: :none) do
      pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 125, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002396075270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002396399452", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002397098110)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002364663995)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002396399452", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 125, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002396075270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002396399452", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002397098110)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002364663995)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002396399452", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 127, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002396685670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002397010125", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002397098110)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002364663995)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002397010125", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 127, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002396685670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002397010125", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002397098110)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002364663995)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002397010125", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/260", record: :none) do
      pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 129, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002428423162", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002428742671", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002429438214)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002397098110)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002428742671", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 129, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002428423162", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002428742671", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002429438214)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002397098110)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002428742671", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 131, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002429025960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002429357288", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002429438214)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002397098110)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002429357288", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 131, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002429025960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002429357288", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002429438214)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002397098110)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002429357288", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/256", record: :none) do
      pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 133, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002460772160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002461088886", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002461737085)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002429438214)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002461088886", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 133, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002460772160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002461088886", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002461737085)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002429438214)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002461088886", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 135, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002461363508", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002461684260", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002461737085)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002429438214)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002461684260", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 135, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002461363508", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002461684260", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002461737085)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002429438214)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002461684260", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/252", record: :none) do
      pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 137, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002493209080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002493531377", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002494224014)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002461737085)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002493531377", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 137, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002493209080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002493531377", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002494224014)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002461737085)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002493531377", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 139, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002493819818", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002494141507", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002494224014)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002461737085)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002494141507", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 139, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002493819818", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002494141507", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002494224014)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002461737085)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002494141507", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/254", record: :none) do
      pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 141, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002525603102", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002525923985", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002526607699)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002494224014)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002525923985", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 141, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002525603102", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002525923985", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002526607699)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002494224014)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002525923985", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 143, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002526200780", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002526524328", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002526607699)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002494224014)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002526524328", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 143, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002526200780", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002526524328", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002526607699)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002494224014)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002526524328", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/268", record: :none) do
      pubnub.subscribe(channel: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 145, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002557984058", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002558315508", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002558369952)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002526607698)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002558315508", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/264", record: :none) do
      pubnub.subscribe(channel: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 147, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002590286870", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002590608473", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002590691728)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002558369952)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002590608473", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/266", record: :none) do
      pubnub.subscribe(channel: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 149, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002622886788", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002623214090", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002623299754)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002590691728)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002623214090", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo____presence__nil___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/136", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 151, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002655209952", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002655534697", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002674393029)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002623299754)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002655534697", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 153, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002655811420", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002656130143", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002674393029)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002623299754)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002656130143", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400266, "uuid" => "ruby-test-uuid-client-one", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002661816116", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002674393029)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002623299754)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400266, "uuid" => "ruby-test-uuid-client-one", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002661816116", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-one", :timestamp => 1465400266, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400267, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002673190739", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002674393029)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002623299754)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400267, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002673190739", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400267, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/132", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 155, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002688964832", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002689285085", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002702941828)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002674393029)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002689285085", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 157, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002689559490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002689885447", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002702941828)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002674393029)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002689885447", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400269, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002692991387", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002702941828)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002674393029)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400269, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002692991387", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400269, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400270, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002702187716", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002702941828)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002674393029)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400270, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002702187716", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400270, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/134", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 159, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002721449790", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002721792967", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002733965662)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002702941828)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002721792967", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 161, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002722068990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002722386419", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002733965662)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002702941828)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002722386419", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400272, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002728642467", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002733965662)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002702941828)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400272, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002728642467", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400272, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400273, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002733576420", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002733965662)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002702941828)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400273, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002733576420", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400273, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/130", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 163, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002754905478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002755231289", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002767429850)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002733965662)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002755231289", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 165, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002755512350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002755831959", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002767429850)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002733965662)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002755831959", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400276, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002762371886", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002767429850)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002733965662)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400276, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002762371886", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400276, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400276, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002767041545", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002767429850)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002733965662)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400276, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002767041545", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400276, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/126", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 167, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002787329678", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002787653330", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002801274476)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002767429850)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002787653330", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 169, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002787933240", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002788253778", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002801274476)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002767429850)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002788253778", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400279, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002792438837", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002801274476)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002767429850)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400279, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002792438837", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400279, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400280, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002800498437", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002801274476)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002767429850)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400280, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002800498437", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400280, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/128", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 171, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002819718348", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002820036337", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002829503745)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002801274476)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002820036337", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 173, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002820328598", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002820651009", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002829503745)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002801274476)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002820651009", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400282, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002828006000", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002829503745)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002801274476)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400282, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002828006000", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400282, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/142", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 175, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002851976068", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002852296096", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002866176318)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002829503745)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002852296096", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400286, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002864552771", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002866176318)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002829503745)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400286, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002864552771", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400286, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/138", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 177, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002884279750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002884600351", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002897693222)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002866176318)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002884600351", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400289, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002892294045", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002897693222)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002866176318)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400289, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002892294045", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400289, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400289, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002896915315", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002897693222)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002866176318)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400289, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002896915315", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400289, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/140", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 179, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002916641750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002916962451", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002931592338)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002897693222)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002916962451", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400292, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002924186794", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002931592338)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002897693222)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400292, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002924186794", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400292, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400293, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002930816939", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002931592338)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002897693222)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400293, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654002930816939", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400293, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo____channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/118", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 181, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002948994948", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002949317330", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002964249010)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002917045538)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002949317330", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 183, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002949600360", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002949922286", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002964249010)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002917045538)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002949922286", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400296, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002963478478", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002964249010)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002917045538)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400296, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002963478478", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400296, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400296, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002963478478", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002964249010)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002917045538)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400296, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002963478478", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400296, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/114", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 185, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002981381672", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002981700316", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654002993847139)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002964249010)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654002981700316", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 187, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654002981978948", :region_code => nil}, :publish_timetoken => {:timetoken => "14654002982302999", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654002993847139)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002964249010)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654002982302999", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400299, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002993460928", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654002993847139)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002964249010)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400299, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002993460928", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400299, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400299, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654002993460928", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654002993847139)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002964249010)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400299, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654002993460928", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400299, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/116", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 189, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003013745238", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003014066720", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003027732339)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654002993847139)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003014066720", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 191, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003014348270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003014676719", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003027732339)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654002993847139)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003014676719", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003020982767", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003027732339)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654002993847139)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003020982767", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400302, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003020982767", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003027732339)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654002993847139)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003020982767", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400302, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003026954340", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003027732339)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654002993847139)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003026954340", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400302, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003026954340", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003027732339)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654002993847139)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400302, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003026954340", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400302, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/112", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 193, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003046158888", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003046482237", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003051786743)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003027732339)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003046482237", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 195, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003046760052", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003047082882", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003051786743)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003027732339)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003047082882", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400305, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003051420776", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003051786743)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003027732339)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400305, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003051420776", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400305, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400305, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003051420776", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003051786743)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003027732339)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400305, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003051420776", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400305, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/108", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 197, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003078700480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003079020269", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003093686396)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003051786743)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003079020269", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 199, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003079309340", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003079627980", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003093686396)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003051786743)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003079627980", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400309, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003091870889", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003093686396)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003051786743)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400309, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003091870889", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400309, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400309, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003091870889", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003093686396)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003051786743)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400309, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003091870889", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400309, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/110", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 201, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003111019020", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003111338732", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003121243884)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003093686396)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003111338732", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 203, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003111600662", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003111917698", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003121243884)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003093686396)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003111917698", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400312, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003120852722", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003121243884)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003093686396)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400312, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003120852722", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400312, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400312, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003120852722", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003121243884)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003093686396)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400312, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003120852722", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400312, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/124", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 205, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003143368130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003143686281", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003157782581)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003121243884)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003143686281", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400315, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003156016618", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003157782581)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003121243884)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400315, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003156016618", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400315, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400315, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003156016618", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003157782581)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003121243884)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400315, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003156016618", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400315, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/120", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 207, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003175672920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003175992684", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003184530582)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003157782581)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003175992684", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400318, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003183603389", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003184530582)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003157782581)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400318, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003183603389", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400318, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400318, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003183603389", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003184530582)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003157782581)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400318, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003183603389", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400318, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence___demo______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/122", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 209, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003208017412", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003208338357", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003219967253)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003184530582)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003208338357", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400321, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003219579085", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003219967253)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003184530582)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400321, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003219579085", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400321, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400321, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003219579085", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003219967253)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003184530582)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400321, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003219579085", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400321, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: "demo.*", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/154", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 211, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003240376380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003240700534", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003254369036)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003219967252)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003240700534", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 213, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003240974750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003241305414", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003254369036)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003219967252)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003241305414", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400325, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003253595611", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003254369036)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003219967252)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400325, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003253595611", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400325, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/150", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 215, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003272755580", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003273078707", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003285337394)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003254369036)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003273078707", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 217, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003273357160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003273689107", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003285337394)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003254369036)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003273689107", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400327, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003278381132", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003285337394)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003254369036)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400327, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003278381132", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400327, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400328, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003284944538", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003285337394)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003254369036)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400328, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003284944538", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400328, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/152", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400331, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003316604574", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003321896851)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003308091539)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400331, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003316604574", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400331, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400332, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003321517904", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003321896851)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003308091539)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400332, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003321517904", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400332, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 219, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003309409600", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003309730444", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003321896851)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003308091539)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003309730444", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 221, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003310011430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003310337814", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003321896851)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003308091539)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003310337814", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/148", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 223, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003341586650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003341906677", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003355607992)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003321896851)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003341906677", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 225, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003342175942", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003342500416", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003355607992)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003321896851)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003342500416", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400335, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003350422422", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003355607992)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003321896851)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400335, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003350422422", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400335, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400335, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003354770911", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003355607992)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003321896851)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400335, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003354770911", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400335, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/144", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 227, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003373729070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003374046191", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003382898220)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003355607992)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003374046191", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 229, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003374325440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003374646872", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003382898220)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003355607992)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003374646872", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400338, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003382434378", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003382898220)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003355607992)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400338, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003382434378", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400338, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/146", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 231, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003411202970", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003411521418", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003425140678)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003382898220)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003411521418", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 233, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003411803288", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003412121954", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003425140678)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003382898220)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003412121954", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400342, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003424374899", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003425140678)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003382898220)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400342, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003424374899", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400342, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/160", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 235, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003443333278", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003443653704", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003455247920)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003425140678)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003443653704", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400344, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003446564523", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003455247920)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003425140678)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400344, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003446564523", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400344, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400345, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003454874998", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003455247920)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003425140678)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400345, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003454874998", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400345, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/156", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 237, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003475556360", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003475874359", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003487807910)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003455247920)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003475874359", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400348, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003483628387", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003487807910)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003455247920)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400348, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003483628387", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400348, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400348, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003487089617", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003487807910)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003455247920)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400348, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003487089617", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400348, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/158", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 239, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003507672000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003507997476", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003522219654)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003487807910)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003507997476", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400351, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003517073358", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003522219654)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003487807910)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400351, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003517073358", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400351, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400352, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003520324410", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003522219654)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003487807910)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400352, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654003520324410", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400352, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence___demo___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/100", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 241, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003539822422", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003540141246", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003540141246", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 243, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003540432000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003540751131", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003540751131", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400354, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003547058124", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400354, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003547058124", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400354, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400354, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003547081950", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400354, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003547081950", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400354, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400354, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003547081950", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400354, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003547081950", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400354, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003551960183", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003551960183", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400355, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003554941710", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003554941710", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400355, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003559631091", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003559631091", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400355, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003559631091", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654003560452755)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654003507965512)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400355, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003559631091", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400355, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/96", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 245, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003576705730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003577029908", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003577029908", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003583173029", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003583173029", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400358, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003596864384", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003596864384", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400359, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003597490028", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003597490028", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400359, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003583173029", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003583173029", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400358, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003596864384", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003596864384", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400359, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003597490028", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003597490028", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400359, :state => nil, :occupancy => 2}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003583193115", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003583193115", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400358, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003589035999", :region_code => 2}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003589035999", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400358, :state => nil, :occupancy => 0}})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003583816826", :region_code => 2}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:presence)
      expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400358, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003583816826", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400358, :state => nil, :occupancy => 1}})

      expect(envelopes[10].status[:code]).to eq(200)
      expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003592012725", :region_code => 2}})
      expect(envelopes[10].status[:category]).to eq(:ack)
      expect(envelopes[10].status[:auto_retried]).to eq(true)
      expect(envelopes[10].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[10].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[10].status[:subscribed_channels]).to eq([])
      expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[10].result[:code]).to eq(200)
      expect(envelopes[10].result[:operation]).to eq(:presence)
      expect(envelopes[10].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400359, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003592012725", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400359, :state => nil, :occupancy => 0}})

      expect(envelopes[11].status[:code]).to eq(200)
      expect(envelopes[11].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 247, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003577497480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003577815802", :region_code => 12}})
      expect(envelopes[11].status[:category]).to eq(:ack)
      expect(envelopes[11].status[:auto_retried]).to eq(true)
      expect(envelopes[11].status[:current_timetoken]).to eq(14654003598619043)
      expect(envelopes[11].status[:last_timetoken]).to eq(14654003575330111)
      expect(envelopes[11].status[:subscribed_channels]).to eq([])
      expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[11].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[11].result[:code]).to eq(200)
      expect(envelopes[11].result[:operation]).to eq(:subscribe)
      expect(envelopes[11].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003577815802", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/98", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 249, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003609186430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003609510033", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003628426279)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003598619043)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003609510033", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 251, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003609794712", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003610112800", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003628426279)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003598619043)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003610112800", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400361, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003615624671", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003628426279)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003598619043)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400361, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003615624671", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400361, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400361, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003616429040", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003628426279)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003598619043)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400361, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003616429040", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400361, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400362, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003622384912", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003628426279)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003598619043)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400362, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003622384912", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400362, :state => nil, :occupancy => 0}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400362, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003627382885", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003628426279)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003598619043)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400362, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003627382885", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400362, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/94", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 253, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003641619590", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003642190105", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003658971665)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003628426279)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003642190105", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 255, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003642483210", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003642801746", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003658971665)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003628426279)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003642801746", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400364, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003646500087", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003658971665)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003628426279)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400364, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003646500087", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400364, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400364, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003647264430", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003658971665)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003628426279)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400364, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003647264430", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400364, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400365, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003655217406", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003658971665)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003628426279)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400365, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003655217406", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400365, :state => nil, :occupancy => 0}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400365, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003657840744", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003658971665)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003628426279)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400365, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003657840744", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400365, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/90", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 257, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003680127270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003680453354", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003680453354", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400368, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003680579901", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400368, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003680579901", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400368, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 259, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003680738320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003681058335", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003681058335", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400368, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003681279772", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400368, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003681279772", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400368, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003692317583", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003692317583", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400369, :state => nil, :occupancy => 0}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003696367818", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003696367818", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400369, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003698490580", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003698490580", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400369, :state => nil, :occupancy => 2}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003698490580", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654003699192763)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654003674926674)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400369, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003698490580", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400369, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/92", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 261, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003712560930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003712880265", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003712880265", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 263, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003713157352", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003713480415", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003713480415", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003720445920", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003720445920", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400372, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003721074920", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003721074920", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400372, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003725807295", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003725807295", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400372, :state => nil, :occupancy => 0}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003728531362", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400372, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003728531362", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400372, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003733417156", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003733417156", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400373, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003733417156", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003733417156", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400373, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003737482434", :region_code => 2}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003737482434", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400373, :state => nil, :occupancy => 2}})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003737482434", :region_code => 2}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654003737849861)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654003699192763)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:presence)
      expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400373, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003737482434", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400373, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/106", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 265, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003744963892", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003745279435", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003745279435", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003761823803", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003761823803", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400376, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003762052394", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003762052394", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400376, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003761823803", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003761823803", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400376, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003762052394", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400376, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003762052394", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400376, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003751163895", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003751163895", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400375, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003757606578", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003757606578", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400375, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003750442756", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654003762825760)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654003743597630)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400375, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003750442756", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400375, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/102", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 267, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003777400250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003777722518", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003795206047)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003762825760)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003777722518", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400378, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003784279168", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003795206047)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003762825760)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400378, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003784279168", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400378, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400378, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003788856996", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003795206047)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003762825760)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400378, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003788856996", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400378, :state => nil, :occupancy => 0}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400379, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003792900068", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003795206047)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003762825760)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400379, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003792900068", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400379, :state => nil, :occupancy => 0}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400379, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003794819224", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003795206047)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003762825760)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400379, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003794819224", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400379, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400379, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003794819224", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003795206047)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003762825760)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400379, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003794819224", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400379, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/104", record: :none) do
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 269, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003809834170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003810206838", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003810206838", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003816772874", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003816772874", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400381, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003817409845", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003817409845", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400381, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003817453146", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003817453146", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400381, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003817453146", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400381, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003817453146", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400381, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003822748366", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654003822748366", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003825380682", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003825380682", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003825396734", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654003825396734", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003829250762", :region_code => 2}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003829250762", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 1}})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003829250762", :region_code => 2}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:presence)
      expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003829250762", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 1}})

      expect(envelopes[10].status[:code]).to eq(200)
      expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003829964643", :region_code => 1}})
      expect(envelopes[10].status[:category]).to eq(:ack)
      expect(envelopes[10].status[:auto_retried]).to eq(true)
      expect(envelopes[10].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[10].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[10].status[:subscribed_channels]).to eq([])
      expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[10].result[:code]).to eq(200)
      expect(envelopes[10].result[:operation]).to eq(:presence)
      expect(envelopes[10].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003829964643", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 2}})

      expect(envelopes[11].status[:code]).to eq(200)
      expect(envelopes[11].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654003829964643", :region_code => 1}})
      expect(envelopes[11].status[:category]).to eq(:ack)
      expect(envelopes[11].status[:auto_retried]).to eq(true)
      expect(envelopes[11].status[:current_timetoken]).to eq(14654003831573306)
      expect(envelopes[11].status[:last_timetoken]).to eq(14654003795206047)
      expect(envelopes[11].status[:subscribed_channels]).to eq([])
      expect(envelopes[11].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[11].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[11].result[:code]).to eq(200)
      expect(envelopes[11].result[:operation]).to eq(:presence)
      expect(envelopes[11].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400382, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654003829964643", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400382, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/172", record: :none) do
      pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 271, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003842252570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003842597207", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003843281538)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003831573305)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003842597207", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 273, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003842876130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003843195906", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003843281538)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003831573305)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003843195906", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/168", record: :none) do
      pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 275, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003874594650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003874912997", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003875578676)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003843281538)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003874912997", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 277, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003875196270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003875518070", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003875578676)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003843281538)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003875518070", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/170", record: :none) do
      pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 279, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003906910650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003907231038", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003907917179)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003875578676)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003907231038", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 281, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003907512738", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003907833598", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003907917179)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003875578676)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003907833598", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/166", record: :none) do
      pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 283, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003939202612", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003939560310", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003940227206)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003907917179)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003939560310", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 285, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003939828842", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003940146907", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003940227206)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003907917179)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003940146907", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/162", record: :none) do
      pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 287, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003973074320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003973392323", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654003974081335)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003940227206)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654003973392323", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 289, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654003973672500", :region_code => nil}, :publish_timetoken => {:timetoken => "14654003973995393", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654003974081335)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003940227206)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654003973995393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/164", record: :none) do
      pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 291, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004005938790", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004006258081", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004006940044)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654003974081335)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654004006258081", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 293, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004006536970", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004006856237", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004006940044)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654003974081335)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004006856237", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/178", record: :none) do
      pubnub.subscribe(channel: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 295, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004038372018", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004038696859", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004038780151)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004006350003)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654004038696859", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/174", record: :none) do
      pubnub.subscribe(channel: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: "demo.*", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 297, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004070724760", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004071043863", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004071096963)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004038780151)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654004071043863", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/176", record: :none) do
      pubnub.subscribe(channel: "demo.*", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: "demo.*", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 299, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004103034430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004103352626", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004103437720)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004071096963)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654004103352626", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo______presence__nil___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: "demo.*", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/316", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 301, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004135332460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004135650594", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004149933612)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004006940045)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004135650594", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 301, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004135332460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004135650594", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004149933612)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004006940045)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004135650594", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 303, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004135923260", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004136245761", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004149933612)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004006940045)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004136245761", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 303, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004135923260", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004136245761", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004149933612)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004006940045)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004136245761", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400414, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004149157709", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004149933612)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004006940045)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400414, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004149157709", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400414, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/312", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 305, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004167786482", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004168121028", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004175691891)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004149933612)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004168121028", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 305, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004167786482", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004168121028", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004175691891)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004149933612)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004168121028", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 307, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004168394210", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004168712060", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004175691891)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004149933612)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004168712060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 307, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004168394210", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004168712060", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004175691891)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004149933612)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004168712060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400417, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004174938568", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004175691891)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004149933612)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400417, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004174938568", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400417, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/314", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 309, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004200188128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004200523500", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004212833328)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004175691891)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004200523500", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 309, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004200188128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004200523500", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004212833328)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004175691891)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004200523500", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 311, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004200805480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004201124975", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004212833328)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004175691891)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004201124975", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 311, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004200805480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004201124975", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004212833328)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004175691891)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004201124975", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400421, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004212446300", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004212833328)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004175691891)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400421, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004212446300", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400421, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/310", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 313, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004232439418", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004232763470", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004246934059)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004212833328)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004232763470", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 313, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004232439418", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004232763470", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004246934059)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004212833328)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004232763470", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 315, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004233039110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004233357240", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004246934059)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004212833328)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004233357240", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 315, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004233039110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004233357240", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004246934059)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004212833328)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004233357240", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400423, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004239180520", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004246934059)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004212833328)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400423, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004239180520", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400423, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400424, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004245619950", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004246934059)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004212833328)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400424, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004245619950", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400424, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/306", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 317, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004264871200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004265190988", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004277433612)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004246934059)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004265190988", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 317, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004264871200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004265190988", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004277433612)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004246934059)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004265190988", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 319, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004265471540", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004265793990", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004277433612)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004246934059)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004265793990", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 319, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004265471540", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004265793990", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004277433612)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004246934059)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004265793990", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400427, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004271544007", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004277433612)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004246934059)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400427, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004271544007", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400427, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400427, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004276984371", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004277433612)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004246934059)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400427, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004276984371", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400427, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/308", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 321, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004300901702", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004301223328", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004313417673)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004277433612)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004301223328", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 321, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004300901702", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004301223328", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004313417673)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004277433612)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004301223328", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 323, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004301508448", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004301828451", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004313417673)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004277433612)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004301828451", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 323, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004301508448", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004301828451", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004313417673)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004277433612)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004301828451", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400430, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004305261423", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004313417673)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004277433612)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400430, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004305261423", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400430, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400431, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004313031519", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004313417673)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004277433612)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400431, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004313031519", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400431, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/322", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 325, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004333235798", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004333552937", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004345166014)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004313417673)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004333552937", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400433, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004339406399", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004345166014)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004313417673)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400433, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004339406399", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400433, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400434, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004344815497", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004345166014)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004313417673)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400434, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004344815497", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400434, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/318", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 327, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004367336300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004367656574", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004380680711)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004345166014)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004367656574", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400437, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004373283873", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004380680711)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004345166014)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400437, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004373283873", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400437, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400437, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004379899651", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004380680711)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004345166014)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400437, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004379899651", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400437, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/320", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 329, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004399723110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004400044045", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004411623031)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004380680711)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004400044045", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400440, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004406563564", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004411623031)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004380680711)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400440, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004406563564", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400440, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400441, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004411236514", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004411623031)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004380680711)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400441, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004411236514", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400441, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo____channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/298", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 331, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004432545270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004432867056", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004445048323)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004400130194)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004432867056", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 331, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004432545270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004432867056", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004445048323)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004400130194)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004432867056", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 333, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004433141482", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004433460520", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004445048323)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004400130194)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004433460520", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 333, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004433141482", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004433460520", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004445048323)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004400130194)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004433460520", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400444, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004444657292", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004445048323)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004400130194)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400444, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004444657292", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400444, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/294", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 335, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004464905150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004465231807", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004465231807", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 335, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004464905150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004465231807", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004465231807", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 337, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004465512012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004465832127", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004465832127", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 337, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004465512012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004465832127", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004465832127", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400447, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004470573843", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400447, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004470573843", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400447, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400447, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004477826861", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400447, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004477826861", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400447, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400447, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004478125661", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654004478908908)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654004445048323)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400447, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004478125661", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400447, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/296", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 339, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004497326050", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004497645348", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004498335116)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004478908908)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004497645348", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 339, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004497326050", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004497645348", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004498335116)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004478908908)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004497645348", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 341, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004497929490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004498247972", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004498335116)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004478908908)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004498247972", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 341, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004497929490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004498247972", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004498335116)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004478908908)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004498247972", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/292", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 343, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004530197198", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004530516626", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004545644020)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004498335116)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004530516626", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 343, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004530197198", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004530516626", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004545644020)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004498335116)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004530516626", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 345, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004530798630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004531116961", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004545644020)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004498335116)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004531116961", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 345, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004530798630", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004531116961", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004545644020)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004498335116)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004531116961", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400454, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004544868655", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004545644020)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004498335116)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400454, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004544868655", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400454, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/288", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 347, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004562632110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004562952868", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004572273130)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004545644020)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004562952868", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 347, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004562632110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004562952868", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004572273130)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004545644020)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004562952868", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 349, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004563230130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004563553371", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004572273130)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004545644020)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004563553371", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 349, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004563230130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004563553371", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004572273130)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004545644020)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004563553371", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400457, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004571232116", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004572273130)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004545644020)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400457, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004571232116", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400457, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/290", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 351, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004595039958", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004595363483", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004608963439)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004572273130)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004595363483", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 351, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004595039958", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004595363483", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004608963439)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004572273130)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004595363483", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 353, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004595650042", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004595973693", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004608963439)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004572273130)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004595973693", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 353, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004595650042", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004595973693", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004608963439)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004572273130)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004595973693", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400460, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004608187480", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004608963439)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004572273130)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400460, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004608187480", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400460, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/304", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 355, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004627459058", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004627776689", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004636506719)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004608963439)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004627776689", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400463, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004635602684", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004636506719)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004608963439)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400463, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004635602684", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400463, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/300", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 357, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004659917590", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004660247557", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004674360746)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004636506719)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004660247557", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400467, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004672493501", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004674360746)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004636506719)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400467, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004672493501", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400467, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/302", record: :none) do
      pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 359, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004692253708", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004692570522", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004700348144)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004674360746)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004692570522", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400469, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004699960695", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004700348144)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004674360746)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400469, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654004699960695", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400469, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: "demo.*", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/334", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 361, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004728560838", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004728883566", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004741444903)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004692487542)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004728883566", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 361, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004728560838", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004728883566", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004741444903)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004692487542)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004728883566", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 363, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004729165010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004729481669", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004741444903)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004692487542)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004729481669", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 363, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004729165010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004729481669", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004741444903)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004692487542)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004729481669", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400473, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004734661881", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004741444903)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004692487542)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400473, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004734661881", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400473, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400474, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004740647228", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004741444903)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004692487542)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400474, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004740647228", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400474, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/330", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 365, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004760807280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004761129427", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004774055486)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004741444903)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004761129427", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 365, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004760807280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004761129427", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004774055486)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004741444903)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004761129427", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 367, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004761403940", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004761730340", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004774055486)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004741444903)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004761730340", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 367, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004761403940", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004761730340", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004774055486)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004741444903)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004761730340", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400476, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004764559469", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004774055486)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004741444903)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400476, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004764559469", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400476, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400477, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004773238293", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004774055486)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004741444903)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400477, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004773238293", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400477, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/332", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 369, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004794536728", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004794850572", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004807037147)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004774055486)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004794850572", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 369, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004794536728", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004794850572", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004807037147)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004774055486)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004794850572", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 371, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004795121190", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004795437495", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004807037147)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004774055486)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004795437495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 371, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004795121190", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004795437495", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004807037147)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004774055486)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004795437495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400480, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004800091153", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004807037147)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004774055486)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400480, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004800091153", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400480, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400480, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004806565870", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004807037147)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004774055486)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400480, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004806565870", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400480, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/328", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 373, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004826800520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004827124136", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004839344336)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004807037147)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004827124136", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 373, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004826800520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004827124136", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004839344336)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004807037147)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004827124136", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 375, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004827410350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004827729348", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004839344336)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004807037147)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004827729348", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 375, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004827410350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004827729348", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004839344336)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004807037147)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004827729348", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400483, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004833067299", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004839344336)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004807037147)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400483, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004833067299", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400483, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400483, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004838873084", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004839344336)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004807037147)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400483, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004838873084", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400483, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/324", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 377, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004859028800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004859351515", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004873140481)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004839344336)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004859351515", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 377, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004859028800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004859351515", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004873140481)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004839344336)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004859351515", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 379, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004859666040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004859985060", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004873140481)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004839344336)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004859985060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 379, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004859666040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004859985060", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004873140481)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004839344336)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004859985060", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400486, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004866344430", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004873140481)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004839344336)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400486, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004866344430", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400486, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400487, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004872293698", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654004873140481)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004839344336)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400487, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004872293698", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400487, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/326", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 381, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004891215220", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004891542126", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004899842543)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004873140481)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004891542126", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 381, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004891215220", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004891542126", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004899842543)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004873140481)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004891542126", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 383, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004891829288", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004892149591", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004899842543)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004873140481)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004892149591", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 383, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004891829288", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004892149591", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654004899842543)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004873140481)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004892149591", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400489, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004898233630", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654004899842543)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004873140481)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400489, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004898233630", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400489, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/340", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 385, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004923338230", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004923662760", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004935288761)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004899842543)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004923662760", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400493, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004934841696", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004935288761)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004899842543)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400493, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004934841696", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400493, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/336", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 387, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004955463892", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004955784122", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004968837105)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004935288761)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004955784122", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400496, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004961065505", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004968837105)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004935288761)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400496, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004961065505", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400496, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400496, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004968074318", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654004968837105)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004935288761)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400496, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004968074318", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400496, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence___demo___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/338", record: :none) do
      pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 389, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654004987582710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654004987904674", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654004994989509)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004968837105)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654004987904674", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400499, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654004993796099", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654004994989509)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004968837105)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400499, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654004993796099", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400499, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence___demo___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/280", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 391, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005019711570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005020027690", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005020027690", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 391, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005019711570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005020027690", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005020027690", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 393, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005020320150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005020640370", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005020640370", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 393, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005020320150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005020640370", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005020640370", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400502, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005025860917", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400502, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005025860917", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400502, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005031817239", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005031817239", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400503, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005034861537", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005034861537", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400503, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005039676017", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400503, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005039676017", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400503, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400504, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005047418492", :region_code => 2}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654005047869265)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654004987889901)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400504, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005047418492", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400504, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/276", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 395, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005056552760", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005056867622", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005056867622", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 395, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005056552760", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005056867622", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005056867622", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 397, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005057149032", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005057466815", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005057466815", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 397, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005057149032", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005057466815", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005057466815", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400506, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005063236676", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400506, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005063236676", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400506, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400506, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005065668636", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400506, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005065668636", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400506, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400506, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005069829038", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400506, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005069829038", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400506, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400507, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005072438483", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400507, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005072438483", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400507, :state => nil, :occupancy => 0}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400507, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005077187297", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654005078101280)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654005047869265)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400507, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005077187297", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400507, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/278", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 399, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005088841150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005089160012", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005089160012", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 399, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005088841150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005089160012", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005089160012", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 401, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005089435070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005089748761", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005089748761", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 401, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005089435070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005089748761", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005089748761", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005096115147", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005096115147", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400509, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005096807067", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005096807067", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400509, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005096898045", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400509, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005096898045", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400509, :state => nil, :occupancy => 2}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400510, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005102024597", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400510, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005102024597", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400510, :state => nil, :occupancy => 0}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400510, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005106453412", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654005108773796)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654005078101280)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400510, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005106453412", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400510, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/274", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 403, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005121499510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005121819019", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005121819019", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 403, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005121499510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005121819019", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005121819019", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 405, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005122103792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005122437706", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005122437706", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 405, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005122103792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005122437706", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005122437706", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005130610303", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005130610303", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400513, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005130554400", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005130554400", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400513, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005133678386", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005133678386", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400513, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005136728192", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400513, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005136728192", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400513, :state => nil, :occupancy => 0}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400514, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005141462003", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654005142298766)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654005108773796)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400514, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005141462003", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400514, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/270", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 407, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005153759560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005154085709", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005154085709", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 407, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005153759560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005154085709", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005154085709", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 409, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005154368178", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005154684978", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005154684978", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 409, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005154368178", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005154684978", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005154684978", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005161311657", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005161311657", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400516, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005161394734", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005161394734", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400516, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005162027804", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005162027804", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400516, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005167127349", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005167587889)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005142298766)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400516, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005167127349", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400516, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/272", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 411, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005185946600", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005186264393", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005186264393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 411, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005185946600", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005186264393", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005186264393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 413, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005186542160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005186862655", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005186862655", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 413, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005186542160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005186862655", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005186862655", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400519, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005192849079", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400519, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005192849079", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400519, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400519, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005197981630", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400519, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005197981630", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400519, :state => nil, :occupancy => 0}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005202054534", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005202054534", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400520, :state => nil, :occupancy => 0}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005204944991", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005204944991", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400520, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005205184699", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654005206418938)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654005167587889)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400520, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005205184699", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400520, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/286", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 415, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005219556170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005219879429", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005237597826)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005216862307)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005219879429", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400523, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005237137167", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005237597826)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005216862307)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400523, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005237137167", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400523, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400522, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005224324441", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005237597826)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005216862307)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400522, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005224324441", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400522, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400523, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005231206499", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005237597826)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005216862307)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400523, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005231206499", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400523, :state => nil, :occupancy => 0}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400522, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005225099951", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005237597826)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005216862307)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400522, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005225099951", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400522, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400523, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005235286030", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005237597826)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005216862307)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400523, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005235286030", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400523, :state => nil, :occupancy => 0}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/282", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 417, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005251770470", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005252087710", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005256561075)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005237597826)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005252087710", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400525, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005255283649", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005256561075)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005237597826)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400525, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005255283649", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400525, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400525, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005255288832", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005256561075)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005237597826)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400525, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005255288832", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400525, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400525, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005256032298", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005256561075)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005237597826)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400525, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005256032298", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400525, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/284", record: :none) do
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 419, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005283903182", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005284222177", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005303515115)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005256561075)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005284222177", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400529, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005295783584", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005303515115)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005256561075)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400529, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654005295783584", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400529, :state => nil, :occupancy => 0}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400529, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005299629678", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005303515115)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005256561075)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400529, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 0}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654005299629678", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400529, :state => nil, :occupancy => 0}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400530, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005302663849", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005303515115)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005256561075)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400530, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005302663849", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400530, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/352", record: :none) do
      pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 421, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005316111670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005316441316", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005317135228)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005314697082)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005316441316", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 423, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005316784200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005317129591", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005317135228)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005314697082)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005317129591", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 421, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005316111670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005316441316", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005317135228)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005314697082)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005316441316", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 423, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005316784200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005317129591", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005317135228)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005314697082)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005317129591", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/348", record: :none) do
      pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 425, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005348412910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005348762974", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005349281592)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005317135228)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005348762974", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 425, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005348412910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005348762974", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005349281592)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005317135228)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005348762974", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 427, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005349036040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005349364007", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005349281592)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005317135228)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005349364007", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 427, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005349036040", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005349364007", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005349281592)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005317135228)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005349364007", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/350", record: :none) do
      pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 429, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005381038380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005381361633", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005381980767)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005349281592)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005381361633", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 429, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005381038380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005381361633", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005381980767)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005349281592)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005381361633", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 431, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005381641212", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005381959522", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005381980767)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005349281592)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005381959522", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 431, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005381641212", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005381959522", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005381980767)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005349281592)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005381959522", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/346", record: :none) do
      pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 433, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005413220858", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005413540393", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005414068233)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005381980767)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005413540393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 433, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005413220858", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005413540393", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005414068233)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005381980767)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005413540393", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 435, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005413835718", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005414152478", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005414068233)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005381980767)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005414152478", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 435, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005413835718", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005414152478", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005414068233)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005381980767)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005414152478", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/342", record: :none) do
      pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 437, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005445421750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005445742396", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005446337540)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005414068233)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005445742396", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 437, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005445421750", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005445742396", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005446337540)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005414068233)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005445742396", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 439, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005446027572", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005446347537", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005446337540)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005414068233)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005446347537", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 439, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005446027572", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005446347537", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005446337540)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005414068233)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005446347537", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/344", record: :none) do
      pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 441, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005477508162", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005477831123", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005478451213)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005446337540)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005477831123", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 441, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005477508162", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005477831123", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005478451213)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005446337540)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005477831123", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 443, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005478128080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005478447534", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005478451213)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005446337540)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005478447534", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 443, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005478128080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005478447534", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005478451213)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005446337540)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005478447534", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/358", record: :none) do
      pubnub.subscribe(channel: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 445, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005509553988", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005509875005", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005509878935)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005478451212)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005509875005", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/354", record: :none) do
      pubnub.subscribe(channel: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 447, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005541605970", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005541926493", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005541930937)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005509878935)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005541926493", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/356", record: :none) do
      pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => nil, :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 449, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005573673260", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005573994176", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005574062156)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005541930937)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005573994176", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel___demo___presence__nil___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/46", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005620999150", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005622285999)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005604453186)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400562, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005620999150", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400562, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 455, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005607004192", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005607326912", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005622285999)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005604453186)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005607326912", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 451, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005605781930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005606098270", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005622285999)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005604453186)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005606098270", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 453, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005606392270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005606713574", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005622285999)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005604453186)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005606713574", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 457, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005607616488", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005607940478", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005622285999)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005604453186)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005607940478", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/42", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 459, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005637967510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005638284204", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005650284647)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005622285999)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005638284204", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 461, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005638560850", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005638887172", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005650284647)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005622285999)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005638887172", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 463, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005639170360", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005639719438", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005650284647)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005622285999)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005639719438", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 465, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005640006120", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005640324801", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005650284647)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005622285999)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005640324801", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400564, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005648021420", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005650284647)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005622285999)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400564, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005648021420", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400564, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/44", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 467, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005670187230", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005670504808", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005683872237)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005650284647)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005670504808", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 469, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005670772710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005671088842", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005683872237)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005650284647)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005671088842", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 471, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005671361868", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005671677626", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005683872237)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005650284647)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005671677626", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 473, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005671949188", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005672301996", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005683872237)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005650284647)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005672301996", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400568, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005683427409", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005683872237)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005650284647)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400568, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005683427409", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400568, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/40", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 475, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005702246752", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005702560416", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005713700698)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005683872237)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005702560416", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 477, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005702834440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005703151556", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005713700698)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005683872237)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005703151556", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 479, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005703415440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005703736268", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005713700698)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005683872237)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005703736268", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 481, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005704001898", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005704318223", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005713700698)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005683872237)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005704318223", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400571, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005712863277", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005713700698)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005683872237)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400571, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005712863277", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400571, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/36", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 483, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005734372978", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005734702553", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005749815649)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005713700698)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005734702553", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 485, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005734986160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005735309837", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005749815649)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005713700698)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005735309837", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 487, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005735619820", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005735935875", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005749815649)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005713700698)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005735935875", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 489, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005736230280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005736550511", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005749815649)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005713700698)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005736550511", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400574, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005748900883", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005749815649)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005713700698)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400574, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005748900883", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400574, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/38", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400577, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005777883700", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005786187447)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005769579921)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400577, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005777883700", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400577, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400578, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005785401633", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005786187447)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005769579921)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400578, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005785401633", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400578, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 495, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005772136200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005772457871", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005786187447)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005769579921)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005772457871", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 491, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005770927140", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005771247517", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005786187447)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005769579921)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005771247517", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 493, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005771529542", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005771846783", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005786187447)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005769579921)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005771846783", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 497, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005772756770", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005773076834", :region_code => 12}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005786187447)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005769579921)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:subscribe)
      expect(envelopes[5].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005773076834", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/52", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400581, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005811236072", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005811624627)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005801886765)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400581, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005811236072", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400581, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 503, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005804445482", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005804762109", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005811624627)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005801886765)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005804762109", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 499, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005803238048", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005803563080", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005811624627)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005801886765)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005803563080", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 501, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005803844932", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005804159495", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005811624627)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005801886765)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005804159495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/48", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 505, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005835642400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005835960399", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005851529025)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005811624627)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005835960399", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 507, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005836240460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005836560263", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005851529025)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005811624627)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005836560263", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 509, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005836840330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005837154104", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005851529025)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005811624627)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005837154104", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400584, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005849354349", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005851529025)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005811624627)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400584, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005849354349", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400584, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/50", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 511, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005867949498", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005868273263", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005881042783)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005851529025)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005868273263", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 513, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005868578410", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005868906908", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005881042783)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005851529025)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005868906908", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 515, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005869198160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005869516124", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005881042783)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005851529025)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005869516124", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400587, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005878313863", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005881042783)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005851529025)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400587, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005878313863", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400587, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400588, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005880680240", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005881042783)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005851529025)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400588, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654005880680240", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400588, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo____channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/28", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 521, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005901514060", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005901833737", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005901833737", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400590, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005909270264", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400590, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005909270264", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400590, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400591, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005913557586", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400591, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005913557586", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400591, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400590, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005909270264", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400590, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005909270264", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400590, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400591, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005913557586", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400591, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005913557586", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400591, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 517, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005900252412", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005900576945", :region_code => 12}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:subscribe)
      expect(envelopes[5].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005900576945", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 519, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005900869818", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005901233236", :region_code => 12}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:subscribe)
      expect(envelopes[6].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005901233236", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 523, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005902112350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005902430079", :region_code => 12}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005913949377)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005898889040)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:subscribe)
      expect(envelopes[7].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005902430079", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/24", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 525, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005932682728", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005933001820", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005933001820", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 527, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005933284978", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005933602113", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005933602113", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 529, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005933883728", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005934203073", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005934203073", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 531, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005934493692", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005934815145", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005934815145", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005941658235", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005941658235", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400594, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005941658235", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005941658235", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400594, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005947071361", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005947071361", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400594, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005947071361", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005947848098)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005913949377)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400594, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005947071361", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400594, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/26", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 533, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005970597342", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005970915164", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654005970915164", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 535, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005971199300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005971518438", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654005971518438", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 537, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005971797640", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005972118609", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654005972118609", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 539, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654005972394300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654005972712027", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654005972712027", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400597, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005979130424", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400597, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005979130424", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400597, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400597, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005979130424", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400597, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005979130424", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400597, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400598, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005983912896", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400598, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005983912896", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400598, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400598, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654005983912896", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654005984302797)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005947848098)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400598, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654005983912896", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400598, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/22", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 541, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006002936310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006003254006", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006003254006", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 543, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006003540240", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006003859490", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006003859490", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 545, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006004153840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006004474274", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006004474274", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 547, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006004769280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006005088126", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006005088126", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006010479462", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006010479462", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400601, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006010479462", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006010479462", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400601, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006016288063", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006016288063", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400601, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006016288063", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006016998718)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654005984302797)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400601, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006016288063", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400601, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/18", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 549, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006035356550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006035673910", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006035673910", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 551, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006035947578", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006036268307", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006036268307", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 553, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006036550300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006036868173", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006036868173", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 555, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006037147350", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006037461878", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006037461878", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006042737809", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006042737809", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400604, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006042737809", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006042737809", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400604, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006048624801", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006048624801", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400604, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006048624801", :region_code => 2}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006049014086)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006016998718)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400604, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006048624801", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400604, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/20", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 557, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006067771762", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006068089773", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006068089773", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 559, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006068369940", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006068687959", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006068687959", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 561, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006068968652", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006069290498", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006069290498", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 563, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006069565320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006069883892", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006069883892", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400607, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006077031822", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400607, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006077031822", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400607, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400607, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006077031822", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400607, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006077031822", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400607, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400608, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006082204799", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400608, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006082204799", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400608, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400608, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006082204799", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006082981024)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006049014086)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400608, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006082204799", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400608, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/34", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400610, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006101032072", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006101736410)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006098767232)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400610, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006101032072", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400610, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 569, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006101332160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006101650671", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006101736410)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006098767232)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006101650671", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400610, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006101032072", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006101736410)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006098767232)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400610, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006101032072", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400610, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 565, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006100134700", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006100450418", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006101736410)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006098767232)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006100450418", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 567, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006100734820", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006101049220", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006101736410)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006098767232)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006101049220", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/30", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 571, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006132466380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006132785323", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006134061088)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006101736410)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006132785323", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 573, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006133065980", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006133381118", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006134061088)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006101736410)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006133381118", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 575, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006133659070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006133977339", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006134061088)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006101736410)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006133977339", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/32", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400617, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006174965944", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006177800551)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006134061088)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400617, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006174965944", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400617, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400617, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006174965944", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006177800551)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006134061088)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400617, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006174965944", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400617, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 577, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006176198910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006176514556", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006177800551)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006134061088)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006176514556", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 579, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006176798740", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006177115196", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006177800551)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006134061088)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006177115196", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 581, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006177398200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006177717752", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006177800551)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006134061088)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006177717752", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: "demo.*", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/64", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 583, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006197126038", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006197444464", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006212788389)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006177800551)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006197444464", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 585, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006197724468", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006198047414", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006212788389)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006177800551)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006198047414", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 587, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006198331230", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006198652559", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006212788389)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006177800551)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006198652559", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 589, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006198934760", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006199253257", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006212788389)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006177800551)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006199253257", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400621, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006210420118", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006212788389)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006177800551)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400621, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006210420118", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400621, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400621, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006211933538", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006212788389)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006177800551)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400621, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006211933538", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400621, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/60", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 591, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006229543670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006229862226", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006243229149)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006212788389)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006229862226", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 593, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006230144070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006230462746", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006243229149)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006212788389)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006230462746", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 595, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006230748680", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006231065551", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006243229149)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006212788389)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006231065551", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 597, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006231349950", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006231671170", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006243229149)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006212788389)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006231671170", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400624, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006240478181", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006243229149)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006212788389)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400624, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006240478181", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400624, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400624, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006242842713", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006243229149)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006212788389)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400624, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006242842713", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400624, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/62", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 599, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006269478440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006269792856", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006285465598)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006243229149)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006269792856", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 601, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006270063880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006270384078", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006285465598)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006243229149)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006270384078", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 603, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006270650770", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006270970855", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006285465598)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006243229149)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006270970855", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 605, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006271256710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006271574011", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006285465598)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006243229149)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006271574011", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400628, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006284429727", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006285465598)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006243229149)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400628, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006284429727", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400628, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/58", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 607, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006301671628", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006301987777", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006318244882)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006285599197)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006301987777", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 609, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006302266000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006302581339", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006318244882)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006285599197)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006302581339", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 611, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006302847118", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006303166301", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006318244882)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006285599197)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006303166301", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 613, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006303447812", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006303768788", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006318244882)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006285599197)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006303768788", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400631, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006316102292", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006318244882)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006285599197)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400631, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006316102292", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400631, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/54", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 615, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006333812458", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006334132015", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006343170739)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006318244882)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006334132015", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 617, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006334416990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006334741925", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006343170739)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006318244882)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006334741925", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 619, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006335025990", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006335345591", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006343170739)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006318244882)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006335345591", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 621, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006335627850", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006335949754", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006343170739)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006318244882)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006335949754", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400634, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006341916346", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006343170739)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006318244882)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400634, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006341916346", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400634, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/56", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 623, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006365953222", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006366271268", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006379667579)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006343170739)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006366271268", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 625, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006366555180", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006366869313", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006379667579)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006343170739)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006366869313", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 627, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006367137780", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006367451558", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006379667579)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006343170739)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006367451558", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 629, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006367734110", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006368056958", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006379667579)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006343170739)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006368056958", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400637, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006379232550", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006379667579)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006343170739)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400637, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006379232550", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400637, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/70", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400640, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006406018371", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006406469041)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006396727186)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400640, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006406018371", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400640, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 635, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006399293670", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006399609982", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006406469041)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006396727186)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006399609982", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 631, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006398043608", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006398405963", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006406469041)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006396727186)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006398405963", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 633, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006398697960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006399013826", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006406469041)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006396727186)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006399013826", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/66", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 637, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006430225332", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006430543042", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006443411516)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006406469041)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006430543042", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 639, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006430831730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006431152918", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006443411516)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006406469041)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006431152918", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 641, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006431426042", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006431744313", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006443411516)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006406469041)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006431744313", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400644, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006442930727", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006443411516)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006406469041)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400644, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006442930727", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400644, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/68", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 643, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006462308428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006462624303", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006470001650)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006443411516)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006462624303", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 645, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006462908580", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006463234211", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006470001650)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006443411516)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006463234211", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 647, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006463518290", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006463835318", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006470001650)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006443411516)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006463835318", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400646, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006469470546", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006470001650)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006443411516)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400646, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654006469470546", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400646, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence___demo___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo-pnpres", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/10", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 653, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006495626270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006495951041", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006495951041", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400651, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006512415063", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400651, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006512415063", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400651, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400651, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006512415063", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400651, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006512415063", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400651, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 649, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006494415050", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006494733896", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006494733896", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400650, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006509555272", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400650, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006509555272", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400650, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 651, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006495021708", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006495341130", :region_code => 12}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:subscribe)
      expect(envelopes[5].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006495341130", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400651, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006510391382", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400651, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006510391382", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400651, :state => nil, :occupancy => 2}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 655, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006496231270", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006496556391", :region_code => 12}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006513331661)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006493092452)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:subscribe)
      expect(envelopes[7].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006496556391", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/6", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 657, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006528011160", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006528325136", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006528325136", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 659, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006528606960", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006528923256", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006528923256", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 661, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006529197912", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006529519279", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006529519279", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 663, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006529787620", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006530112019", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006530112019", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400653, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006534741732", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400653, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006534741732", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400653, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400653, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006534741732", :region_code => 2}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400653, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006534741732", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400653, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006541282050", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006541282050", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400654, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006547236451", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006547236451", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400654, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006549247203", :region_code => 2}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006549247203", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400654, :state => nil, :occupancy => 1}})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006549247203", :region_code => 2}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:presence)
      expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006549247203", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400654, :state => nil, :occupancy => 1}})

      expect(envelopes[10].status[:code]).to eq(200)
      expect(envelopes[10].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006548693936", :region_code => 1}})
      expect(envelopes[10].status[:category]).to eq(:ack)
      expect(envelopes[10].status[:auto_retried]).to eq(true)
      expect(envelopes[10].status[:current_timetoken]).to eq(14654006550654004)
      expect(envelopes[10].status[:last_timetoken]).to eq(14654006513331661)
      expect(envelopes[10].status[:subscribed_channels]).to eq([])
      expect(envelopes[10].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[10].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[10].result[:code]).to eq(200)
      expect(envelopes[10].result[:operation]).to eq(:presence)
      expect(envelopes[10].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400654, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006548693936", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400654, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/8", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 665, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006564856380", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006565174025", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006565174025", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 667, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006565459772", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006565778910", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006565778910", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 669, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006566062880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006566383994", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006566383994", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 671, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006566674318", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006566994010", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006566994010", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400657, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006571328142", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400657, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006571328142", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400657, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400657, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006571328142", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400657, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006571328142", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400657, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400657, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006572810427", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400657, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006572810427", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400657, :state => nil, :occupancy => 2}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400658, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006580158261", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400658, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006580158261", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400658, :state => nil, :occupancy => 1}})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400658, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006588606745", :region_code => 2}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654006589051820)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654006550654004)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400658, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006588606745", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400658, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/4", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400659, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006598593075", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400659, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006598593075", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400659, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400660, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006615600998", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400660, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006615600998", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400660, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400660, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006615600998", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400660, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006615600998", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400660, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 673, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006623600650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006623919500", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006623919500", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 675, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006624203320", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006624531866", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006624531866", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 677, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006624808162", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006625137018", :region_code => 12}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:subscribe)
      expect(envelopes[5].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006625137018", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 679, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006625409830", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006625728351", :region_code => 12}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:subscribe)
      expect(envelopes[6].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006625728351", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400662, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006624616118", :region_code => 1}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006627050109)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006589051820)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:presence)
      expect(envelopes[7].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400662, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006624616118", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400662, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/0", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400664, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006640388368", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400664, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006640388368", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400664, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400664, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006640388368", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400664, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006640388368", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400664, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400663, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006637973310", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400663, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006637973310", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400663, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 681, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006646390090", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006646707818", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006646707818", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 683, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006646987050", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006647303133", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006647303133", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 685, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006647572238", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006647887400", :region_code => 12}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:subscribe)
      expect(envelopes[5].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006647887400", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400664, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006644703161", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400664, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006644703161", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400664, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 687, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006648169070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006648485630", :region_code => 12}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006648484292)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006627050109)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:subscribe)
      expect(envelopes[7].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006648485630", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/2", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400666, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006668941642", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400666, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006668941642", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400666, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006673592383", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006673592383", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400667, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006676092346", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006676092346", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400667, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006676092346", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006676092346", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400667, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006679604590", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006679604590", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400667, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006679604590", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400667, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006679604590", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400667, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 689, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006684135800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006684451330", :region_code => 12}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:subscribe)
      expect(envelopes[6].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006684451330", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 691, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006684722720", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006685037846", :region_code => 12}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:subscribe)
      expect(envelopes[7].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006685037846", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 693, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006685317010", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006685638501", :region_code => 12}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:subscribe)
      expect(envelopes[8].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006685638501", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 695, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006685916118", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006686234640", :region_code => 12}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654006686233663)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654006648484292)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:subscribe)
      expect(envelopes[9].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006686234640", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/16", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006708052570", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006708052570", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400670, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 701, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006710442932", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006710760852", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006710760852", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006708052570", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006708052570", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400670, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 697, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006709247190", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006709564237", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006709564237", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400669, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006698514460", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400669, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006698514460", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400669, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400671, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006718521227", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400671, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006718521227", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400671, :state => nil, :occupancy => 2}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006722331900", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006722331900", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400672, :state => nil, :occupancy => 1}})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 699, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006709839920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006710162607", :region_code => 12}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:subscribe)
      expect(envelopes[7].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006710162607", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006705755452", :region_code => 1}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:presence)
      expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006705755452", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400670, :state => nil, :occupancy => 1}})

      expect(envelopes[9].status[:code]).to eq(200)
      expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006706448116", :region_code => 2}})
      expect(envelopes[9].status[:category]).to eq(:ack)
      expect(envelopes[9].status[:auto_retried]).to eq(true)
      expect(envelopes[9].status[:current_timetoken]).to eq(14654006723148918)
      expect(envelopes[9].status[:last_timetoken]).to eq(14654006692380638)
      expect(envelopes[9].status[:subscribed_channels]).to eq([])
      expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[9].result[:code]).to eq(200)
      expect(envelopes[9].result[:operation]).to eq(:presence)
      expect(envelopes[9].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400670, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006706448116", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400670, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/12", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006726965428", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006726965428", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400672, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006726965428", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006726965428", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400672, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006727939311", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006727939311", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400672, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006729048443", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400672, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006729048443", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400672, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400673, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006732728761", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400673, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006732728761", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400673, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400673, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006732728761", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400673, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006732728761", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400673, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 703, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006736214718", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006736535168", :region_code => 12}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:subscribe)
      expect(envelopes[6].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006736535168", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[7].status[:code]).to eq(200)
      expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 705, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006736825700", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006737142904", :region_code => 12}})
      expect(envelopes[7].status[:category]).to eq(:ack)
      expect(envelopes[7].status[:auto_retried]).to eq(true)
      expect(envelopes[7].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[7].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[7].status[:subscribed_channels]).to eq([])
      expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[7].result[:code]).to eq(200)
      expect(envelopes[7].result[:operation]).to eq(:subscribe)
      expect(envelopes[7].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006737142904", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[8].status[:code]).to eq(200)
      expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 707, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006737424012", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006737743168", :region_code => 12}})
      expect(envelopes[8].status[:category]).to eq(:ack)
      expect(envelopes[8].status[:auto_retried]).to eq(true)
      expect(envelopes[8].status[:current_timetoken]).to eq(14654006737742058)
      expect(envelopes[8].status[:last_timetoken]).to eq(14654006723148918)
      expect(envelopes[8].status[:subscribed_channels]).to eq([])
      expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[8].result[:code]).to eq(200)
      expect(envelopes[8].result[:operation]).to eq(:subscribe)
      expect(envelopes[8].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006737743168", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/14", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 709, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006758192730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006758510856", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006758510856", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 711, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006758793158", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006759108931", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006759108931", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 713, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006759403980", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006759721186", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006759721186", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400677, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006771009034", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400677, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654006771009034", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400677, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400677, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006775786280", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400677, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654006775786280", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400677, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400678, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006783280481", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400678, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006783280481", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400678, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "leave", "timestamp" => 1465400678, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006783280481", :region_code => 1}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654006784626149)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654006757075815)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400678, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006783280481", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400678, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo0-pnpres", "demo1-pnpres", "demo.*", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/82", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 719, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006791536770", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006791855896", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006803975247)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006789003083)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006791855896", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*", :payload => {"action" => "join", "timestamp" => 1465400680, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654006803125541", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006803975247)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006789003083)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400680, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654006803125541", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400680, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 715, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006790330740", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006790649570", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006803975247)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006789003083)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006790649570", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 717, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006790926840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006791250521", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006803975247)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006789003083)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006791250521", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 721, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006792144498", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006792463426", :region_code => 12}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654006803975247)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654006789003083)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:subscribe)
      expect(envelopes[4].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006792463426", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/78", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 723, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006823037738", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006823355372", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006825168983)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006803975247)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006823355372", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 725, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006823638520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006823962964", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006825168983)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006803975247)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006823962964", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 727, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006824246650", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006824561311", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006825168983)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006803975247)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006824561311", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 729, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006824844800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006825162370", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006825168983)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006803975247)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006825162370", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/80", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 731, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006855188942", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006855508509", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006857303749)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006825168983)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006855508509", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 733, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006855788720", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006856104590", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006857303749)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006825168983)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006856104590", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 735, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006856385390", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006856700710", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006857303749)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006825168983)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006856700710", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 737, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006856993570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006857314877", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006857303749)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006825168983)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006857314877", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/76", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 739, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006888677570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006888996032", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006890855120)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006857303749)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006888996032", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 741, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006889278910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006889623562", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006890855120)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006857303749)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006889623562", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 743, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006889943150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006890259075", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006890855120)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006857303749)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006890259075", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 745, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006890547998", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006890866495", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006890855120)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006857303749)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006890866495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/72", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 747, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006920835090", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006921153429", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006922928838)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006890855120)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006921153429", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 749, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006921435930", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006921751458", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006922928838)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006890855120)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006921751458", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 751, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006922036090", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006922355324", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006922928838)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006890855120)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006922355324", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 753, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006922640980", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006922959570", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006922928838)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006890855120)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006922959570", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/74", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 755, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006952983300", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006953302134", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006955112230)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006922928838)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006953302134", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 757, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006953585332", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006953898016", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006955112230)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006922928838)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006953898016", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 759, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006954195358", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006954528641", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006955112230)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006922928838)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006954528641", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 761, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006954792400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006955108485", :region_code => 12}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654006955112230)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654006922928838)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:subscribe)
      expect(envelopes[3].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654006955108485", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/88", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 763, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006985177072", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006985497268", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654006986732871)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006954532395)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654006985497268", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 765, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006985780680", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006986109086", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654006986732871)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006954532395)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654006986109086", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 767, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654006986392440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654006986712126", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654006986732871)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006954532395)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654006986712126", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/84", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 769, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007017384498", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007017701485", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007018902109)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654006986732871)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654007017701485", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 771, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007017983072", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007018304400", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007018902109)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654006986732871)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654007018304400", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 773, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007018598452", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007018916437", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654007018902109)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654006986732871)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654007018916437", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/86", record: :none) do
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0", :subscription_match => "demo0", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 775, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007049570802", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007049886985", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007051107296)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007018902109)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo0", :actual_channel => "demo0", :publish_time_object => {:timetoken => "14654007049886985", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1", :subscription_match => "demo1", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 777, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007050175840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007050496846", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007051107296)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007018902109)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo1", :actual_channel => "demo1", :publish_time_object => {:timetoken => "14654007050496846", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.ruby", :subscription_match => "demo.*", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 779, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007050782090", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007051102210", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654007051107296)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654007018902109)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo.*", :actual_channel => "demo.ruby", :publish_time_object => {:timetoken => "14654007051102210", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel____demo0___demo1____demo_______presence__nil___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0", "demo1", "demo.*"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/406", record: :none) do
      pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400709, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007095795831", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007098196231)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007080403944)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400709, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007095795831", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400709, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 781, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007081741000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007082065854", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007098196231)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007080403944)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007082065854", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/402", record: :none) do
      pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400714, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007141949911", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007143397981)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007116555273)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400714, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007141949911", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400714, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 783, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007117923388", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007118247158", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007143397981)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007116555273)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007118247158", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/404", record: :none) do
      pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400715, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007159392403", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007161206413)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007143397981)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400715, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007159392403", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400715, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 785, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007160830330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007161143681", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007161206413)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007143397981)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007161143681", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/400", record: :none) do
      pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 787, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007182540660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007182853034", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007194484157)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007161206413)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007182853034", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400718, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007189792273", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007194484157)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007161206413)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400718, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007189792273", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400718, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400719, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007194098475", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654007194484157)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654007161206413)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400719, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007194098475", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400719, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/396", record: :none) do
      pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 789, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007214943170", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007215314373", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007221031965)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007194484157)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007215314373", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400722, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007220645518", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007221031965)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007194484157)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400722, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007220645518", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400722, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/398", record: :none) do
      pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 791, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007247710478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007248054627", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007248138299)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007221031965)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007248054627", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/412", record: :none) do
      pubnub.subscribe(presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400727, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007278989858", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007282438817)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007221031965)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400727, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007278989858", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400727, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/408", record: :none) do
      pubnub.subscribe(presence: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400732, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007320217832", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007343247949)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007282438817)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400732, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007320217832", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400732, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400733, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007342857843", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007343247949)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007282438817)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400733, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007342857843", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400733, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo____channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/410", record: :none) do
      pubnub.subscribe(presence: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400735, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007354728670", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007355115402)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007343247949)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400735, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007354728670", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400735, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo____channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/388", record: :none) do
      pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400739, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007390803680", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007391784386)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007377854830)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400739, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007390803680", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400739, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 793, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007379320510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007379644947", :region_code => 12}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007391784386)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007377854830)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:subscribe)
      expect(envelopes[1].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007379644947", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/384", record: :none) do
      pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 795, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007411682382", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007411999889", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007420567075)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007391784386)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007411999889", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400741, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007417215667", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007420567075)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007391784386)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400741, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007417215667", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400741, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/386", record: :none) do
      pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 797, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007443935890", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007444253602", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007455752640)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007420567075)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007444253602", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400745, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007455393397", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007455752640)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007420567075)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400745, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007455393397", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400745, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/382", record: :none) do
      pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 799, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007476501420", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007476823690", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007497551059)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007474954595)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007476823690", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400749, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007497159889", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007497551059)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007474954595)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400749, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007497159889", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400749, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/378", record: :none) do
      pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 801, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007508816400", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007509141777", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007520823332)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007497551059)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007509141777", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400751, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007517136268", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007520823332)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007497551059)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400751, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007517136268", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400751, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/380", record: :none) do
      pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 803, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007541076620", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007541392891", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007556065552)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007520823332)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007541392891", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400755, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007553631008", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007556065552)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007520823332)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400755, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007553631008", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400755, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/394", record: :none) do
      pubnub.subscribe(presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo.*", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400758, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007580213484", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007584657936)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007556065552)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400758, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007580213484", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400758, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400758, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007584292689", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007584657936)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007556065552)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400758, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007584292689", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400758, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/390", record: :none) do
      pubnub.subscribe(presence: "demo.*", http_sync: true)
      envelopes = pubnub.subscribe(presence: "demo.*", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400774, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007747198319", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007747905270)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007584657936)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400774, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007747198319", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400774, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/392", record: :none) do
      pubnub.subscribe(presence: "demo.*", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: "demo.*", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400776, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007761695111", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007779030020)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007747905270)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400776, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007761695111", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400776, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400777, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007778640389", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007779030020)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007747905270)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400777, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654007778640389", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400777, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: "demo.*", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/424", record: :none) do
      pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 805, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007782441910", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007783455668", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007797195525)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007541311632)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007783455668", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400779, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007796364851", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007797195525)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007541311632)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400779, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007796364851", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400779, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/420", record: :none) do
      pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 807, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007814567440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007814915779", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007826565113)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007797195525)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007814915779", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400781, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007818623412", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007826565113)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007797195525)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400781, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007818623412", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400781, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400782, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007826104369", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654007826565113)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654007797195525)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400782, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007826104369", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400782, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/422", record: :none) do
      pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 809, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007846708522", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007847050403", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007861465786)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007826565113)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007847050403", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400785, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007853381823", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007861465786)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007826565113)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400785, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007853381823", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400785, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400785, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007859321805", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654007861465786)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654007826565113)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400785, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007859321805", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400785, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/418", record: :none) do
      pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 811, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007878760440", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007879101674", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007886950862)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007861465786)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007879101674", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400788, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007885093566", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007886950862)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007861465786)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400788, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007885093566", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400788, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/414", record: :none) do
      pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 813, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007912453560", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007912780863", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007928090242)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007886950862)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007912780863", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400792, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007925594363", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007928090242)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007886950862)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400792, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007925594363", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400792, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/416", record: :none) do
      pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 815, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654007949272070", :region_code => nil}, :publish_timetoken => {:timetoken => "14654007949687333", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007961228163)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007926634310)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654007949687333", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400795, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007959618468", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007961228163)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007926634310)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400795, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007959618468", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400795, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400796, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007960838244", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654007961228163)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654007926634310)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400796, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007960838244", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400796, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/430", record: :none) do
      pubnub.subscribe(presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400799, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007992836218", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654007997139709)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007961228163)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400799, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007992836218", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400799, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400799, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654007994960871", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654007997139709)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007961228163)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400799, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654007994960871", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400799, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/426", record: :none) do
      pubnub.subscribe(presence: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400802, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008023832497", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008027026504)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654007997139709)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400802, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008023832497", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400802, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400802, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008026639148", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008027026504)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654007997139709)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400802, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008026639148", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400802, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/428", record: :none) do
      pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "join", "timestamp" => 1465400805, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008059360825", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008061474050)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008027026504)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400805, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008059360825", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400805, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => nil, :payload => {"action" => "leave", "timestamp" => 1465400806, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008060075630", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008061474050)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008027026504)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400806, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008060075630", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400806, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence___demo___channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/370", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400809, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008093091230", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008108880534)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008079100443)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400809, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008093091230", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400809, :state => nil, :occupancy => 1}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400810, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008108172777", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008108880534)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008079100443)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400810, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008108172777", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400810, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 817, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008080471520", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008080797723", :region_code => 12}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008108880534)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008079100443)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:subscribe)
      expect(envelopes[2].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008080797723", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/366", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 819, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008112870478", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008113199813", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008138483952)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008111784566)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008113199813", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400811, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008116788942", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008138483952)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008111784566)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400811, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008116788942", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400811, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400813, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008136303667", :region_code => 1}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008138483952)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008111784566)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400813, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008136303667", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400813, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400813, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008136302308", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008138483952)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008111784566)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400813, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008136302308", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400813, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/368", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 821, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008145227950", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008145549873", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008167097558)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008138483952)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008145549873", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400815, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008157857080", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008167097558)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008138483952)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400815, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008157857080", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400815, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400816, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008161426290", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008167097558)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008138483952)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400816, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008161426290", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400816, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400816, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008162380930", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008167097558)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008138483952)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400816, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008162380930", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400816, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400816, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008166710867", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654008167097558)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654008138483952)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400816, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008166710867", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400816, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/364", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 823, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008177576802", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008177900357", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008195507481)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008176391211)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008177900357", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400818, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008184631728", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008195507481)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008176391211)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400818, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008184631728", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400818, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400818, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008189136482", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008195507481)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008176391211)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400818, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008189136482", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400818, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400819, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008193221923", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008195507481)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008176391211)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400819, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008193221923", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400819, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/360", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 825, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008209943878", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008210266725", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008228098313)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008195507481)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008210266725", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400821, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008214445745", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008228098313)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008195507481)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400821, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008214445745", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400821, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400821, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008215204223", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008228098313)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008195507481)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400821, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008215204223", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400821, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400822, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008224145622", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008228098313)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008195507481)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400822, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008224145622", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400822, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400822, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008227710069", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654008228098313)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654008195507481)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400822, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008227710069", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400822, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/362", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 827, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008242331578", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008242656718", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008242656718", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400824, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008248498525", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400824, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008248498525", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400824, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400824, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008249202169", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400824, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008249202169", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400824, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400825, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008254990775", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400825, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008254990775", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400825, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400825, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008257656256", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400825, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008257656256", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400825, :state => nil, :occupancy => 1}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400826, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008263015622", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400826, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008263015622", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400826, :state => nil, :occupancy => 1}})

      expect(envelopes[6].status[:code]).to eq(200)
      expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400827, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008270973506", :region_code => 2}})
      expect(envelopes[6].status[:category]).to eq(:ack)
      expect(envelopes[6].status[:auto_retried]).to eq(true)
      expect(envelopes[6].status[:current_timetoken]).to eq(14654008271364024)
      expect(envelopes[6].status[:last_timetoken]).to eq(14654008228098313)
      expect(envelopes[6].status[:subscribed_channels]).to eq([])
      expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[6].result[:code]).to eq(200)
      expect(envelopes[6].result[:operation]).to eq(:presence)
      expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400827, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008270973506", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400827, :state => nil, :occupancy => 2}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/376", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400827, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008279770747", :region_code => 2}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008290139220)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008273829519)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400827, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008279770747", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400827, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400828, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008289751218", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008290139220)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008273829519)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400828, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008289751218", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400828, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400828, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008280445990", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008290139220)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008273829519)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400828, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008280445990", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400828, :state => nil, :occupancy => 2}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400828, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008287803113", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008290139220)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008273829519)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400828, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008287803113", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400828, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/372", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400831, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008316538289", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008324857524)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008306113124)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400831, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008316538289", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400831, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400832, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008324406398", :region_code => 2}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008324857524)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008306113124)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400832, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008324406398", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400832, :state => nil, :occupancy => 1}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400831, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008318357247", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008324857524)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008306113124)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400831, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008318357247", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400831, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400831, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008315844702", :region_code => 1}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008324857524)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008306113124)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400831, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008315844702", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400831, :state => nil, :occupancy => 2}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400832, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008322896728", :region_code => 1}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654008324857524)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654008306113124)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400832, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008322896728", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400832, :state => nil, :occupancy => 2}})

      expect(envelopes[5].status[:code]).to eq(200)
      expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400832, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008322407596", :region_code => 1}})
      expect(envelopes[5].status[:category]).to eq(:ack)
      expect(envelopes[5].status[:auto_retried]).to eq(true)
      expect(envelopes[5].status[:current_timetoken]).to eq(14654008324857524)
      expect(envelopes[5].status[:last_timetoken]).to eq(14654008306113124)
      expect(envelopes[5].status[:subscribed_channels]).to eq([])
      expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[5].result[:code]).to eq(200)
      expect(envelopes[5].result[:operation]).to eq(:presence)
      expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400832, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008322407596", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400832, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/374", record: :none) do
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400834, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008347963444", :region_code => 1}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008357807567)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008324857524)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:presence)
      expect(envelopes[0].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400834, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008347963444", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400834, :state => nil, :occupancy => 2}})

      expect(envelopes[1].status[:code]).to eq(200)
      expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400834, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008348210365", :region_code => 1}})
      expect(envelopes[1].status[:category]).to eq(:ack)
      expect(envelopes[1].status[:auto_retried]).to eq(true)
      expect(envelopes[1].status[:current_timetoken]).to eq(14654008357807567)
      expect(envelopes[1].status[:last_timetoken]).to eq(14654008324857524)
      expect(envelopes[1].status[:subscribed_channels]).to eq([])
      expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[1].result[:code]).to eq(200)
      expect(envelopes[1].result[:operation]).to eq(:presence)
      expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400834, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008348210365", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400834, :state => nil, :occupancy => 2}})

      expect(envelopes[2].status[:code]).to eq(200)
      expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400835, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008350529469", :region_code => 2}})
      expect(envelopes[2].status[:category]).to eq(:ack)
      expect(envelopes[2].status[:auto_retried]).to eq(true)
      expect(envelopes[2].status[:current_timetoken]).to eq(14654008357807567)
      expect(envelopes[2].status[:last_timetoken]).to eq(14654008324857524)
      expect(envelopes[2].status[:subscribed_channels]).to eq([])
      expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[2].result[:code]).to eq(200)
      expect(envelopes[2].result[:operation]).to eq(:presence)
      expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400835, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654008350529469", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400835, :state => nil, :occupancy => 1}})

      expect(envelopes[3].status[:code]).to eq(200)
      expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400835, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008353635584", :region_code => 2}})
      expect(envelopes[3].status[:category]).to eq(:ack)
      expect(envelopes[3].status[:auto_retried]).to eq(true)
      expect(envelopes[3].status[:current_timetoken]).to eq(14654008357807567)
      expect(envelopes[3].status[:last_timetoken]).to eq(14654008324857524)
      expect(envelopes[3].status[:subscribed_channels]).to eq([])
      expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[3].result[:code]).to eq(200)
      expect(envelopes[3].result[:operation]).to eq(:presence)
      expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400835, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654008353635584", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400835, :state => nil, :occupancy => 1}})

      expect(envelopes[4].status[:code]).to eq(200)
      expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400835, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008357275896", :region_code => 2}})
      expect(envelopes[4].status[:category]).to eq(:ack)
      expect(envelopes[4].status[:auto_retried]).to eq(true)
      expect(envelopes[4].status[:current_timetoken]).to eq(14654008357807567)
      expect(envelopes[4].status[:last_timetoken]).to eq(14654008324857524)
      expect(envelopes[4].status[:subscribed_channels]).to eq([])
      expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[4].result[:code]).to eq(200)
      expect(envelopes[4].result[:operation]).to eq(:presence)
      expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400835, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008357275896", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400835, :state => nil, :occupancy => 1}})
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence____demo0___demo1____demo_______channel_group__nil___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(presence: [:demo0, "demo1", "demo.*"], http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/442", record: :none) do
      pubnub.subscribe(channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel_group: :demo, http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 829, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008371814458", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008372139740", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008372144142)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008242656511)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008372139740", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/438", record: :none) do
      pubnub.subscribe(channel_group: :demo, http_sync: true)
      envelopes = pubnub.subscribe(channel_group: :demo, http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 831, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008403933430", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008404257884", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008404247503)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008372144142)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008404257884", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo___http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/440", record: :none) do
      pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel_group: :demo, http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 833, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008436039900", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008436365002", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008436334477)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008404247503)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008436365002", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel_group: :demo, http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo___http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel_group: :demo, http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback__nil_" do
    VCR.use_cassette("examples/subscribe/436", record: :none) do
      pubnub.subscribe(channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel_group: "demo", http_sync: true)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 835, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008468138052", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008468462832", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008468433375)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008436334477)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008468462832", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___block_" do
    VCR.use_cassette("examples/subscribe/432", record: :none) do
      pubnub.subscribe(channel_group: "demo", http_sync: true)
      envelopes = pubnub.subscribe(channel_group: "demo", http_sync: true, &@callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 837, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008500247008", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008500569561", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008500641580)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008468433375)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008500569561", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo____http_sync__true___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/434", record: :none) do
      pubnub.subscribe(channel_group: "demo", http_sync: true, callback: @callback)
      envelopes = pubnub.subscribe(channel_group: "demo", http_sync: true, callback: @callback)
      envelopes.each do |envelope|
        expect(envelope.is_a?(Pubnub::Envelope)).to eq true
        expect(envelope.error?).to eq false
      end

      expect(envelopes[0].status[:code]).to eq(200)
      expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "test_message", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 839, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008532360762", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008532690792", :region_code => 12}})
      expect(envelopes[0].status[:category]).to eq(:ack)
      expect(envelopes[0].status[:auto_retried]).to eq(true)
      expect(envelopes[0].status[:current_timetoken]).to eq(14654008532695244)
      expect(envelopes[0].status[:last_timetoken]).to eq(14654008500641580)
      expect(envelopes[0].status[:subscribed_channels]).to eq([])
      expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
      expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

      expect(envelopes[0].result[:code]).to eq(200)
      expect(envelopes[0].result[:operation]).to eq(:subscribe)
      expect(envelopes[0].result[:data]).to eq({:message => "test_message", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008532690792", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback__nil_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___block_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel_group: "demo", http_sync: false)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  it "__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_" do
    VCR.use_cassette("examples/subscribe/__channel__nil___presence__nil___channel_group___demo____http_sync__false___callback___lambda_", record: :none) do
      @msg_envelopes = []
      @presence_envelopes = []
      @status_envelopes = []
      callbacks = Pubnub::SubscribeCallback.new(
        message: -> (envelope) { @msg_envelopes << envelope },
        presence: -> (envelope) { @presence_envelopes << envelope },
        status: -> (envelope) { @status_envelopes << envelope },
      )

      pubnub.add_listener(callback: callbacks)
      pubnub.subscribe(channel_group: "demo", http_sync: false, callback: @callback)
    end

    eventually do
      if @status_envelopes.length > 0
        expect(@status_envelopes[0].status[:category]).to eq(:timeout)
        expect(@status_envelopes[0].status[:error]).to eq(true)
        expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
        expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
        expect(@status_envelopes[0].status[:subscribed_channels]).to eq([])
        expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
        expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
        true
      end
    end
  end

  context 'encrypted communication' do
    let(:pubnub) { Pubnub.new(**pubnub_cipher_params) }
    it "__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/227", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 1, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008564514858", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008565443486", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008579741840)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008532695245)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008565443486", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 1, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008564514858", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008565443486", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008579741840)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008532695245)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008565443486", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 3, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008565725792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008566063920", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008579741840)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008532695245)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008566063920", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 3, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008565725792", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008566063920", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008579741840)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008532695245)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008566063920", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400857, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008578895011", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008579741840)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008532695245)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400857, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008578895011", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400857, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/223", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 5, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008596691142", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008597041877", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008603254007)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008579741840)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008597041877", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 5, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008596691142", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008597041877", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008603254007)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008579741840)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008597041877", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 7, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008597336500", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008597674348", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008603254007)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008579741840)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008597674348", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 7, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008597336500", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008597674348", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008603254007)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008579741840)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008597674348", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400860, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008601315748", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008603254007)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008579741840)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400860, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008601315748", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400860, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/225", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 9, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008628860328", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008629180859", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008641413794)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008603254007)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008629180859", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 9, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008628860328", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008629180859", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008641413794)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008603254007)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008629180859", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 11, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008629471150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008629794888", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008641413794)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008603254007)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008629794888", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 11, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008629471150", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008629794888", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008641413794)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008603254007)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008629794888", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400864, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008640943222", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008641413794)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008603254007)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400864, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008640943222", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400864, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/221", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 13, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008666640188", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008666964596", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008681854470)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008641413794)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008666964596", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 13, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008666640188", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008666964596", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008681854470)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008641413794)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008666964596", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 15, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008667257130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008667579495", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008681854470)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008641413794)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008667579495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 15, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008667257130", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008667579495", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008681854470)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008641413794)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008667579495", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400867, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008674565193", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008681854470)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008641413794)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400867, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008674565193", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400867, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400867, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008679854565", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654008681854470)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654008641413794)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400867, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008679854565", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400867, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/217", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 17, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008698855490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008699184701", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008707531707)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008681854470)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008699184701", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 17, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008698855490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008699184701", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008707531707)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008681854470)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008699184701", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 19, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008699484880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008699810675", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008707531707)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008681854470)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008699810675", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 19, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008699484880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008699810675", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008707531707)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008681854470)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008699810675", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400870, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008706700996", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008707531707)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008681854470)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400870, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008706700996", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400870, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/219", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 21, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008731013310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008731333445", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008743562065)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008707531707)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008731333445", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 21, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008731013310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008731333445", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008743562065)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008707531707)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008731333445", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 23, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008731613610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008731934546", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008743562065)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008707531707)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008731934546", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 23, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008731613610", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008731934546", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008743562065)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008707531707)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008731934546", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400874, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008743127346", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008743562065)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008707531707)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400874, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008743127346", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400874, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/233", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 25, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008763136840", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008763461066", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008768515208)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008743562065)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008763461066", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400876, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008768044235", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008768515208)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008743562065)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400876, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008768044235", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400876, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/229", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 27, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008795291080", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008795612801", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008807264569)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008768515208)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008795612801", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400880, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008806798935", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008807264569)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008768515208)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400880, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008806798935", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400880, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo____channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/231", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 29, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008827409920", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008827737730", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008841988480)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008807264569)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008827737730", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400883, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008831702803", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008841988480)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008807264569)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400883, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008831702803", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400883, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400883, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008839997567", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008841988480)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008807264569)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400883, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654008839997567", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400883, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo____channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/209", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 31, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008859503250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008859831354", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008874147806)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008827654612)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008859831354", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 31, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008859503250", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008859831354", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008874147806)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008827654612)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008859831354", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 33, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008860119550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008860443094", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008874147806)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008827654612)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008860443094", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 33, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008860119550", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008860443094", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008874147806)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008827654612)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008860443094", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400886, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008867429338", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008874147806)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008827654612)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400886, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008867429338", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400886, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400887, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008872644717", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654008874147806)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654008827654612)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400887, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008872644717", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400887, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/205", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 35, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008891677880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008892002663", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008900046735)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008874147806)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008892002663", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 35, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008891677880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008892002663", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008900046735)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008874147806)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008892002663", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 37, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008892287710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008892612132", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008900046735)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008874147806)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008892612132", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 37, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008892287710", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008892612132", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008900046735)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008874147806)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008892612132", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400889, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008899599015", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008900046735)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008874147806)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400889, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008899599015", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400889, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/207", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 39, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008923871128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008924195661", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008941150452)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008900046735)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008924195661", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 39, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008923871128", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008924195661", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008941150452)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008900046735)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008924195661", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 41, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008924485362", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008924816866", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008941150452)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008900046735)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008924816866", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 41, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008924485362", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008924816866", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008941150452)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008900046735)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008924816866", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400893, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008940779126", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008941150452)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008900046735)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400893, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008940779126", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400893, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/203", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 43, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008962826690", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008963150193", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654008977897896)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008941150452)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008963150193", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 43, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008962826690", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008963150193", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654008977897896)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008941150452)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008963150193", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 45, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008963438258", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008963766236", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654008977897896)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008941150452)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008963766236", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 45, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008963438258", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008963766236", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654008977897896)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008941150452)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008963766236", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400897, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008971463264", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654008977897896)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008941150452)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400897, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008971463264", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400897, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400897, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654008975964656", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654008977897896)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654008941150452)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400897, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654008975964656", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400897, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/199", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 47, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008995021530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008995345009", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009004708073)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654008977897896)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008995345009", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 47, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008995021530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008995345009", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009004708073)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654008977897896)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008995345009", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 49, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008995631738", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008995959673", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009004708073)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654008977897896)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008995959673", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 49, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654008995631738", :region_code => nil}, :publish_timetoken => {:timetoken => "14654008995959673", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009004708073)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654008977897896)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654008995959673", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400900, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009003858431", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009004708073)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654008977897896)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400900, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009003858431", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400900, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/201", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 51, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009027218098", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009027540206", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009041275620)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009004708073)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009027540206", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 51, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009027218098", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009027540206", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009041275620)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009004708073)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009027540206", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 53, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009027827200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009028149897", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009041275620)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009004708073)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009028149897", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 53, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009027827200", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009028149897", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009041275620)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009004708073)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009028149897", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400904, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009040417259", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009041275620)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009004708073)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400904, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009040417259", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400904, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/215", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 55, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009059348280", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009059670208", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009067575576)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009058017777)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009059670208", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400906, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009067195746", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009067575576)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009058017777)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400906, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009067195746", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400906, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/211", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 57, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009091484880", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009091802194", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009103454915)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009067575576)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009091802194", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400910, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009103009457", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009103454915)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009067575576)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400910, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009103009457", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400910, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo______channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/213", record: :none) do
        pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 59, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009128189690", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009128510219", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009142313329)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009103454915)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009128510219", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400913, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009135269386", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009142313329)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009103454915)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400913, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009135269386", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400913, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400914, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009140768366", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009142313329)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009103454915)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400914, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009140768366", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400914, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo______channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: "demo.*", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/245", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 61, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009160324800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009160654041", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009174400716)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009128515331)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009160654041", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 61, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009160324800", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009160654041", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009174400716)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009128515331)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009160654041", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 63, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009160941330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009161264058", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009174400716)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009128515331)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009161264058", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 63, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009160941330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009161264058", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009174400716)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009128515331)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009161264058", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400917, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009173533981", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009174400716)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009128515331)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400917, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009173533981", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400917, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/241", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 65, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009192485530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009192807531", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009201044451)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009174400716)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009192807531", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 65, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009192485530", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009192807531", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009201044451)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009174400716)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009192807531", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 67, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009193098062", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009193419204", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009201044451)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009174400716)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009193419204", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 67, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009193098062", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009193419204", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009201044451)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009174400716)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009193419204", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400919, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009199214195", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009201044451)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009174400716)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400919, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009199214195", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400919, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/243", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 69, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009224675672", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009225005506", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009242956776)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009201044451)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009225005506", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 69, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009224675672", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009225005506", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009242956776)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009201044451)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009225005506", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 71, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009225304510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009225631200", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009242956776)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009201044451)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009225631200", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 71, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009225304510", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009225631200", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009242956776)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009201044451)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009225631200", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400924, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009242492646", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009242956776)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009201044451)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400924, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009242492646", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400924, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/239", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 73, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009258263402", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009258585215", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009266140146)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009242956776)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009258585215", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 73, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009258263402", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009258585215", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009266140146)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009242956776)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009258585215", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 75, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009258877730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009259198644", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009266140146)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009242956776)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009259198644", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 75, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009258877730", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009259198644", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009266140146)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009242956776)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009259198644", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400926, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009265273144", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009266140146)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009242956776)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400926, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009265273144", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400926, :state => nil, :occupancy => 2}})
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/235", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 77, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009290484428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009290811715", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009303039263)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009266140146)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009290811715", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 77, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009290484428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009290811715", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009303039263)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009266140146)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009290811715", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 79, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009291097660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009291424436", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009303039263)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009266140146)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009291424436", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 79, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009291097660", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009291424436", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009303039263)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009266140146)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009291424436", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400930, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009302661807", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009303039263)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009266140146)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400930, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009302661807", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400930, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/237", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 81, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009327470310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009327792664", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009339942922)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009303051388)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009327792664", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 81, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009327470310", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009327792664", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009339942922)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009303051388)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009327792664", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 83, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009328080000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009328402391", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009339942922)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009303051388)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009328402391", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 83, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009328080000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009328402391", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009339942922)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009303051388)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009328402391", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400933, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009334393489", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009339942922)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009303051388)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400933, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009334393489", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400933, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400933, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009339555117", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009339942922)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009303051388)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400933, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009339555117", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400933, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/251", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 85, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009359932590", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009360254404", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009372552806)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009339942922)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009360254404", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400936, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009367437059", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009372552806)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009339942922)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400936, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009367437059", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400936, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400937, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009371846708", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009372552806)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009339942922)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400937, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009371846708", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400937, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/247", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 87, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009392313568", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009392634907", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009406943305)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009372552806)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009392634907", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400939, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009397718879", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009406943305)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009372552806)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400939, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009397718879", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400939, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400940, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009405191208", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009406943305)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009372552806)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400940, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009405191208", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400940, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group__nil___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/249", record: :none) do
        pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 89, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009424684570", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009425006840", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009436640075)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009406943305)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009425006840", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "join", "timestamp" => 1465400943, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009432062049", :region_code => 1}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009436640075)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009406943305)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400943, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009432062049", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400943, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo-pnpres", :subscription_match => "demo-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400943, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009436248885", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009436640075)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009406943305)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400943, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo-pnpres", :actual_channel => "demo-pnpres", :publish_time_object => {:timetoken => "14654009436248885", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400943, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence___demo___channel_group__nil___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq([])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/191", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 91, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009457067480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009457391403", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009457391403", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 91, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009457067480", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009457391403", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009457391403", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 93, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009457681122", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009458003508", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009458003508", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 93, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009457681122", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009458003508", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009458003508", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400946, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009466234844", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400946, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009466234844", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400946, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400946, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009466899840", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400946, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009466899840", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400946, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400946, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009467042235", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400946, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009467042235", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400946, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400947, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009470316594", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400947, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009470316594", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400947, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400947, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009473070467", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400947, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009473070467", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400947, :state => nil, :occupancy => 1}})

        expect(envelopes[9].status[:code]).to eq(200)
        expect(envelopes[9].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400947, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009476926406", :region_code => 2}})
        expect(envelopes[9].status[:category]).to eq(:ack)
        expect(envelopes[9].status[:auto_retried]).to eq(true)
        expect(envelopes[9].status[:current_timetoken]).to eq(14654009477313543)
        expect(envelopes[9].status[:last_timetoken]).to eq(14654009425092564)
        expect(envelopes[9].status[:subscribed_channels]).to eq([])
        expect(envelopes[9].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[9].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[9].result[:code]).to eq(200)
        expect(envelopes[9].result[:operation]).to eq(:presence)
        expect(envelopes[9].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400947, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009476926406", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400947, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/187", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 95, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009489595850", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009489916000", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009489916000", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 95, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009489595850", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009489916000", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009489916000", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 97, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009490203290", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009490525598", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009490525598", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 97, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009490203290", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009490525598", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009490525598", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400949, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009498563363", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400949, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009498563363", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400949, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400949, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009497973493", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400949, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009497973493", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400949, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400949, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009498616588", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400949, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009498616588", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400949, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400950, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009502853871", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400950, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009502853871", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400950, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400950, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009506259773", :region_code => 2}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654009506649394)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654009477313543)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400950, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009506259773", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400950, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/189", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 99, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009522101460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009522433380", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009522433380", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 99, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009522101460", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009522433380", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009522433380", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 101, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009522724600", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009523049710", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009523049710", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 101, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009522724600", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009523049710", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009523049710", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400952, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009529736487", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400952, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009529736487", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400952, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400952, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009529761661", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400952, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009529761661", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400952, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400953, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009534836880", :region_code => 2}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400953, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009534836880", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400953, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400953, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009539641183", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654009540395854)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654009506649394)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400953, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009539641183", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400953, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo___http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: :demo, http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/185", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 103, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009554439192", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009554769421", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009554769421", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 103, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009554439192", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009554769421", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009554769421", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 105, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009555055192", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009555379740", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009555379740", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 105, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009555055192", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009555379740", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009555379740", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400956, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009560244496", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400956, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009560244496", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400956, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400956, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009561339678", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400956, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009561339678", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400956, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400956, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009567691371", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400956, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009567691371", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400956, :state => nil, :occupancy => 1}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400957, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009570810400", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400957, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009570810400", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400957, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400957, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009575232872", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654009575978514)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654009540395854)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400957, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009575232872", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400957, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/181", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 107, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009586893330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009587215872", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009587215872", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 107, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009586893330", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009587215872", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009587215872", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 109, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009587512000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009587852889", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009587852889", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 109, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009587512000", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009587852889", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009587852889", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400959, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009595574910", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400959, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009595574910", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400959, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400959, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009596266175", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400959, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009596266175", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400959, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400959, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009596287799", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400959, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009596287799", :region_code => 1}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400959, :state => nil, :occupancy => 2}})

        expect(envelopes[7].status[:code]).to eq(200)
        expect(envelopes[7].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400960, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009600427937", :region_code => 1}})
        expect(envelopes[7].status[:category]).to eq(:ack)
        expect(envelopes[7].status[:auto_retried]).to eq(true)
        expect(envelopes[7].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[7].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[7].status[:subscribed_channels]).to eq([])
        expect(envelopes[7].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[7].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[7].result[:code]).to eq(200)
        expect(envelopes[7].result[:operation]).to eq(:presence)
        expect(envelopes[7].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400960, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009600427937", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400960, :state => nil, :occupancy => 1}})

        expect(envelopes[8].status[:code]).to eq(200)
        expect(envelopes[8].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400960, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009605550208", :region_code => 1}})
        expect(envelopes[8].status[:category]).to eq(:ack)
        expect(envelopes[8].status[:auto_retried]).to eq(true)
        expect(envelopes[8].status[:current_timetoken]).to eq(14654009607366433)
        expect(envelopes[8].status[:last_timetoken]).to eq(14654009575978514)
        expect(envelopes[8].status[:subscribed_channels]).to eq([])
        expect(envelopes[8].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[8].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[8].result[:code]).to eq(200)
        expect(envelopes[8].result[:operation]).to eq(:presence)
        expect(envelopes[8].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400960, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009605550208", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400960, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__true___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/183", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: true, callback: @callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 111, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009619341490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009619665389", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009619665389", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 111, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009619341490", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009619665389", :region_code => 12}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:subscribe)
        expect(envelopes[1].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009619665389", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 113, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009619948428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009620272610", :region_code => 12}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:subscribe)
        expect(envelopes[2].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009620272610", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 113, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009619948428", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009620272610", :region_code => 12}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:subscribe)
        expect(envelopes[3].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009620272610", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400962, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009627238267", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400962, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009627238267", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400962, :state => nil, :occupancy => 2}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400962, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009627943530", :region_code => 2}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400962, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009627943530", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400962, :state => nil, :occupancy => 2}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400963, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009633836701", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009634616532)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009607366433)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400963, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009633836701", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400963, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback__nil_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___block_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/__channel___demo____presence____demo0___demo1____demo_______channel_group___demo____http_sync__false___callback___lambda_cipherkeysuper-secret-cipher-key", record: :none) do
        @msg_envelopes = []
        @presence_envelopes = []
        @status_envelopes = []
        callbacks = Pubnub::SubscribeCallback.new(
          message: -> (envelope) { @msg_envelopes << envelope },
          presence: -> (envelope) { @presence_envelopes << envelope },
          status: -> (envelope) { @status_envelopes << envelope },
        )

        pubnub.add_listener(callback: callbacks)
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], channel_group: "demo", http_sync: false, callback: @callback)
      end

      eventually do
        if @status_envelopes.length > 0
          expect(@status_envelopes[0].status[:category]).to eq(:timeout)
          expect(@status_envelopes[0].status[:error]).to eq(true)
          expect(@status_envelopes[0].status[:auto_retried]).to eq(true)
          expect(@status_envelopes[0].status[:current_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:last_timetoken]).to eq(0)
          expect(@status_envelopes[0].status[:subscribed_channels]).to eq(["demo", "demo0-pnpres", "demo1-pnpres", "demo.*-pnpres"])
          expect(@status_envelopes[0].status[:subscribed_channel_groups]).to eq(["demo"])
          expect(@status_envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})
          true
        end
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback__nil_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/197", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 115, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009653099232", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009653425386", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009671178045)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009634616532)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009653425386", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400965, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009658864347", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009671178045)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009634616532)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400965, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009658864347", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400965, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400966, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009664995538", :region_code => 1}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009671178045)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009634616532)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400966, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009664995538", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400966, :state => nil, :occupancy => 1}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400966, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009668772947", :region_code => 1}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009671178045)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009634616532)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400966, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009668772947", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400966, :state => nil, :occupancy => 1}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400967, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009670788004", :region_code => 2}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009671178045)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009634616532)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400967, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009670788004", :region_code => 2}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400967, :state => nil, :occupancy => 1}})
      end
    end

    it "__channel___demo____presence____demo0___demo1____demo_______channel_group__nil___http_sync__true___callback___block_cipherkeysuper-secret-cipher-key" do

      VCR.use_cassette("examples/subscribe/193", record: :none) do
        pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true)
        envelopes = pubnub.subscribe(channel: "demo", presence: [:demo0, "demo1", "demo.*"], http_sync: true, &@callback)
        envelopes.each do |envelope|
          expect(envelope.is_a?(Pubnub::Envelope)).to eq true
          expect(envelope.error?).to eq false
        end

        expect(envelopes[0].status[:code]).to eq(200)
        expect(envelopes[0].status[:data]).to eq({:shard => "5", :channel => "demo", :subscription_match => "demo", :payload => "+P/LbbzCa1zk0sDK1i6/69V4ROQ8h5MxYRFCpWPlmRM=", :flags => 0, :issuing_client_id => "ruby-test-uuid-client-two", :subscribe_key => "sub-a-mock-key", :sequence_number => 117, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => {:timetoken => "14654009685571830", :region_code => nil}, :publish_timetoken => {:timetoken => "14654009685894349", :region_code => 12}})
        expect(envelopes[0].status[:category]).to eq(:ack)
        expect(envelopes[0].status[:auto_retried]).to eq(true)
        expect(envelopes[0].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[0].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[0].status[:subscribed_channels]).to eq([])
        expect(envelopes[0].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[0].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[0].result[:code]).to eq(200)
        expect(envelopes[0].result[:operation]).to eq(:subscribe)
        expect(envelopes[0].result[:data]).to eq({:message => "ruby is awesome", :subscribed_channel => "demo", :actual_channel => "demo", :publish_time_object => {:timetoken => "14654009685894349", :region_code => 12}, :message_meta_data => nil, :presence_event => nil, :presence => nil})

        expect(envelopes[1].status[:code]).to eq(200)
        expect(envelopes[1].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "join", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009691368742", :region_code => 2}})
        expect(envelopes[1].status[:category]).to eq(:ack)
        expect(envelopes[1].status[:auto_retried]).to eq(true)
        expect(envelopes[1].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[1].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[1].status[:subscribed_channels]).to eq([])
        expect(envelopes[1].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[1].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[1].result[:code]).to eq(200)
        expect(envelopes[1].result[:operation]).to eq(:presence)
        expect(envelopes[1].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009691368742", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400969, :state => nil, :occupancy => 2}})

        expect(envelopes[2].status[:code]).to eq(200)
        expect(envelopes[2].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "join", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009691369663", :region_code => 2}})
        expect(envelopes[2].status[:category]).to eq(:ack)
        expect(envelopes[2].status[:auto_retried]).to eq(true)
        expect(envelopes[2].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[2].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[2].status[:subscribed_channels]).to eq([])
        expect(envelopes[2].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[2].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[2].result[:code]).to eq(200)
        expect(envelopes[2].result[:operation]).to eq(:presence)
        expect(envelopes[2].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009691369663", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400969, :state => nil, :occupancy => 2}})

        expect(envelopes[3].status[:code]).to eq(200)
        expect(envelopes[3].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "join", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009692129357", :region_code => 2}})
        expect(envelopes[3].status[:category]).to eq(:ack)
        expect(envelopes[3].status[:auto_retried]).to eq(true)
        expect(envelopes[3].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[3].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[3].status[:subscribed_channels]).to eq([])
        expect(envelopes[3].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[3].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[3].result[:code]).to eq(200)
        expect(envelopes[3].result[:operation]).to eq(:presence)
        expect(envelopes[3].result[:data]).to eq({:message => {"action" => "join", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 2}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009692129357", :region_code => 2}, :message_meta_data => nil, :presence_event => "join", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400969, :state => nil, :occupancy => 2}})

        expect(envelopes[4].status[:code]).to eq(200)
        expect(envelopes[4].status[:data]).to eq({:shard => "5", :channel => "demo0-pnpres", :subscription_match => "demo0-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009697401354", :region_code => 1}})
        expect(envelopes[4].status[:category]).to eq(:ack)
        expect(envelopes[4].status[:auto_retried]).to eq(true)
        expect(envelopes[4].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[4].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[4].status[:subscribed_channels]).to eq([])
        expect(envelopes[4].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[4].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[4].result[:code]).to eq(200)
        expect(envelopes[4].result[:operation]).to eq(:presence)
        expect(envelopes[4].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400969, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo0-pnpres", :actual_channel => "demo0-pnpres", :publish_time_object => {:timetoken => "14654009697401354", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400969, :state => nil, :occupancy => 1}})

        expect(envelopes[5].status[:code]).to eq(200)
        expect(envelopes[5].status[:data]).to eq({:shard => "5", :channel => "demo1-pnpres", :subscription_match => "demo1-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400970, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009701461896", :region_code => 1}})
        expect(envelopes[5].status[:category]).to eq(:ack)
        expect(envelopes[5].status[:auto_retried]).to eq(true)
        expect(envelopes[5].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[5].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[5].status[:subscribed_channels]).to eq([])
        expect(envelopes[5].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[5].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[5].result[:code]).to eq(200)
        expect(envelopes[5].result[:operation]).to eq(:presence)
        expect(envelopes[5].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400970, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo1-pnpres", :actual_channel => "demo1-pnpres", :publish_time_object => {:timetoken => "14654009701461896", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400970, :state => nil, :occupancy => 1}})

        expect(envelopes[6].status[:code]).to eq(200)
        expect(envelopes[6].status[:data]).to eq({:shard => "5", :channel => "demo.*-pnpres", :subscription_match => "demo.*-pnpres", :payload => {"action" => "leave", "timestamp" => 1465400970, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :flags => 0, :issuing_client_id => nil, :subscribe_key => "sub-a-mock-key", :sequence_number => nil, :user_meta_data => nil, :replication_map => nil, :eat_after_reading => nil, :type => nil, :waypoint_list => nil, :origination_time_token => nil, :publish_timetoken => {:timetoken => "14654009704472694", :region_code => 1}})
        expect(envelopes[6].status[:category]).to eq(:ack)
        expect(envelopes[6].status[:auto_retried]).to eq(true)
        expect(envelopes[6].status[:current_timetoken]).to eq(14654009705262657)
        expect(envelopes[6].status[:last_timetoken]).to eq(14654009671178045)
        expect(envelopes[6].status[:subscribed_channels]).to eq([])
        expect(envelopes[6].status[:subscribed_channel_groups]).to eq([])
        expect(envelopes[6].status[:config]).to eq({:tls => false, :uuid => "ruby-test-uuid-client-one", :auth_key => "ruby-test-auth-client-one", :origin => "ps.pndsn.com"})

        expect(envelopes[6].result[:code]).to eq(200)
        expect(envelopes[6].result[:operation]).to eq(:presence)
        expect(envelopes[6].result[:data]).to eq({:message => {"action" => "leave", "timestamp" => 1465400970, "uuid" => "ruby-test-uuid-client-two", "occupancy" => 1}, :subscribed_channel => "demo.*-pnpres", :actual_channel => "demo.*-pnpres", :publish_time_object => {:timetoken => "14654009704472694", :region_code => 1}, :message_meta_data => nil, :presence_event => "leave", :presence => {:uuid => "ruby-test-uuid-client-two", :timestamp => 1465400970, :state => nil, :occupancy => 1}})
      end
    end
  end
end
